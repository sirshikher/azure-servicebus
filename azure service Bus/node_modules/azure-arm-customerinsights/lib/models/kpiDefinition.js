/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Defines the KPI Threshold limits.
 *
 */
class KpiDefinition {
  /**
   * Create a KpiDefinition.
   * @member {string} entityType The mapping entity type. Possible values
   * include: 'None', 'Profile', 'Interaction', 'Relationship'
   * @member {string} entityTypeName The mapping entity name.
   * @member {string} [tenantId] The hub name.
   * @member {string} [kpiName] The KPI name.
   * @member {object} [displayName] Localized display name for the KPI.
   * @member {object} [description] Localized description for the KPI.
   * @member {string} calculationWindow The calculation window. Possible values
   * include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
   * @member {string} [calculationWindowFieldName] Name of calculation window
   * field.
   * @member {string} functionProperty The computation function for the KPI.
   * Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count',
   * 'None', 'CountDistinct'
   * @member {string} expression The computation expression for the KPI.
   * @member {string} [unit] The unit of measurement for the KPI.
   * @member {string} [filter] The filter expression for the KPI.
   * @member {array} [groupBy] the group by properties for the KPI.
   * @member {array} [groupByMetadata] The KPI GroupByMetadata.
   * @member {array} [participantProfilesMetadata] The participant profiles.
   * @member {string} [provisioningState] Provisioning state. Possible values
   * include: 'Provisioning', 'Succeeded', 'Expiring', 'Deleting',
   * 'HumanIntervention', 'Failed'
   * @member {object} [thresHolds] The KPI thresholds.
   * @member {number} [thresHolds.lowerLimit] The lower threshold limit.
   * @member {number} [thresHolds.upperLimit] The upper threshold limit.
   * @member {boolean} [thresHolds.increasingKpi] Whether or not the KPI is an
   * increasing KPI.
   * @member {array} [aliases] The aliases.
   * @member {array} [extracts] The KPI extracts.
   */
  constructor() {
  }

  /**
   * Defines the metadata of KpiDefinition
   *
   * @returns {object} metadata of KpiDefinition
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'KpiDefinition',
      type: {
        name: 'Composite',
        className: 'KpiDefinition',
        modelProperties: {
          entityType: {
            required: true,
            serializedName: 'entityType',
            type: {
              name: 'Enum',
              allowedValues: [ 'None', 'Profile', 'Interaction', 'Relationship' ]
            }
          },
          entityTypeName: {
            required: true,
            serializedName: 'entityTypeName',
            type: {
              name: 'String'
            }
          },
          tenantId: {
            required: false,
            readOnly: true,
            serializedName: 'tenantId',
            type: {
              name: 'String'
            }
          },
          kpiName: {
            required: false,
            readOnly: true,
            serializedName: 'kpiName',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'displayName',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          calculationWindow: {
            required: true,
            serializedName: 'calculationWindow',
            type: {
              name: 'Enum',
              allowedValues: [ 'Lifetime', 'Hour', 'Day', 'Week', 'Month' ]
            }
          },
          calculationWindowFieldName: {
            required: false,
            serializedName: 'calculationWindowFieldName',
            type: {
              name: 'String'
            }
          },
          functionProperty: {
            required: true,
            serializedName: 'function',
            type: {
              name: 'Enum',
              allowedValues: [ 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count', 'None', 'CountDistinct' ]
            }
          },
          expression: {
            required: true,
            serializedName: 'expression',
            type: {
              name: 'String'
            }
          },
          unit: {
            required: false,
            serializedName: 'unit',
            type: {
              name: 'String'
            }
          },
          filter: {
            required: false,
            serializedName: 'filter',
            type: {
              name: 'String'
            }
          },
          groupBy: {
            required: false,
            serializedName: 'groupBy',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          groupByMetadata: {
            required: false,
            readOnly: true,
            serializedName: 'groupByMetadata',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'KpiGroupByMetadataElementType',
                  type: {
                    name: 'Composite',
                    className: 'KpiGroupByMetadata'
                  }
              }
            }
          },
          participantProfilesMetadata: {
            required: false,
            readOnly: true,
            serializedName: 'participantProfilesMetadata',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'KpiParticipantProfilesMetadataElementType',
                  type: {
                    name: 'Composite',
                    className: 'KpiParticipantProfilesMetadata'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'provisioningState',
            type: {
              name: 'String'
            }
          },
          thresHolds: {
            required: false,
            serializedName: 'thresHolds',
            type: {
              name: 'Composite',
              className: 'KpiThresholds'
            }
          },
          aliases: {
            required: false,
            serializedName: 'aliases',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'KpiAliasElementType',
                  type: {
                    name: 'Composite',
                    className: 'KpiAlias'
                  }
              }
            }
          },
          extracts: {
            required: false,
            serializedName: 'extracts',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'KpiExtractElementType',
                  type: {
                    name: 'Composite',
                    className: 'KpiExtract'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = KpiDefinition;
