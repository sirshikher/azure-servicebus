/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Machines
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServicemapManagementClient.
 */
export interface Machines {


    /**
     * Returns a collection of machines matching the specified conditions.  The
     * returned collection represents either machines that are active/live during
     * the specified interval  of time (`live=true` and `startTime`/`endTime` are
     * specified) or that are known to have existed at or  some time prior to the
     * specified point in time (`live=false` and `timestamp` is specified).
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.live] Specifies whether to return live resources
     * (true) or inventory resources (false). Defaults to **true**. When retrieving
     * live resources, the start time (`startTime`) and end time (`endTime`) of the
     * desired interval should be included. When retrieving inventory resources, an
     * optional timestamp (`timestamp`) parameter can be specified to return the
     * version of each resource closest (not-after) that timestamp.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {date} [options.timestamp] UTC date and time specifying a time
     * instance relative to which to evaluate each machine resource. Only applies
     * when `live=false`. When not specified, the service uses DateTime.UtcNow.
     *
     * @param {number} [options.top] Page size to use. When not specified, the
     * default page size is 100 records.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachineCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByWorkspaceWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { live? : boolean, startTime? : Date, endTime? : Date, timestamp? : Date, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachineCollection>>;

    /**
     * Returns a collection of machines matching the specified conditions.  The
     * returned collection represents either machines that are active/live during
     * the specified interval  of time (`live=true` and `startTime`/`endTime` are
     * specified) or that are known to have existed at or  some time prior to the
     * specified point in time (`live=false` and `timestamp` is specified).
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.live] Specifies whether to return live resources
     * (true) or inventory resources (false). Defaults to **true**. When retrieving
     * live resources, the start time (`startTime`) and end time (`endTime`) of the
     * desired interval should be included. When retrieving inventory resources, an
     * optional timestamp (`timestamp`) parameter can be specified to return the
     * version of each resource closest (not-after) that timestamp.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {date} [options.timestamp] UTC date and time specifying a time
     * instance relative to which to evaluate each machine resource. Only applies
     * when `live=false`. When not specified, the service uses DateTime.UtcNow.
     *
     * @param {number} [options.top] Page size to use. When not specified, the
     * default page size is 100 records.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachineCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachineCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachineCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: { live? : boolean, startTime? : Date, endTime? : Date, timestamp? : Date, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.MachineCollection>;
    listByWorkspace(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.MachineCollection>): void;
    listByWorkspace(resourceGroupName: string, workspaceName: string, options: { live? : boolean, startTime? : Date, endTime? : Date, timestamp? : Date, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachineCollection>): void;


    /**
     * Returns the specified machine.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.timestamp] UTC date and time specifying a time
     * instance relative to which to evaluate the machine resource. When not
     * specified, the service uses DateTime.UtcNow.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Machine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, options?: { timestamp? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Machine>>;

    /**
     * Returns the specified machine.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.timestamp] UTC date and time specifying a time
     * instance relative to which to evaluate the machine resource. When not
     * specified, the service uses DateTime.UtcNow.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Machine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Machine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Machine} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, options?: { timestamp? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.Machine>;
    get(resourceGroupName: string, workspaceName: string, machineName: string, callback: ServiceCallback<models.Machine>): void;
    get(resourceGroupName: string, workspaceName: string, machineName: string, options: { timestamp? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Machine>): void;


    /**
     * Obtains the liveness status of the machine during the specified time
     * interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Liveness>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLivenessWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Liveness>>;

    /**
     * Obtains the liveness status of the machine during the specified time
     * interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Liveness} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Liveness} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Liveness} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.Liveness>;
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, callback: ServiceCallback<models.Liveness>): void;
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Liveness>): void;


    /**
     * Returns a collection of connections terminating or originating at the
     * specified machine
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionsWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionCollection>>;

    /**
     * Returns a collection of connections terminating or originating at the
     * specified machine
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionCollection>;
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, callback: ServiceCallback<models.ConnectionCollection>): void;
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionCollection>): void;


    /**
     * Returns a collection of processes on the specified machine matching the
     * specified conditions. The returned collection represents either processes
     * that are active/live during the specified interval  of time (`live=true` and
     * `startTime`/`endTime` are specified) or that are known to have existed at or
     * some time prior to the specified point in time (`live=false` and `timestamp`
     * is specified).
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.live] Specifies whether to return live resources
     * (true) or inventory resources (false). Defaults to **true**. When retrieving
     * live resources, the start time (`startTime`) and end time (`endTime`) of the
     * desired interval should be included. When retrieving inventory resources, an
     * optional timestamp (`timestamp`) parameter can be specified to return the
     * version of each resource closest (not-after) that timestamp.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {date} [options.timestamp] UTC date and time specifying a time
     * instance relative to which to evaluate all process resource. Only applies
     * when `live=false`. When not specified, the service uses DateTime.UtcNow.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessesWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, options?: { live? : boolean, startTime? : Date, endTime? : Date, timestamp? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessCollection>>;

    /**
     * Returns a collection of processes on the specified machine matching the
     * specified conditions. The returned collection represents either processes
     * that are active/live during the specified interval  of time (`live=true` and
     * `startTime`/`endTime` are specified) or that are known to have existed at or
     * some time prior to the specified point in time (`live=false` and `timestamp`
     * is specified).
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.live] Specifies whether to return live resources
     * (true) or inventory resources (false). Defaults to **true**. When retrieving
     * live resources, the start time (`startTime`) and end time (`endTime`) of the
     * desired interval should be included. When retrieving inventory resources, an
     * optional timestamp (`timestamp`) parameter can be specified to return the
     * version of each resource closest (not-after) that timestamp.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {date} [options.timestamp] UTC date and time specifying a time
     * instance relative to which to evaluate all process resource. Only applies
     * when `live=false`. When not specified, the service uses DateTime.UtcNow.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcesses(resourceGroupName: string, workspaceName: string, machineName: string, options?: { live? : boolean, startTime? : Date, endTime? : Date, timestamp? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessCollection>;
    listProcesses(resourceGroupName: string, workspaceName: string, machineName: string, callback: ServiceCallback<models.ProcessCollection>): void;
    listProcesses(resourceGroupName: string, workspaceName: string, machineName: string, options: { live? : boolean, startTime? : Date, endTime? : Date, timestamp? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessCollection>): void;


    /**
     * Returns a collection of live ports on the specified machine during the
     * specified time interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PortCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPortsWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PortCollection>>;

    /**
     * Returns a collection of live ports on the specified machine during the
     * specified time interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PortCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PortCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PortCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPorts(resourceGroupName: string, workspaceName: string, machineName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.PortCollection>;
    listPorts(resourceGroupName: string, workspaceName: string, machineName: string, callback: ServiceCallback<models.PortCollection>): void;
    listPorts(resourceGroupName: string, workspaceName: string, machineName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PortCollection>): void;


    /**
     * Returns a collection of machine groups this machine belongs to during the
     * specified time interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachineGroupCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMachineGroupMembershipWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachineGroupCollection>>;

    /**
     * Returns a collection of machine groups this machine belongs to during the
     * specified time interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachineGroupCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachineGroupCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachineGroupCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMachineGroupMembership(resourceGroupName: string, workspaceName: string, machineName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.MachineGroupCollection>;
    listMachineGroupMembership(resourceGroupName: string, workspaceName: string, machineName: string, callback: ServiceCallback<models.MachineGroupCollection>): void;
    listMachineGroupMembership(resourceGroupName: string, workspaceName: string, machineName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachineGroupCollection>): void;


    /**
     * Returns a collection of machines matching the specified conditions.  The
     * returned collection represents either machines that are active/live during
     * the specified interval  of time (`live=true` and `startTime`/`endTime` are
     * specified) or that are known to have existed at or  some time prior to the
     * specified point in time (`live=false` and `timestamp` is specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachineCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByWorkspaceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachineCollection>>;

    /**
     * Returns a collection of machines matching the specified conditions.  The
     * returned collection represents either machines that are active/live during
     * the specified interval  of time (`live=true` and `startTime`/`endTime` are
     * specified) or that are known to have existed at or  some time prior to the
     * specified point in time (`live=false` and `timestamp` is specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachineCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachineCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachineCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByWorkspaceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MachineCollection>;
    listByWorkspaceNext(nextPageLink: string, callback: ServiceCallback<models.MachineCollection>): void;
    listByWorkspaceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachineCollection>): void;


    /**
     * Returns a collection of connections terminating or originating at the
     * specified machine
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionCollection>>;

    /**
     * Returns a collection of connections terminating or originating at the
     * specified machine
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnectionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionCollection>;
    listConnectionsNext(nextPageLink: string, callback: ServiceCallback<models.ConnectionCollection>): void;
    listConnectionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionCollection>): void;


    /**
     * Returns a collection of processes on the specified machine matching the
     * specified conditions. The returned collection represents either processes
     * that are active/live during the specified interval  of time (`live=true` and
     * `startTime`/`endTime` are specified) or that are known to have existed at or
     * some time prior to the specified point in time (`live=false` and `timestamp`
     * is specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessCollection>>;

    /**
     * Returns a collection of processes on the specified machine matching the
     * specified conditions. The returned collection represents either processes
     * that are active/live during the specified interval  of time (`live=true` and
     * `startTime`/`endTime` are specified) or that are known to have existed at or
     * some time prior to the specified point in time (`live=false` and `timestamp`
     * is specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessCollection>;
    listProcessesNext(nextPageLink: string, callback: ServiceCallback<models.ProcessCollection>): void;
    listProcessesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessCollection>): void;


    /**
     * Returns a collection of live ports on the specified machine during the
     * specified time interval.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PortCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPortsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PortCollection>>;

    /**
     * Returns a collection of live ports on the specified machine during the
     * specified time interval.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PortCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PortCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PortCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPortsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PortCollection>;
    listPortsNext(nextPageLink: string, callback: ServiceCallback<models.PortCollection>): void;
    listPortsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PortCollection>): void;


    /**
     * Returns a collection of machine groups this machine belongs to during the
     * specified time interval.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachineGroupCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMachineGroupMembershipNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachineGroupCollection>>;

    /**
     * Returns a collection of machine groups this machine belongs to during the
     * specified time interval.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachineGroupCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachineGroupCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachineGroupCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMachineGroupMembershipNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MachineGroupCollection>;
    listMachineGroupMembershipNext(nextPageLink: string, callback: ServiceCallback<models.MachineGroupCollection>): void;
    listMachineGroupMembershipNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachineGroupCollection>): void;
}

/**
 * @class
 * Processes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServicemapManagementClient.
 */
export interface Processes {


    /**
     * Returns the specified process.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} processName Process resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.timestamp] UTC date and time specifying a time
     * instance relative to which to evaluate a resource. When not specified, the
     * service uses DateTime.UtcNow.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Process>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: { timestamp? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Process>>;

    /**
     * Returns the specified process.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} processName Process resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.timestamp] UTC date and time specifying a time
     * instance relative to which to evaluate a resource. When not specified, the
     * service uses DateTime.UtcNow.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Process} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Process} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Process} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: { timestamp? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.Process>;
    get(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: ServiceCallback<models.Process>): void;
    get(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: { timestamp? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Process>): void;


    /**
     * Obtains the liveness status of the process during the specified time
     * interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} processName Process resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Liveness>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLivenessWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Liveness>>;

    /**
     * Obtains the liveness status of the process during the specified time
     * interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} processName Process resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Liveness} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Liveness} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Liveness} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.Liveness>;
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: ServiceCallback<models.Liveness>): void;
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Liveness>): void;


    /**
     * Returns a collection of ports on which this process is accepting
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} processName Process resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PortCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAcceptingPortsWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PortCollection>>;

    /**
     * Returns a collection of ports on which this process is accepting
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} processName Process resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PortCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PortCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PortCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAcceptingPorts(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.PortCollection>;
    listAcceptingPorts(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: ServiceCallback<models.PortCollection>): void;
    listAcceptingPorts(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PortCollection>): void;


    /**
     * Returns a collection of connections terminating or originating at the
     * specified process
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} processName Process resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionsWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionCollection>>;

    /**
     * Returns a collection of connections terminating or originating at the
     * specified process
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} processName Process resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionCollection>;
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: ServiceCallback<models.ConnectionCollection>): void;
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionCollection>): void;


    /**
     * Returns a collection of ports on which this process is accepting
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PortCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAcceptingPortsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PortCollection>>;

    /**
     * Returns a collection of ports on which this process is accepting
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PortCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PortCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PortCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAcceptingPortsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PortCollection>;
    listAcceptingPortsNext(nextPageLink: string, callback: ServiceCallback<models.PortCollection>): void;
    listAcceptingPortsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PortCollection>): void;


    /**
     * Returns a collection of connections terminating or originating at the
     * specified process
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionCollection>>;

    /**
     * Returns a collection of connections terminating or originating at the
     * specified process
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnectionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionCollection>;
    listConnectionsNext(nextPageLink: string, callback: ServiceCallback<models.ConnectionCollection>): void;
    listConnectionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionCollection>): void;
}

/**
 * @class
 * Ports
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServicemapManagementClient.
 */
export interface Ports {


    /**
     * Returns the specified port. The port must be live during the specified time
     * interval. If the port is not live during the interval, status 404 (Not
     * Found) is returned.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} portName Port resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Port>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Port>>;

    /**
     * Returns the specified port. The port must be live during the specified time
     * interval. If the port is not live during the interval, status 404 (Not
     * Found) is returned.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} portName Port resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Port} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Port} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Port} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.Port>;
    get(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: ServiceCallback<models.Port>): void;
    get(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Port>): void;


    /**
     * Obtains the liveness status of the port during the specified time interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} portName Port resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Liveness>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLivenessWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Liveness>>;

    /**
     * Obtains the liveness status of the port during the specified time interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} portName Port resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Liveness} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Liveness} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Liveness} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.Liveness>;
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: ServiceCallback<models.Liveness>): void;
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Liveness>): void;


    /**
     * Returns a collection of processes accepting on the specified port
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} portName Port resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAcceptingProcessesWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessCollection>>;

    /**
     * Returns a collection of processes accepting on the specified port
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} portName Port resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAcceptingProcesses(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessCollection>;
    listAcceptingProcesses(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: ServiceCallback<models.ProcessCollection>): void;
    listAcceptingProcesses(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessCollection>): void;


    /**
     * Returns a collection of connections established via the specified port.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} portName Port resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionsWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionCollection>>;

    /**
     * Returns a collection of connections established via the specified port.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineName Machine resource name.
     *
     * @param {string} portName Port resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionCollection>;
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: ServiceCallback<models.ConnectionCollection>): void;
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionCollection>): void;


    /**
     * Returns a collection of processes accepting on the specified port
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAcceptingProcessesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessCollection>>;

    /**
     * Returns a collection of processes accepting on the specified port
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAcceptingProcessesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessCollection>;
    listAcceptingProcessesNext(nextPageLink: string, callback: ServiceCallback<models.ProcessCollection>): void;
    listAcceptingProcessesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessCollection>): void;


    /**
     * Returns a collection of connections established via the specified port.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionCollection>>;

    /**
     * Returns a collection of connections established via the specified port.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnectionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionCollection>;
    listConnectionsNext(nextPageLink: string, callback: ServiceCallback<models.ConnectionCollection>): void;
    listConnectionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionCollection>): void;
}

/**
 * @class
 * ClientGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServicemapManagementClient.
 */
export interface ClientGroups {


    /**
     * Retrieves the specified client group
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} clientGroupName Client Group resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClientGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClientGroup>>;

    /**
     * Retrieves the specified client group
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} clientGroupName Client Group resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClientGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClientGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClientGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.ClientGroup>;
    get(resourceGroupName: string, workspaceName: string, clientGroupName: string, callback: ServiceCallback<models.ClientGroup>): void;
    get(resourceGroupName: string, workspaceName: string, clientGroupName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClientGroup>): void;


    /**
     * Returns the approximate number of members in the client group.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} clientGroupName Client Group resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClientGroupMembersCount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMembersCountWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClientGroupMembersCount>>;

    /**
     * Returns the approximate number of members in the client group.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} clientGroupName Client Group resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClientGroupMembersCount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClientGroupMembersCount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClientGroupMembersCount} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMembersCount(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.ClientGroupMembersCount>;
    getMembersCount(resourceGroupName: string, workspaceName: string, clientGroupName: string, callback: ServiceCallback<models.ClientGroupMembersCount>): void;
    getMembersCount(resourceGroupName: string, workspaceName: string, clientGroupName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClientGroupMembersCount>): void;


    /**
     * Returns the members of the client group during the specified time interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} clientGroupName Client Group resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {number} [options.top] Page size to use. When not specified, the
     * default page size is 100 records.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClientGroupMembersCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMembersWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: { startTime? : Date, endTime? : Date, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClientGroupMembersCollection>>;

    /**
     * Returns the members of the client group during the specified time interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} clientGroupName Client Group resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {number} [options.top] Page size to use. When not specified, the
     * default page size is 100 records.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClientGroupMembersCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClientGroupMembersCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClientGroupMembersCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMembers(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: { startTime? : Date, endTime? : Date, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ClientGroupMembersCollection>;
    listMembers(resourceGroupName: string, workspaceName: string, clientGroupName: string, callback: ServiceCallback<models.ClientGroupMembersCollection>): void;
    listMembers(resourceGroupName: string, workspaceName: string, clientGroupName: string, options: { startTime? : Date, endTime? : Date, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClientGroupMembersCollection>): void;


    /**
     * Returns the members of the client group during the specified time interval.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClientGroupMembersCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMembersNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClientGroupMembersCollection>>;

    /**
     * Returns the members of the client group during the specified time interval.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClientGroupMembersCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClientGroupMembersCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClientGroupMembersCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMembersNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClientGroupMembersCollection>;
    listMembersNext(nextPageLink: string, callback: ServiceCallback<models.ClientGroupMembersCollection>): void;
    listMembersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClientGroupMembersCollection>): void;
}

/**
 * @class
 * Maps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServicemapManagementClient.
 */
export interface Maps {


    /**
     * Generates the specified map.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {object} request Request options.
     *
     * @param {date} [request.startTime] Map interval start time.
     *
     * @param {date} [request.endTime] Map interval end time.
     *
     * @param {string} request.kind Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MapResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, request: models.MapRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MapResponse>>;

    /**
     * Generates the specified map.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {object} request Request options.
     *
     * @param {date} [request.startTime] Map interval start time.
     *
     * @param {date} [request.endTime] Map interval end time.
     *
     * @param {string} request.kind Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MapResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MapResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MapResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generate(resourceGroupName: string, workspaceName: string, request: models.MapRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MapResponse>;
    generate(resourceGroupName: string, workspaceName: string, request: models.MapRequest, callback: ServiceCallback<models.MapResponse>): void;
    generate(resourceGroupName: string, workspaceName: string, request: models.MapRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MapResponse>): void;
}

/**
 * @class
 * Summaries
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServicemapManagementClient.
 */
export interface Summaries {


    /**
     * Returns summary information about the machines in the workspace.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachinesSummary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMachinesWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachinesSummary>>;

    /**
     * Returns summary information about the machines in the workspace.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachinesSummary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachinesSummary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachinesSummary} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMachines(resourceGroupName: string, workspaceName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.MachinesSummary>;
    getMachines(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.MachinesSummary>): void;
    getMachines(resourceGroupName: string, workspaceName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachinesSummary>): void;
}

/**
 * @class
 * MachineGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServicemapManagementClient.
 */
export interface MachineGroups {


    /**
     * Returns all machine groups during the specified time interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachineGroupCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByWorkspaceWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachineGroupCollection>>;

    /**
     * Returns all machine groups during the specified time interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachineGroupCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachineGroupCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachineGroupCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.MachineGroupCollection>;
    listByWorkspace(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.MachineGroupCollection>): void;
    listByWorkspace(resourceGroupName: string, workspaceName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachineGroupCollection>): void;


    /**
     * Creates a new machine group.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {object} machineGroup Machine Group resource to create.
     *
     * @param {string} [machineGroup.groupType] Type of the machine group. Possible
     * values include: 'unknown', 'azure-cs', 'azure-sf', 'azure-vmss',
     * 'user-static'
     *
     * @param {string} machineGroup.displayName User defined name for the group
     *
     * @param {number} [machineGroup.count] Count of machines in this group. The
     * value of count may be bigger than the number of machines in case of the
     * group has been truncated due to exceeding the max number of machines a group
     * can handle.
     *
     * @param {array} [machineGroup.machines] References of the machines in this
     * group. The hints within each reference do not represent the current value of
     * the corresponding fields. They are a snapshot created during the last time
     * the machine group was updated.
     *
     * @param {string} [machineGroup.etag] Resource ETAG.
     *
     * @param {string} machineGroup.kind Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachineGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineGroup: models.MachineGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachineGroup>>;

    /**
     * Creates a new machine group.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {object} machineGroup Machine Group resource to create.
     *
     * @param {string} [machineGroup.groupType] Type of the machine group. Possible
     * values include: 'unknown', 'azure-cs', 'azure-sf', 'azure-vmss',
     * 'user-static'
     *
     * @param {string} machineGroup.displayName User defined name for the group
     *
     * @param {number} [machineGroup.count] Count of machines in this group. The
     * value of count may be bigger than the number of machines in case of the
     * group has been truncated due to exceeding the max number of machines a group
     * can handle.
     *
     * @param {array} [machineGroup.machines] References of the machines in this
     * group. The hints within each reference do not represent the current value of
     * the corresponding fields. They are a snapshot created during the last time
     * the machine group was updated.
     *
     * @param {string} [machineGroup.etag] Resource ETAG.
     *
     * @param {string} machineGroup.kind Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachineGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachineGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachineGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, workspaceName: string, machineGroup: models.MachineGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MachineGroup>;
    create(resourceGroupName: string, workspaceName: string, machineGroup: models.MachineGroup, callback: ServiceCallback<models.MachineGroup>): void;
    create(resourceGroupName: string, workspaceName: string, machineGroup: models.MachineGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachineGroup>): void;


    /**
     * Returns the specified machine group as it existed during the specified time
     * interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineGroupName Machine Group resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachineGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineGroupName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachineGroup>>;

    /**
     * Returns the specified machine group as it existed during the specified time
     * interval.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineGroupName Machine Group resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] UTC date and time specifying the start
     * time of an interval. When not specified the service uses DateTime.UtcNow -
     * 10m
     *
     * @param {date} [options.endTime] UTC date and time specifying the end time of
     * an interval. When not specified the service uses DateTime.UtcNow
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachineGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachineGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachineGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workspaceName: string, machineGroupName: string, options?: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.MachineGroup>;
    get(resourceGroupName: string, workspaceName: string, machineGroupName: string, callback: ServiceCallback<models.MachineGroup>): void;
    get(resourceGroupName: string, workspaceName: string, machineGroupName: string, options: { startTime? : Date, endTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachineGroup>): void;


    /**
     * Updates a machine group.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineGroupName Machine Group resource name.
     *
     * @param {object} machineGroup Machine Group resource to update.
     *
     * @param {string} [machineGroup.groupType] Type of the machine group. Possible
     * values include: 'unknown', 'azure-cs', 'azure-sf', 'azure-vmss',
     * 'user-static'
     *
     * @param {string} machineGroup.displayName User defined name for the group
     *
     * @param {number} [machineGroup.count] Count of machines in this group. The
     * value of count may be bigger than the number of machines in case of the
     * group has been truncated due to exceeding the max number of machines a group
     * can handle.
     *
     * @param {array} [machineGroup.machines] References of the machines in this
     * group. The hints within each reference do not represent the current value of
     * the corresponding fields. They are a snapshot created during the last time
     * the machine group was updated.
     *
     * @param {string} [machineGroup.etag] Resource ETAG.
     *
     * @param {string} machineGroup.kind Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachineGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineGroupName: string, machineGroup: models.MachineGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachineGroup>>;

    /**
     * Updates a machine group.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineGroupName Machine Group resource name.
     *
     * @param {object} machineGroup Machine Group resource to update.
     *
     * @param {string} [machineGroup.groupType] Type of the machine group. Possible
     * values include: 'unknown', 'azure-cs', 'azure-sf', 'azure-vmss',
     * 'user-static'
     *
     * @param {string} machineGroup.displayName User defined name for the group
     *
     * @param {number} [machineGroup.count] Count of machines in this group. The
     * value of count may be bigger than the number of machines in case of the
     * group has been truncated due to exceeding the max number of machines a group
     * can handle.
     *
     * @param {array} [machineGroup.machines] References of the machines in this
     * group. The hints within each reference do not represent the current value of
     * the corresponding fields. They are a snapshot created during the last time
     * the machine group was updated.
     *
     * @param {string} [machineGroup.etag] Resource ETAG.
     *
     * @param {string} machineGroup.kind Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachineGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachineGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachineGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, workspaceName: string, machineGroupName: string, machineGroup: models.MachineGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MachineGroup>;
    update(resourceGroupName: string, workspaceName: string, machineGroupName: string, machineGroup: models.MachineGroup, callback: ServiceCallback<models.MachineGroup>): void;
    update(resourceGroupName: string, workspaceName: string, machineGroupName: string, machineGroup: models.MachineGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachineGroup>): void;


    /**
     * Deletes the specified Machine Group.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineGroupName Machine Group resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, machineGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified Machine Group.
     *
     * @param {string} resourceGroupName Resource group name within the specified
     * subscriptionId.
     *
     * @param {string} workspaceName OMS workspace containing the resources of
     * interest.
     *
     * @param {string} machineGroupName Machine Group resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, workspaceName: string, machineGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, workspaceName: string, machineGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, workspaceName: string, machineGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns all machine groups during the specified time interval.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MachineGroupCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByWorkspaceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MachineGroupCollection>>;

    /**
     * Returns all machine groups during the specified time interval.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MachineGroupCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MachineGroupCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MachineGroupCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByWorkspaceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MachineGroupCollection>;
    listByWorkspaceNext(nextPageLink: string, callback: ServiceCallback<models.MachineGroupCollection>): void;
    listByWorkspaceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MachineGroupCollection>): void;
}
