/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A process resource represents a process running on a machine. The process
 * may be actively *monitored*, i.e., a Dependency Agent is running on its
 * machine, or *discovered*, i.e., its existence was inferred by observing the
 * data stream from monitored machines. A process resource represents a pool of
 * actual operating system resources that share command lines and metadata. As
 * the process pool evolves over time, prior versions of the process resource
 * are preserved and available for access. A process is live during an interval
 * of time, if that process is executing during (parts) of that interval
 *
 * @extends models['CoreResource']
 */
class Process extends models['CoreResource'] {
  /**
   * Create a Process.
   * @member {date} [timestamp] UTC date and time when this process resource
   * was updated in the system
   * @member {string} [monitoringState] Specifies whether the process is
   * actively monitored or discovered. Possible values include: 'monitored',
   * 'discovered'
   * @member {object} [machine] Machine hosting this process.
   * @member {string} [machine.id] Resource URI.
   * @member {string} [machine.type] Resource type qualifier.
   * @member {string} [machine.name] Resource name.
   * @member {string} [machine.kind] Polymorphic Discriminator
   * @member {string} [executableName] The name of the process executable
   * @member {string} [displayName] Name to use for display purposes
   * @member {date} [startTime] UTC date and time when the process started
   * @member {string} [role] The inferred role of this process based on its
   * name, command line, etc. Possible values include: 'webServer',
   * 'appServer', 'databaseServer', 'ldapServer', 'smbServer'
   * @member {string} [group] The name of the product or suite of the process.
   * The group is determined by its executable name, command line, etc.
   * @member {object} [details] Process metadata (command line, product name,
   * etc.).
   * @member {string} [details.persistentKey] A unique indentifier for a
   * process, generally resilient to process restart, computed by Service Map.
   * @member {number} [details.poolId] Represents the identity of the process
   * pool assigned to the process by Dependency Agent.
   * @member {number} [details.firstPid] The Operating System Process
   * Idendifier (PID) of the first process in this process pool.
   * @member {string} [details.description] Process description.
   * @member {string} [details.companyName] Name of company that created the
   * process executable.
   * @member {string} [details.internalName] Internal process name.
   * @member {string} [details.productName] Product name.
   * @member {string} [details.productVersion] Product version.
   * @member {string} [details.fileVersion] File version.
   * @member {string} [details.commandLine] Process command line.
   * @member {string} [details.executablePath] Process executable path.
   * @member {string} [details.workingDirectory] Process workingDirectory.
   * @member {array} [details.services] Collection of services hosted by this
   * Process (Windows only).
   * @member {string} [details.zoneName] Process zone name (Linux only).
   * @member {object} [user] Information about the account under which the
   * process is executing.
   * @member {string} [user.userName] User name under which the process is
   * running.
   * @member {string} [user.userDomain] Domain name for the user.
   * @member {object} [clientOf] Present only for a discovered process acting
   * as a client of a monitored process/machine/port. References the monitored
   * process/machine/port that this process is a client of.
   * @member {string} [clientOf.id] Resource URI.
   * @member {string} [clientOf.type] Resource type qualifier.
   * @member {string} [clientOf.name] Resource name.
   * @member {string} [clientOf.kind] Polymorphic Discriminator
   * @member {object} [acceptorOf] Present only for a discovered process acting
   * as a server. References the port on which the discovered process is
   * accepting.
   * @member {string} [acceptorOf.id] Resource URI.
   * @member {string} [acceptorOf.type] Resource type qualifier.
   * @member {string} [acceptorOf.name] Resource name.
   * @member {string} [acceptorOf.kind] Polymorphic Discriminator
   * @member {object} [hosting] Information about the hosting environment
   * @member {string} [hosting.provider] The hosting provider of the VM.
   * Possible values include: 'azure'
   * @member {string} [hosting.kind] Polymorphic Discriminator
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Process
   *
   * @returns {object} metadata of Process
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'process',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'kind',
          clientName: 'kind'
        },
        uberParent: 'BaseResource',
        className: 'Process',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            serializedName: 'kind',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          timestamp: {
            required: false,
            serializedName: 'properties.timestamp',
            type: {
              name: 'DateTime'
            }
          },
          monitoringState: {
            required: false,
            serializedName: 'properties.monitoringState',
            type: {
              name: 'Enum',
              allowedValues: [ 'monitored', 'discovered' ]
            }
          },
          machine: {
            required: false,
            serializedName: 'properties.machine',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'kind',
                clientName: 'kind'
              },
              uberParent: 'ResourceReference',
              className: 'ResourceReference'
            }
          },
          executableName: {
            required: false,
            serializedName: 'properties.executableName',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          },
          startTime: {
            required: false,
            serializedName: 'properties.startTime',
            type: {
              name: 'DateTime'
            }
          },
          role: {
            required: false,
            serializedName: 'properties.role',
            type: {
              name: 'String'
            }
          },
          group: {
            required: false,
            serializedName: 'properties.group',
            type: {
              name: 'String'
            }
          },
          details: {
            required: false,
            serializedName: 'properties.details',
            type: {
              name: 'Composite',
              className: 'ProcessDetails'
            }
          },
          user: {
            required: false,
            serializedName: 'properties.user',
            type: {
              name: 'Composite',
              className: 'ProcessUser'
            }
          },
          clientOf: {
            required: false,
            serializedName: 'properties.clientOf',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'kind',
                clientName: 'kind'
              },
              uberParent: 'ResourceReference',
              className: 'ResourceReference'
            }
          },
          acceptorOf: {
            required: false,
            serializedName: 'properties.acceptorOf',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'kind',
                clientName: 'kind'
              },
              uberParent: 'ResourceReference',
              className: 'ResourceReference'
            }
          },
          hosting: {
            required: false,
            serializedName: 'properties.hosting',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'kind',
                clientName: 'kind'
              },
              uberParent: 'ProcessHostingConfiguration',
              className: 'ProcessHostingConfiguration'
            }
          }
        }
      }
    };
  }
}

module.exports = Process;
