/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The Edifact one way agreement.
 *
 */
class EdifactOneWayAgreement {
  /**
   * Create a EdifactOneWayAgreement.
   * @member {object} senderBusinessIdentity The sender business identity
   * @member {string} [senderBusinessIdentity.qualifier] The business identity
   * qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
   * @member {string} [senderBusinessIdentity.value] The user defined business
   * identity value.
   * @member {object} receiverBusinessIdentity The receiver business identity
   * @member {string} [receiverBusinessIdentity.qualifier] The business
   * identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
   * @member {string} [receiverBusinessIdentity.value] The user defined
   * business identity value.
   * @member {object} protocolSettings The EDIFACT protocol settings.
   * @member {object} [protocolSettings.validationSettings] The EDIFACT
   * validation settings.
   * @member {boolean}
   * [protocolSettings.validationSettings.validateCharacterSet] The value
   * indicating whether to validate character set in the message.
   * @member {boolean}
   * [protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
   * The value indicating whether to check for duplicate interchange control
   * number.
   * @member {number}
   * [protocolSettings.validationSettings.interchangeControlNumberValidityDays]
   * The validity period of interchange control number.
   * @member {boolean}
   * [protocolSettings.validationSettings.checkDuplicateGroupControlNumber] The
   * value indicating whether to check for duplicate group control number.
   * @member {boolean}
   * [protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
   * The value indicating whether to check for duplicate transaction set
   * control number.
   * @member {boolean} [protocolSettings.validationSettings.validateEdiTypes]
   * The value indicating whether to Whether to validate EDI types.
   * @member {boolean} [protocolSettings.validationSettings.validateXsdTypes]
   * The value indicating whether to Whether to validate XSD types.
   * @member {boolean}
   * [protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
   * The value indicating whether to allow leading and trailing spaces and
   * zeroes.
   * @member {boolean}
   * [protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
   * The value indicating whether to trim leading and trailing spaces and
   * zeroes.
   * @member {string}
   * [protocolSettings.validationSettings.trailingSeparatorPolicy] The trailing
   * separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
   * 'Optional', 'Mandatory'
   * @member {object} [protocolSettings.framingSettings] The EDIFACT framing
   * settings.
   * @member {string}
   * [protocolSettings.framingSettings.serviceCodeListDirectoryVersion] The
   * service code list directory version.
   * @member {string} [protocolSettings.framingSettings.characterEncoding] The
   * character encoding.
   * @member {number} [protocolSettings.framingSettings.protocolVersion] The
   * protocol version.
   * @member {number} [protocolSettings.framingSettings.dataElementSeparator]
   * The data element separator.
   * @member {number} [protocolSettings.framingSettings.componentSeparator] The
   * component separator.
   * @member {number} [protocolSettings.framingSettings.segmentTerminator] The
   * segment terminator.
   * @member {number} [protocolSettings.framingSettings.releaseIndicator] The
   * release indicator.
   * @member {number} [protocolSettings.framingSettings.repetitionSeparator]
   * The repetition separator.
   * @member {string} [protocolSettings.framingSettings.characterSet] The
   * EDIFACT frame setting characterSet. Possible values include:
   * 'NotSpecified', 'UNOB', 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG',
   * 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX', 'UNOY', 'KECA'
   * @member {string} [protocolSettings.framingSettings.decimalPointIndicator]
   * The EDIFACT frame setting decimal indicator. Possible values include:
   * 'NotSpecified', 'Comma', 'Decimal'
   * @member {string}
   * [protocolSettings.framingSettings.segmentTerminatorSuffix] The EDIFACT
   * frame setting segment terminator suffix. Possible values include:
   * 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
   * @member {object} [protocolSettings.envelopeSettings] The EDIFACT envelope
   * settings.
   * @member {string}
   * [protocolSettings.envelopeSettings.groupAssociationAssignedCode] The group
   * association assigned code.
   * @member {string}
   * [protocolSettings.envelopeSettings.communicationAgreementId] The
   * communication agreement id.
   * @member {boolean}
   * [protocolSettings.envelopeSettings.applyDelimiterStringAdvice] The value
   * indicating whether to apply delimiter string advice.
   * @member {boolean}
   * [protocolSettings.envelopeSettings.createGroupingSegments] The value
   * indicating whether to create grouping segments.
   * @member {boolean}
   * [protocolSettings.envelopeSettings.enableDefaultGroupHeaders] The value
   * indicating whether to enable default group headers.
   * @member {string}
   * [protocolSettings.envelopeSettings.recipientReferencePasswordValue] The
   * recipient reference password value.
   * @member {string}
   * [protocolSettings.envelopeSettings.recipientReferencePasswordQualifier]
   * The recipient reference password qualifier.
   * @member {string}
   * [protocolSettings.envelopeSettings.applicationReferenceId] The application
   * reference id.
   * @member {string}
   * [protocolSettings.envelopeSettings.processingPriorityCode] The processing
   * priority code.
   * @member {number}
   * [protocolSettings.envelopeSettings.interchangeControlNumberLowerBound] The
   * interchange control number lower bound.
   * @member {number}
   * [protocolSettings.envelopeSettings.interchangeControlNumberUpperBound] The
   * interchange control number upper bound.
   * @member {boolean}
   * [protocolSettings.envelopeSettings.rolloverInterchangeControlNumber] The
   * value indicating whether to rollover interchange control number.
   * @member {string}
   * [protocolSettings.envelopeSettings.interchangeControlNumberPrefix] The
   * interchange control number prefix.
   * @member {string}
   * [protocolSettings.envelopeSettings.interchangeControlNumberSuffix] The
   * interchange control number suffix.
   * @member {string}
   * [protocolSettings.envelopeSettings.senderReverseRoutingAddress] The sender
   * reverse routing address.
   * @member {string}
   * [protocolSettings.envelopeSettings.receiverReverseRoutingAddress] The
   * receiver reverse routing address.
   * @member {string} [protocolSettings.envelopeSettings.functionalGroupId] The
   * functional group id.
   * @member {string}
   * [protocolSettings.envelopeSettings.groupControllingAgencyCode] The group
   * controlling agency code.
   * @member {string} [protocolSettings.envelopeSettings.groupMessageVersion]
   * The group message version.
   * @member {string} [protocolSettings.envelopeSettings.groupMessageRelease]
   * The group message release.
   * @member {number}
   * [protocolSettings.envelopeSettings.groupControlNumberLowerBound] The group
   * control number lower bound.
   * @member {number}
   * [protocolSettings.envelopeSettings.groupControlNumberUpperBound] The group
   * control number upper bound.
   * @member {boolean}
   * [protocolSettings.envelopeSettings.rolloverGroupControlNumber] The value
   * indicating whether to rollover group control number.
   * @member {string}
   * [protocolSettings.envelopeSettings.groupControlNumberPrefix] The group
   * control number prefix.
   * @member {string}
   * [protocolSettings.envelopeSettings.groupControlNumberSuffix] The group
   * control number suffix.
   * @member {string}
   * [protocolSettings.envelopeSettings.groupApplicationReceiverQualifier] The
   * group application receiver qualifier.
   * @member {string}
   * [protocolSettings.envelopeSettings.groupApplicationReceiverId] The group
   * application receiver id.
   * @member {string}
   * [protocolSettings.envelopeSettings.groupApplicationSenderQualifier] The
   * group application sender qualifier.
   * @member {string}
   * [protocolSettings.envelopeSettings.groupApplicationSenderId] The group
   * application sender id.
   * @member {string}
   * [protocolSettings.envelopeSettings.groupApplicationPassword] The group
   * application password.
   * @member {boolean}
   * [protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
   * The value indicating whether to overwrite existing transaction set control
   * number.
   * @member {string}
   * [protocolSettings.envelopeSettings.transactionSetControlNumberPrefix] The
   * transaction set control number prefix.
   * @member {string}
   * [protocolSettings.envelopeSettings.transactionSetControlNumberSuffix] The
   * transaction set control number suffix.
   * @member {number}
   * [protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
   * The transaction set control number lower bound.
   * @member {number}
   * [protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
   * The transaction set control number upper bound.
   * @member {boolean}
   * [protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
   * The value indicating whether to rollover transaction set control number.
   * @member {boolean} [protocolSettings.envelopeSettings.isTestInterchange]
   * The value indicating whether the message is a test interchange.
   * @member {string}
   * [protocolSettings.envelopeSettings.senderInternalIdentification] The
   * sender internal identification.
   * @member {string}
   * [protocolSettings.envelopeSettings.senderInternalSubIdentification] The
   * sender internal sub identification.
   * @member {string}
   * [protocolSettings.envelopeSettings.receiverInternalIdentification] The
   * receiver internal identification.
   * @member {string}
   * [protocolSettings.envelopeSettings.receiverInternalSubIdentification] The
   * receiver internal sub identification.
   * @member {object} [protocolSettings.acknowledgementSettings] The EDIFACT
   * acknowledgement settings.
   * @member {boolean}
   * [protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
   * The value indicating whether technical acknowledgement is needed.
   * @member {boolean}
   * [protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
   * The value indicating whether to batch the technical acknowledgements.
   * @member {boolean}
   * [protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
   * The value indicating whether functional acknowledgement is needed.
   * @member {boolean}
   * [protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
   * The value indicating whether to batch functional acknowledgements.
   * @member {boolean}
   * [protocolSettings.acknowledgementSettings.needLoopForValidMessages] The
   * value indicating whether a loop is needed for valid messages.
   * @member {boolean}
   * [protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
   * The value indicating whether to send synchronous acknowledgement.
   * @member {string}
   * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
   * The acknowledgement control number prefix.
   * @member {string}
   * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
   * The acknowledgement control number suffix.
   * @member {number}
   * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
   * The acknowledgement control number lower bound.
   * @member {number}
   * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
   * The acknowledgement control number upper bound.
   * @member {boolean}
   * [protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
   * The value indicating whether to rollover acknowledgement control number.
   * @member {object} [protocolSettings.messageFilter] The EDIFACT message
   * filter.
   * @member {string} [protocolSettings.messageFilter.messageFilterType] The
   * message filter type. Possible values include: 'NotSpecified', 'Include',
   * 'Exclude'
   * @member {object} [protocolSettings.processingSettings] The EDIFACT
   * processing Settings.
   * @member {boolean} [protocolSettings.processingSettings.maskSecurityInfo]
   * The value indicating whether to mask security information.
   * @member {boolean}
   * [protocolSettings.processingSettings.preserveInterchange] The value
   * indicating whether to preserve interchange.
   * @member {boolean}
   * [protocolSettings.processingSettings.suspendInterchangeOnError] The value
   * indicating whether to suspend interchange on error.
   * @member {boolean}
   * [protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
   * The value indicating whether to create empty xml tags for trailing
   * separators.
   * @member {boolean}
   * [protocolSettings.processingSettings.useDotAsDecimalSeparator] The value
   * indicating whether to use dot as decimal separator.
   * @member {array} [protocolSettings.envelopeOverrides] The EDIFACT envelope
   * override settings.
   * @member {array} [protocolSettings.messageFilterList] The EDIFACT message
   * filter list.
   * @member {array} [protocolSettings.schemaReferences] The EDIFACT schema
   * references.
   * @member {array} [protocolSettings.validationOverrides] The EDIFACT
   * validation override settings.
   * @member {array} [protocolSettings.edifactDelimiterOverrides] The EDIFACT
   * delimiter override settings.
   */
  constructor() {
  }

  /**
   * Defines the metadata of EdifactOneWayAgreement
   *
   * @returns {object} metadata of EdifactOneWayAgreement
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'EdifactOneWayAgreement',
      type: {
        name: 'Composite',
        className: 'EdifactOneWayAgreement',
        modelProperties: {
          senderBusinessIdentity: {
            required: true,
            serializedName: 'senderBusinessIdentity',
            type: {
              name: 'Composite',
              className: 'BusinessIdentity'
            }
          },
          receiverBusinessIdentity: {
            required: true,
            serializedName: 'receiverBusinessIdentity',
            type: {
              name: 'Composite',
              className: 'BusinessIdentity'
            }
          },
          protocolSettings: {
            required: true,
            serializedName: 'protocolSettings',
            type: {
              name: 'Composite',
              className: 'EdifactProtocolSettings'
            }
          }
        }
      }
    };
  }
}

module.exports = EdifactOneWayAgreement;
