/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * LinkedServices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the OperationalInsightsManagementClient.
 */
export interface LinkedServices {


    /**
     * Create or update a linked service.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that will
     * contain the linkedServices resource
     *
     * @param {string} linkedServiceName Name of the linkedServices resource
     *
     * @param {object} parameters The parameters required to create or update a
     * linked service.
     *
     * @param {string} parameters.resourceId The resource id of the resource that
     * will be linked to the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkedService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, linkedServiceName: string, parameters: models.LinkedService, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkedService>>;

    /**
     * Create or update a linked service.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that will
     * contain the linkedServices resource
     *
     * @param {string} linkedServiceName Name of the linkedServices resource
     *
     * @param {object} parameters The parameters required to create or update a
     * linked service.
     *
     * @param {string} parameters.resourceId The resource id of the resource that
     * will be linked to the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkedService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkedService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkedService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, linkedServiceName: string, parameters: models.LinkedService, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkedService>;
    createOrUpdate(resourceGroupName: string, workspaceName: string, linkedServiceName: string, parameters: models.LinkedService, callback: ServiceCallback<models.LinkedService>): void;
    createOrUpdate(resourceGroupName: string, workspaceName: string, linkedServiceName: string, parameters: models.LinkedService, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkedService>): void;


    /**
     * Deletes a linked service instance.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that
     * contains the linkedServices resource
     *
     * @param {string} linkedServiceName Name of the linked service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, linkedServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a linked service instance.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that
     * contains the linkedServices resource
     *
     * @param {string} linkedServiceName Name of the linked service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, workspaceName: string, linkedServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, workspaceName: string, linkedServiceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, workspaceName: string, linkedServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a linked service instance.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that
     * contains the linkedServices resource
     *
     * @param {string} linkedServiceName Name of the linked service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkedService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, linkedServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkedService>>;

    /**
     * Gets a linked service instance.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that
     * contains the linkedServices resource
     *
     * @param {string} linkedServiceName Name of the linked service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkedService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkedService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkedService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workspaceName: string, linkedServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkedService>;
    get(resourceGroupName: string, workspaceName: string, linkedServiceName: string, callback: ServiceCallback<models.LinkedService>): void;
    get(resourceGroupName: string, workspaceName: string, linkedServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkedService>): void;


    /**
     * Gets the linked services instances in a workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that
     * contains the linked services.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkedServiceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByWorkspaceWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkedServiceListResult>>;

    /**
     * Gets the linked services instances in a workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that
     * contains the linked services.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkedServiceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkedServiceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkedServiceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkedServiceListResult>;
    listByWorkspace(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.LinkedServiceListResult>): void;
    listByWorkspace(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkedServiceListResult>): void;
}

/**
 * @class
 * DataSources
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the OperationalInsightsManagementClient.
 */
export interface DataSources {


    /**
     * Create or update a data source.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that will
     * contain the datasource
     *
     * @param {string} dataSourceName The name of the datasource resource.
     *
     * @param {object} parameters The parameters required to create or update a
     * datasource.
     *
     * @param {object} parameters.properties The data source properties in raw json
     * format, each kind of data source have it's own schema.
     *
     * @param {string} [parameters.eTag] The ETag of the data source.
     *
     * @param {string} parameters.kind Possible values include: 'AzureActivityLog',
     * 'ChangeTrackingPath', 'ChangeTrackingDefaultPath',
     * 'ChangeTrackingDefaultRegistry', 'ChangeTrackingCustomRegistry',
     * 'CustomLog', 'CustomLogCollection', 'GenericDataSource', 'IISLogs',
     * 'LinuxPerformanceObject', 'LinuxPerformanceCollection', 'LinuxSyslog',
     * 'LinuxSyslogCollection', 'WindowsEvent', 'WindowsPerformanceCounter'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, dataSourceName: string, parameters: models.DataSource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataSource>>;

    /**
     * Create or update a data source.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that will
     * contain the datasource
     *
     * @param {string} dataSourceName The name of the datasource resource.
     *
     * @param {object} parameters The parameters required to create or update a
     * datasource.
     *
     * @param {object} parameters.properties The data source properties in raw json
     * format, each kind of data source have it's own schema.
     *
     * @param {string} [parameters.eTag] The ETag of the data source.
     *
     * @param {string} parameters.kind Possible values include: 'AzureActivityLog',
     * 'ChangeTrackingPath', 'ChangeTrackingDefaultPath',
     * 'ChangeTrackingDefaultRegistry', 'ChangeTrackingCustomRegistry',
     * 'CustomLog', 'CustomLogCollection', 'GenericDataSource', 'IISLogs',
     * 'LinuxPerformanceObject', 'LinuxPerformanceCollection', 'LinuxSyslog',
     * 'LinuxSyslogCollection', 'WindowsEvent', 'WindowsPerformanceCounter'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataSource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, dataSourceName: string, parameters: models.DataSource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataSource>;
    createOrUpdate(resourceGroupName: string, workspaceName: string, dataSourceName: string, parameters: models.DataSource, callback: ServiceCallback<models.DataSource>): void;
    createOrUpdate(resourceGroupName: string, workspaceName: string, dataSourceName: string, parameters: models.DataSource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataSource>): void;


    /**
     * Deletes a data source instance.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that
     * contains the datasource.
     *
     * @param {string} dataSourceName Name of the datasource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, dataSourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a data source instance.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that
     * contains the datasource.
     *
     * @param {string} dataSourceName Name of the datasource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, workspaceName: string, dataSourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, workspaceName: string, dataSourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, workspaceName: string, dataSourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a datasource instance.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that
     * contains the datasource.
     *
     * @param {string} dataSourceName Name of the datasource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, dataSourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataSource>>;

    /**
     * Gets a datasource instance.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace that
     * contains the datasource.
     *
     * @param {string} dataSourceName Name of the datasource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataSource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workspaceName: string, dataSourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataSource>;
    get(resourceGroupName: string, workspaceName: string, dataSourceName: string, callback: ServiceCallback<models.DataSource>): void;
    get(resourceGroupName: string, workspaceName: string, dataSourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataSource>): void;


    /**
     * Gets the first page of data source instances in a workspace with the link to
     * the next page.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName The workspace that contains the data sources.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.skiptoken] Starting point of the collection of data
     * source instances.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataSourceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByWorkspaceWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, filter: string, options?: { skiptoken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataSourceListResult>>;

    /**
     * Gets the first page of data source instances in a workspace with the link to
     * the next page.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName The workspace that contains the data sources.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.skiptoken] Starting point of the collection of data
     * source instances.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataSourceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataSourceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataSourceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, filter: string, options?: { skiptoken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DataSourceListResult>;
    listByWorkspace(resourceGroupName: string, workspaceName: string, filter: string, callback: ServiceCallback<models.DataSourceListResult>): void;
    listByWorkspace(resourceGroupName: string, workspaceName: string, filter: string, options: { skiptoken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataSourceListResult>): void;


    /**
     * Gets the first page of data source instances in a workspace with the link to
     * the next page.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataSourceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByWorkspaceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataSourceListResult>>;

    /**
     * Gets the first page of data source instances in a workspace with the link to
     * the next page.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataSourceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataSourceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataSourceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByWorkspaceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataSourceListResult>;
    listByWorkspaceNext(nextPageLink: string, callback: ServiceCallback<models.DataSourceListResult>): void;
    listByWorkspaceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataSourceListResult>): void;
}

/**
 * @class
 * Workspaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the OperationalInsightsManagementClient.
 */
export interface Workspaces {


    /**
     * Disables an intelligence pack for a given workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {string} intelligencePackName The name of the intelligence pack to be
     * disabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    disableIntelligencePackWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, intelligencePackName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Disables an intelligence pack for a given workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {string} intelligencePackName The name of the intelligence pack to be
     * disabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    disableIntelligencePack(resourceGroupName: string, workspaceName: string, intelligencePackName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    disableIntelligencePack(resourceGroupName: string, workspaceName: string, intelligencePackName: string, callback: ServiceCallback<void>): void;
    disableIntelligencePack(resourceGroupName: string, workspaceName: string, intelligencePackName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Enables an intelligence pack for a given workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {string} intelligencePackName The name of the intelligence pack to be
     * enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    enableIntelligencePackWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, intelligencePackName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Enables an intelligence pack for a given workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {string} intelligencePackName The name of the intelligence pack to be
     * enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    enableIntelligencePack(resourceGroupName: string, workspaceName: string, intelligencePackName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    enableIntelligencePack(resourceGroupName: string, workspaceName: string, intelligencePackName: string, callback: ServiceCallback<void>): void;
    enableIntelligencePack(resourceGroupName: string, workspaceName: string, intelligencePackName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all the intelligence packs possible and whether they are enabled or
     * disabled for a given workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listIntelligencePacksWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntelligencePack[]>>;

    /**
     * Lists all the intelligence packs possible and whether they are enabled or
     * disabled for a given workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listIntelligencePacks(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntelligencePack[]>;
    listIntelligencePacks(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.IntelligencePack[]>): void;
    listIntelligencePacks(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntelligencePack[]>): void;


    /**
     * Gets the shared keys for a workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSharedKeysWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedKeys>>;

    /**
     * Gets the shared keys for a workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSharedKeys(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedKeys>;
    getSharedKeys(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.SharedKeys>): void;
    getSharedKeys(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedKeys>): void;


    /**
     * Gets a list of usage metrics for a workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkspaceListUsagesResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkspaceListUsagesResult>>;

    /**
     * Gets a list of usage metrics for a workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkspaceListUsagesResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkspaceListUsagesResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkspaceListUsagesResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkspaceListUsagesResult>;
    listUsages(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.WorkspaceListUsagesResult>): void;
    listUsages(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspaceListUsagesResult>): void;


    /**
     * Gets a list of management groups connected to a workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkspaceListManagementGroupsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listManagementGroupsWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkspaceListManagementGroupsResult>>;

    /**
     * Gets a list of management groups connected to a workspace.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkspaceListManagementGroupsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkspaceListManagementGroupsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkspaceListManagementGroupsResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listManagementGroups(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkspaceListManagementGroupsResult>;
    listManagementGroups(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.WorkspaceListManagementGroupsResult>): void;
    listManagementGroups(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspaceListManagementGroupsResult>): void;


    /**
     * Gets workspaces in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkspaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkspaceListResult>>;

    /**
     * Gets workspaces in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkspaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkspaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkspaceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkspaceListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.WorkspaceListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspaceListResult>): void;


    /**
     * Gets the workspaces in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkspaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkspaceListResult>>;

    /**
     * Gets the workspaces in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkspaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkspaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkspaceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkspaceListResult>;
    list(callback: ServiceCallback<models.WorkspaceListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkspaceListResult>): void;


    /**
     * Create or update a workspace.
     *
     * @param {string} resourceGroupName The resource group name of the workspace.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} parameters The parameters required to create or update a
     * workspace.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * workspace. Possible values include: 'Creating', 'Succeeded', 'Failed',
     * 'Canceled', 'Deleting', 'ProvisioningAccount'
     *
     * @param {string} [parameters.source] The source of the workspace.  Source
     * defines where the workspace was created. 'Azure' implies it was created in
     * Azure.  'External' implies it was created via the Operational Insights
     * Portal. This value is set on the service side and read-only on the client
     * side.
     *
     * @param {string} [parameters.customerId] The ID associated with the
     * workspace.  Setting this value at creation time allows the workspace being
     * created to be linked to an existing workspace.
     *
     * @param {string} [parameters.portalUrl] The URL of the Operational Insights
     * portal for this workspace.  This value is set on the service side and
     * read-only on the client side.
     *
     * @param {object} [parameters.sku] The SKU of the workspace.
     *
     * @param {string} parameters.sku.name The name of the SKU. Possible values
     * include: 'Free', 'Standard', 'Premium', 'Unlimited', 'PerNode', 'PerGB2018',
     * 'Standalone'
     *
     * @param {number} [parameters.retentionInDays] The workspace data retention in
     * days. -1 means Unlimited retention for the Unlimited Sku. 730 days is the
     * maximum allowed for all other Skus.
     *
     * @param {string} [parameters.eTag] The ETag of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Workspace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Workspace>>;

    /**
     * Create or update a workspace.
     *
     * @param {string} resourceGroupName The resource group name of the workspace.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} parameters The parameters required to create or update a
     * workspace.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * workspace. Possible values include: 'Creating', 'Succeeded', 'Failed',
     * 'Canceled', 'Deleting', 'ProvisioningAccount'
     *
     * @param {string} [parameters.source] The source of the workspace.  Source
     * defines where the workspace was created. 'Azure' implies it was created in
     * Azure.  'External' implies it was created via the Operational Insights
     * Portal. This value is set on the service side and read-only on the client
     * side.
     *
     * @param {string} [parameters.customerId] The ID associated with the
     * workspace.  Setting this value at creation time allows the workspace being
     * created to be linked to an existing workspace.
     *
     * @param {string} [parameters.portalUrl] The URL of the Operational Insights
     * portal for this workspace.  This value is set on the service side and
     * read-only on the client side.
     *
     * @param {object} [parameters.sku] The SKU of the workspace.
     *
     * @param {string} parameters.sku.name The name of the SKU. Possible values
     * include: 'Free', 'Standard', 'Premium', 'Unlimited', 'PerNode', 'PerGB2018',
     * 'Standalone'
     *
     * @param {number} [parameters.retentionInDays] The workspace data retention in
     * days. -1 means Unlimited retention for the Unlimited Sku. 730 days is the
     * maximum allowed for all other Skus.
     *
     * @param {string} [parameters.eTag] The ETag of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Workspace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Workspace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Workspace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Workspace>;
    createOrUpdate(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, callback: ServiceCallback<models.Workspace>): void;
    createOrUpdate(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Workspace>): void;


    /**
     * Deletes a workspace instance.
     *
     * @param {string} resourceGroupName The resource group name of the workspace.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a workspace instance.
     *
     * @param {string} resourceGroupName The resource group name of the workspace.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a workspace instance.
     *
     * @param {string} resourceGroupName The resource group name of the workspace.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Workspace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Workspace>>;

    /**
     * Gets a workspace instance.
     *
     * @param {string} resourceGroupName The resource group name of the workspace.
     *
     * @param {string} workspaceName Name of the Log Analytics Workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Workspace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Workspace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Workspace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Workspace>;
    get(resourceGroupName: string, workspaceName: string, callback: ServiceCallback<models.Workspace>): void;
    get(resourceGroupName: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Workspace>): void;


    /**
     * Updates a workspace.
     *
     * @param {string} resourceGroupName The resource group name of the workspace.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} parameters The parameters required to patch a workspace.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * workspace. Possible values include: 'Creating', 'Succeeded', 'Failed',
     * 'Canceled', 'Deleting', 'ProvisioningAccount'
     *
     * @param {string} [parameters.source] The source of the workspace.  Source
     * defines where the workspace was created. 'Azure' implies it was created in
     * Azure.  'External' implies it was created via the Operational Insights
     * Portal. This value is set on the service side and read-only on the client
     * side.
     *
     * @param {string} [parameters.customerId] The ID associated with the
     * workspace.  Setting this value at creation time allows the workspace being
     * created to be linked to an existing workspace.
     *
     * @param {string} [parameters.portalUrl] The URL of the Operational Insights
     * portal for this workspace.  This value is set on the service side and
     * read-only on the client side.
     *
     * @param {object} [parameters.sku] The SKU of the workspace.
     *
     * @param {string} parameters.sku.name The name of the SKU. Possible values
     * include: 'Free', 'Standard', 'Premium', 'Unlimited', 'PerNode', 'PerGB2018',
     * 'Standalone'
     *
     * @param {number} [parameters.retentionInDays] The workspace data retention in
     * days. -1 means Unlimited retention for the Unlimited Sku. 730 days is the
     * maximum allowed for all other Skus.
     *
     * @param {string} [parameters.eTag] The ETag of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Workspace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Workspace>>;

    /**
     * Updates a workspace.
     *
     * @param {string} resourceGroupName The resource group name of the workspace.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} parameters The parameters required to patch a workspace.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * workspace. Possible values include: 'Creating', 'Succeeded', 'Failed',
     * 'Canceled', 'Deleting', 'ProvisioningAccount'
     *
     * @param {string} [parameters.source] The source of the workspace.  Source
     * defines where the workspace was created. 'Azure' implies it was created in
     * Azure.  'External' implies it was created via the Operational Insights
     * Portal. This value is set on the service side and read-only on the client
     * side.
     *
     * @param {string} [parameters.customerId] The ID associated with the
     * workspace.  Setting this value at creation time allows the workspace being
     * created to be linked to an existing workspace.
     *
     * @param {string} [parameters.portalUrl] The URL of the Operational Insights
     * portal for this workspace.  This value is set on the service side and
     * read-only on the client side.
     *
     * @param {object} [parameters.sku] The SKU of the workspace.
     *
     * @param {string} parameters.sku.name The name of the SKU. Possible values
     * include: 'Free', 'Standard', 'Premium', 'Unlimited', 'PerNode', 'PerGB2018',
     * 'Standalone'
     *
     * @param {number} [parameters.retentionInDays] The workspace data retention in
     * days. -1 means Unlimited retention for the Unlimited Sku. 730 days is the
     * maximum allowed for all other Skus.
     *
     * @param {string} [parameters.eTag] The ETag of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Workspace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Workspace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Workspace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Workspace>;
    update(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, callback: ServiceCallback<models.Workspace>): void;
    update(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Workspace>): void;


    /**
     * Create or update a workspace.
     *
     * @param {string} resourceGroupName The resource group name of the workspace.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} parameters The parameters required to create or update a
     * workspace.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * workspace. Possible values include: 'Creating', 'Succeeded', 'Failed',
     * 'Canceled', 'Deleting', 'ProvisioningAccount'
     *
     * @param {string} [parameters.source] The source of the workspace.  Source
     * defines where the workspace was created. 'Azure' implies it was created in
     * Azure.  'External' implies it was created via the Operational Insights
     * Portal. This value is set on the service side and read-only on the client
     * side.
     *
     * @param {string} [parameters.customerId] The ID associated with the
     * workspace.  Setting this value at creation time allows the workspace being
     * created to be linked to an existing workspace.
     *
     * @param {string} [parameters.portalUrl] The URL of the Operational Insights
     * portal for this workspace.  This value is set on the service side and
     * read-only on the client side.
     *
     * @param {object} [parameters.sku] The SKU of the workspace.
     *
     * @param {string} parameters.sku.name The name of the SKU. Possible values
     * include: 'Free', 'Standard', 'Premium', 'Unlimited', 'PerNode', 'PerGB2018',
     * 'Standalone'
     *
     * @param {number} [parameters.retentionInDays] The workspace data retention in
     * days. -1 means Unlimited retention for the Unlimited Sku. 730 days is the
     * maximum allowed for all other Skus.
     *
     * @param {string} [parameters.eTag] The ETag of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Workspace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Workspace>>;

    /**
     * Create or update a workspace.
     *
     * @param {string} resourceGroupName The resource group name of the workspace.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} parameters The parameters required to create or update a
     * workspace.
     *
     * @param {string} [parameters.provisioningState] The provisioning state of the
     * workspace. Possible values include: 'Creating', 'Succeeded', 'Failed',
     * 'Canceled', 'Deleting', 'ProvisioningAccount'
     *
     * @param {string} [parameters.source] The source of the workspace.  Source
     * defines where the workspace was created. 'Azure' implies it was created in
     * Azure.  'External' implies it was created via the Operational Insights
     * Portal. This value is set on the service side and read-only on the client
     * side.
     *
     * @param {string} [parameters.customerId] The ID associated with the
     * workspace.  Setting this value at creation time allows the workspace being
     * created to be linked to an existing workspace.
     *
     * @param {string} [parameters.portalUrl] The URL of the Operational Insights
     * portal for this workspace.  This value is set on the service side and
     * read-only on the client side.
     *
     * @param {object} [parameters.sku] The SKU of the workspace.
     *
     * @param {string} parameters.sku.name The name of the SKU. Possible values
     * include: 'Free', 'Standard', 'Premium', 'Unlimited', 'PerNode', 'PerGB2018',
     * 'Standalone'
     *
     * @param {number} [parameters.retentionInDays] The workspace data retention in
     * days. -1 means Unlimited retention for the Unlimited Sku. 730 days is the
     * maximum allowed for all other Skus.
     *
     * @param {string} [parameters.eTag] The ETag of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Workspace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Workspace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Workspace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Workspace>;
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, callback: ServiceCallback<models.Workspace>): void;
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, parameters: models.Workspace, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Workspace>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the OperationalInsightsManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available OperationalInsights Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available OperationalInsights Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available OperationalInsights Rest API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available OperationalInsights Rest API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}
