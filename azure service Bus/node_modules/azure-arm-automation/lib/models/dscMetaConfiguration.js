/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Definition of the DSC Meta Configuration.
 *
 */
class DscMetaConfiguration {
  /**
   * Create a DscMetaConfiguration.
   * @member {number} [configurationModeFrequencyMins] Gets or sets the
   * ConfigurationModeFrequencyMins value of the meta configuration.
   * @member {boolean} [rebootNodeIfNeeded] Gets or sets the RebootNodeIfNeeded
   * value of the meta configuration.
   * @member {string} [configurationMode] Gets or sets the ConfigurationMode
   * value of the meta configuration.
   * @member {string} [actionAfterReboot] Gets or sets the ActionAfterReboot
   * value of the meta configuration.
   * @member {string} [certificateId] Gets or sets the CertificateId value of
   * the meta configuration.
   * @member {number} [refreshFrequencyMins] Gets or sets the
   * RefreshFrequencyMins value of the meta configuration.
   * @member {boolean} [allowModuleOverwrite] Gets or sets the
   * AllowModuleOverwrite value of the meta configuration.
   */
  constructor() {
  }

  /**
   * Defines the metadata of DscMetaConfiguration
   *
   * @returns {object} metadata of DscMetaConfiguration
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DscMetaConfiguration',
      type: {
        name: 'Composite',
        className: 'DscMetaConfiguration',
        modelProperties: {
          configurationModeFrequencyMins: {
            required: false,
            serializedName: 'configurationModeFrequencyMins',
            type: {
              name: 'Number'
            }
          },
          rebootNodeIfNeeded: {
            required: false,
            serializedName: 'rebootNodeIfNeeded',
            type: {
              name: 'Boolean'
            }
          },
          configurationMode: {
            required: false,
            serializedName: 'configurationMode',
            type: {
              name: 'String'
            }
          },
          actionAfterReboot: {
            required: false,
            serializedName: 'actionAfterReboot',
            type: {
              name: 'String'
            }
          },
          certificateId: {
            required: false,
            serializedName: 'certificateId',
            type: {
              name: 'String'
            }
          },
          refreshFrequencyMins: {
            required: false,
            serializedName: 'refreshFrequencyMins',
            type: {
              name: 'Number'
            }
          },
          allowModuleOverwrite: {
            required: false,
            serializedName: 'allowModuleOverwrite',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = DscMetaConfiguration;
