/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Represents a stateless service instance. This includes information about the
 * identity, status, health, node name, uptime, and other details about the
 * instance.
 *
 * @extends models['ReplicaInfo']
 */
class StatelessServiceInstanceInfo extends models['ReplicaInfo'] {
  /**
   * Create a StatelessServiceInstanceInfo.
   * @property {string} [instanceId] Id of a stateless service instance.
   * InstanceId is used by Service Fabric to uniquely identify an instance of a
   * partition of a stateless service. It is unique within a partition and does
   * not change for the lifetime of the instance. If the instance has failed
   * over on the same or different node, it will get a different value for the
   * InstanceId.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StatelessServiceInstanceInfo
   *
   * @returns {object} metadata of StatelessServiceInstanceInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Stateless',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'ServiceKind',
          clientName: 'serviceKind'
        },
        uberParent: 'ReplicaInfo',
        className: 'StatelessServiceInstanceInfo',
        modelProperties: {
          replicaStatus: {
            required: false,
            serializedName: 'ReplicaStatus',
            type: {
              name: 'String'
            }
          },
          healthState: {
            required: false,
            serializedName: 'HealthState',
            type: {
              name: 'String'
            }
          },
          nodeName: {
            required: false,
            serializedName: 'NodeName',
            type: {
              name: 'String'
            }
          },
          address: {
            required: false,
            serializedName: 'Address',
            type: {
              name: 'String'
            }
          },
          lastInBuildDurationInSeconds: {
            required: false,
            serializedName: 'LastInBuildDurationInSeconds',
            type: {
              name: 'String'
            }
          },
          serviceKind: {
            required: true,
            serializedName: 'ServiceKind',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          instanceId: {
            required: false,
            serializedName: 'InstanceId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = StatelessServiceInstanceInfo;
