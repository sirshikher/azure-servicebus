/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes a partitioning scheme where an integer range is allocated evenly
 * across a number of partitions.
 *
 * @extends models['PartitionSchemeDescription']
 */
class UniformInt64RangePartitionSchemeDescription extends models['PartitionSchemeDescription'] {
  /**
   * Create a UniformInt64RangePartitionSchemeDescription.
   * @property {number} count The number of partitions.
   * @property {string} lowKey String indicating the lower bound of the
   * partition key range that
   * should be split between the partitions.
   * @property {string} highKey String indicating the upper bound of the
   * partition key range that
   * should be split between the partitions.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of UniformInt64RangePartitionSchemeDescription
   *
   * @returns {object} metadata of UniformInt64RangePartitionSchemeDescription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'UniformInt64Range',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'PartitionScheme',
          clientName: 'partitionScheme'
        },
        uberParent: 'PartitionSchemeDescription',
        className: 'UniformInt64RangePartitionSchemeDescription',
        modelProperties: {
          partitionScheme: {
            required: true,
            serializedName: 'PartitionScheme',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          count: {
            required: true,
            serializedName: 'Count',
            type: {
              name: 'Number'
            }
          },
          lowKey: {
            required: true,
            serializedName: 'LowKey',
            type: {
              name: 'String'
            }
          },
          highKey: {
            required: true,
            serializedName: 'HighKey',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = UniformInt64RangePartitionSchemeDescription;
