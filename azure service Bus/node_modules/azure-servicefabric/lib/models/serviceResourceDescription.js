/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Describes a service fabric service resource.
 *
 */
class ServiceResourceDescription {
  /**
   * Create a ServiceResourceDescription.
   * @property {string} osType The Operating system type required by the code
   * in service. Possible values include: 'Linux', 'Windows'
   * @property {array} codePackages Describes the set of code packages that
   * forms the service. A code package describes the container and the
   * properties for running it. All the code packages are started together on
   * the same host and share the same context (network, process etc.).
   * @property {array} [networkRefs] The names of the private networks that
   * this service needs to be part of.
   * @property {object} [diagnostics] Reference to sinks in
   * DiagnosticsDescription.
   * @property {boolean} [diagnostics.enabled] Status of whether or not sinks
   * are enabled.
   * @property {array} [diagnostics.sinkRefs] List of sinks to be used if
   * enabled. References the list of sinks in DiagnosticsDescription.
   * @property {string} [description] User readable description of the service.
   * @property {number} [replicaCount] The number of replicas of the service to
   * create. Defaults to 1 if not specified.
   * @property {string} [healthState] The health state of a Service Fabric
   * entity such as Cluster, Node, Application, Service, Partition, Replica
   * etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
   * 'Unknown'
   * @property {string} [status] Represents the status of the service. Possible
   * values include: 'Unknown', 'Active', 'Upgrading', 'Deleting', 'Creating',
   * 'Failed'
   * @property {string} name Service resource name.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ServiceResourceDescription
   *
   * @returns {object} metadata of ServiceResourceDescription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ServiceResourceDescription',
      type: {
        name: 'Composite',
        className: 'ServiceResourceDescription',
        modelProperties: {
          osType: {
            required: true,
            serializedName: 'properties.osType',
            type: {
              name: 'String'
            }
          },
          codePackages: {
            required: true,
            serializedName: 'properties.codePackages',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ContainerCodePackagePropertiesElementType',
                  type: {
                    name: 'Composite',
                    className: 'ContainerCodePackageProperties'
                  }
              }
            }
          },
          networkRefs: {
            required: false,
            serializedName: 'properties.networkRefs',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NetworkRefElementType',
                  type: {
                    name: 'Composite',
                    className: 'NetworkRef'
                  }
              }
            }
          },
          diagnostics: {
            required: false,
            serializedName: 'properties.diagnostics',
            type: {
              name: 'Composite',
              className: 'DiagnosticsRef'
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          replicaCount: {
            required: false,
            serializedName: 'properties.replicaCount',
            type: {
              name: 'Number'
            }
          },
          healthState: {
            required: false,
            serializedName: 'properties.healthState',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'properties.status',
            type: {
              name: 'String'
            }
          },
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ServiceResourceDescription;
