/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Information about service package deployed on a Service Fabric node.
 *
 */
class DeployedServicePackageInfo {
  /**
   * Create a DeployedServicePackageInfo.
   * @property {string} [name] The name of the service package as specified in
   * the service manifest.
   * @property {string} [version] The version of the service package specified
   * in service manifest.
   * @property {string} [status] Specifies the status of a deployed application
   * or service package on a Service Fabric node. Possible values include:
   * 'Invalid', 'Downloading', 'Activating', 'Active', 'Upgrading',
   * 'Deactivating'
   * @property {string} [servicePackageActivationId] The ActivationId of a
   * deployed service package. If ServicePackageActivationMode specified at the
   * time of creating the service
   * is 'SharedProcess' (or if it is not specified, in which case it defaults
   * to 'SharedProcess'), then value of ServicePackageActivationId
   * is always an empty string.
   */
  constructor() {
  }

  /**
   * Defines the metadata of DeployedServicePackageInfo
   *
   * @returns {object} metadata of DeployedServicePackageInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DeployedServicePackageInfo',
      type: {
        name: 'Composite',
        className: 'DeployedServicePackageInfo',
        modelProperties: {
          name: {
            required: false,
            serializedName: 'Name',
            type: {
              name: 'String'
            }
          },
          version: {
            required: false,
            serializedName: 'Version',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            serializedName: 'Status',
            type: {
              name: 'String'
            }
          },
          servicePackageActivationId: {
            required: false,
            serializedName: 'ServicePackageActivationId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = DeployedServicePackageInfo;
