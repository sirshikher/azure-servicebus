/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Information about application deployed on the node.
 *
 */
class DeployedApplicationInfo {
  /**
   * Create a DeployedApplicationInfo.
   * @property {string} [id] The identity of the application. This is an
   * encoded representation of the application name. This is used in the REST
   * APIs to identify the application resource.
   * Starting in version 6.0, hierarchical names are delimited with the "\~"
   * character. For example, if the application name is "fabric:/myapp/app1",
   * the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1"
   * in previous versions.
   * @property {string} [name] The name of the application, including the
   * 'fabric:' URI scheme.
   * @property {string} [typeName] The application type name as defined in the
   * application manifest.
   * @property {string} [status] The status of the application deployed on the
   * node. Following are the possible values. Possible values include:
   * 'Invalid', 'Downloading', 'Activating', 'Active', 'Upgrading',
   * 'Deactivating'
   * @property {string} [workDirectory] The work directory of the application
   * on the node. The work directory can be used to store application data.
   * @property {string} [logDirectory] The log directory of the application on
   * the node. The log directory can be used to store application logs.
   * @property {string} [tempDirectory] The temp directory of the application
   * on the node. The code packages belonging to the application are forked
   * with this directory set as their temporary directory.
   * @property {string} [healthState] The health state of a Service Fabric
   * entity such as Cluster, Node, Application, Service, Partition, Replica
   * etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
   * 'Unknown'
   */
  constructor() {
  }

  /**
   * Defines the metadata of DeployedApplicationInfo
   *
   * @returns {object} metadata of DeployedApplicationInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DeployedApplicationInfo',
      type: {
        name: 'Composite',
        className: 'DeployedApplicationInfo',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'Id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'Name',
            type: {
              name: 'String'
            }
          },
          typeName: {
            required: false,
            serializedName: 'TypeName',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            serializedName: 'Status',
            type: {
              name: 'String'
            }
          },
          workDirectory: {
            required: false,
            serializedName: 'WorkDirectory',
            type: {
              name: 'String'
            }
          },
          logDirectory: {
            required: false,
            serializedName: 'LogDirectory',
            type: {
              name: 'String'
            }
          },
          tempDirectory: {
            required: false,
            serializedName: 'TempDirectory',
            type: {
              name: 'String'
            }
          },
          healthState: {
            required: false,
            serializedName: 'HealthState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = DeployedApplicationInfo;
