/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Represents health evaluation for a deployed service package, containing
 * information about the data and the algorithm used by health store to
 * evaluate health. The evaluation is returned only when the aggregated health
 * state is either Error or Warning.
 *
 * @extends models['HealthEvaluation']
 */
class DeployedServicePackageHealthEvaluation extends models['HealthEvaluation'] {
  /**
   * Create a DeployedServicePackageHealthEvaluation.
   * @property {string} [nodeName] The name of a Service Fabric node.
   * @property {string} [applicationName] The name of the application,
   * including the 'fabric:' URI scheme.
   * @property {string} [serviceManifestName] The name of the service manifest.
   * @property {array} [unhealthyEvaluations] List of unhealthy evaluations
   * that led to the current aggregated health state. The type of the unhealthy
   * evaluations can be EventHealthEvaluation.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DeployedServicePackageHealthEvaluation
   *
   * @returns {object} metadata of DeployedServicePackageHealthEvaluation
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DeployedServicePackage',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'Kind',
          clientName: 'kind'
        },
        uberParent: 'HealthEvaluation',
        className: 'DeployedServicePackageHealthEvaluation',
        modelProperties: {
          aggregatedHealthState: {
            required: false,
            serializedName: 'AggregatedHealthState',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'Description',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            serializedName: 'Kind',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          nodeName: {
            required: false,
            serializedName: 'NodeName',
            type: {
              name: 'String'
            }
          },
          applicationName: {
            required: false,
            serializedName: 'ApplicationName',
            type: {
              name: 'String'
            }
          },
          serviceManifestName: {
            required: false,
            serializedName: 'ServiceManifestName',
            type: {
              name: 'String'
            }
          },
          unhealthyEvaluations: {
            required: false,
            serializedName: 'UnhealthyEvaluations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'HealthEvaluationWrapperElementType',
                  type: {
                    name: 'Composite',
                    className: 'HealthEvaluationWrapper'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = DeployedServicePackageHealthEvaluation;
