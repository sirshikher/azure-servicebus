/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchAIManagementClient.
 */
export interface Operations {


    /**
     * Lists available operations for the Microsoft.BatchAI provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists available operations for the Microsoft.BatchAI provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists available operations for the Microsoft.BatchAI provider.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists available operations for the Microsoft.BatchAI provider.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * UsageOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchAIManagementClient.
 */
export interface UsageOperations {


    /**
     * Gets the current usage information as well as limits for Batch AI resources
     * for given subscription.
     *
     * @param {string} location The location for which resource usage is queried.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListUsagesResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListUsagesResult>>;

    /**
     * Gets the current usage information as well as limits for Batch AI resources
     * for given subscription.
     *
     * @param {string} location The location for which resource usage is queried.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListUsagesResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListUsagesResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListUsagesResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListUsagesResult>;
    list(location: string, callback: ServiceCallback<models.ListUsagesResult>): void;
    list(location: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListUsagesResult>): void;


    /**
     * Gets the current usage information as well as limits for Batch AI resources
     * for given subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListUsagesResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListUsagesResult>>;

    /**
     * Gets the current usage information as well as limits for Batch AI resources
     * for given subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListUsagesResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListUsagesResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListUsagesResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListUsagesResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ListUsagesResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListUsagesResult>): void;
}

/**
 * @class
 * Clusters
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchAIManagementClient.
 */
export interface Clusters {


    /**
     * Adds a cluster. A cluster is a collection of compute nodes. Multiple jobs
     * can be run on the same cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} parameters The parameters to provide for cluster creation.
     *
     * @param {string} parameters.location The region in which to create the
     * cluster.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the Cluster.
     *
     * @param {string} parameters.vmSize The size of the virtual machines in the
     * cluster. All virtual machines in a cluster are the same size. For
     * information about available VM sizes for clusters using images from the
     * Virtual Machines Marketplace (see Sizes for Virtual Machines (Linux) or
     * Sizes for Virtual Machines (Windows). Batch AI service supports all Azure VM
     * sizes except STANDARD_A0 and those with premium storage (STANDARD_GS,
     * STANDARD_DS, and STANDARD_DSV2 series).
     *
     * @param {string} [parameters.vmPriority] dedicated or lowpriority. Default is
     * dedicated. Possible values include: 'dedicated', 'lowpriority'
     *
     * @param {object} [parameters.scaleSettings] Desired scale for the cluster.
     *
     * @param {object} [parameters.scaleSettings.manual] The scale for the cluster
     * by manual settings
     *
     * @param {number} parameters.scaleSettings.manual.targetNodeCount The desired
     * number of compute nodes in the Cluster. Default is 0. If autoScaleSettings
     * are not specified, then the Cluster starts with this target.
     *
     * @param {string} [parameters.scaleSettings.manual.nodeDeallocationOption]
     * Determines what to do with the job(s) running on compute node if the Cluster
     * size is decreasing. The default value is requeue. Possible values include:
     * 'requeue', 'terminate', 'waitforjobcompletion', 'unknown'
     *
     * @param {object} [parameters.scaleSettings.autoScale] The scale for the
     * cluster by autoscale settings
     *
     * @param {number} parameters.scaleSettings.autoScale.minimumNodeCount
     * Specifies the minimum number of compute nodes the cluster can have.
     *
     * @param {number} parameters.scaleSettings.autoScale.maximumNodeCount
     * Specifies the maximum number of compute nodes the cluster can have.
     *
     * @param {number} [parameters.scaleSettings.autoScale.initialNodeCount]
     * Specifies the number of compute nodes to allocate on cluster creation. Note
     * that this value is used only during cluster creation.
     *
     * @param {object} [parameters.virtualMachineConfiguration] Settings for OS
     * image and mounted data volumes.
     *
     * @param {object} [parameters.virtualMachineConfiguration.imageReference]
     * Reference to OS image.
     *
     * @param {string}
     * parameters.virtualMachineConfiguration.imageReference.publisher Publisher of
     * the image.
     *
     * @param {string} parameters.virtualMachineConfiguration.imageReference.offer
     * Offer of the image.
     *
     * @param {string} parameters.virtualMachineConfiguration.imageReference.sku
     * SKU of the image.
     *
     * @param {string}
     * [parameters.virtualMachineConfiguration.imageReference.version] Version of
     * the image.
     *
     * @param {string}
     * [parameters.virtualMachineConfiguration.imageReference.virtualMachineImageId]
     * The ARM resource identifier of the virtual machine image. Computes nodes of
     * the cluster will be created using this custom image. This is of the form
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}
     * The virtual machine image must be in the same region and subscription as the
     * cluster. For information about the firewall settings for the Batch node
     * agent to communicate with the Batch service see
     * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
     * Note, you need to provide publisher, offer and sku of the base OS image of
     * which the custom image has been derived from.
     *
     * @param {object} [parameters.nodeSetup] Setup to be done on all compute nodes
     * in the cluster.
     *
     * @param {object} [parameters.nodeSetup.setupTask] Specifies a setup task
     * which can be used to customize the compute nodes of the cluster. The
     * NodeSetup task runs everytime a VM is rebooted. For that reason the task
     * code needs to be idempotent. Generally it is used to either download static
     * data that is required for all jobs that run on the cluster VMs or to
     * download/install software.
     *
     * @param {string} parameters.nodeSetup.setupTask.commandLine Command Line to
     * start Setup process.
     *
     * @param {array} [parameters.nodeSetup.setupTask.environmentVariables]
     * Collection of environment variables to be set for setup task.
     *
     * @param {array} [parameters.nodeSetup.setupTask.secrets] Collection of
     * environment variables with secret values to be set for setup task. Server
     * will never report values of these variables back.
     *
     * @param {boolean} [parameters.nodeSetup.setupTask.runElevated] Specifies
     * whether to run the setup task under root account. The default value is
     * false. Note. Non-elevated tasks are run under an account added into sudoer
     * list and can perform sudo when required.
     *
     * @param {string} parameters.nodeSetup.setupTask.stdOutErrPathPrefix The
     * prefix of a path where the Batch AI service will upload the stdout and
     * stderr of the setup task.
     *
     * @param {object} [parameters.nodeSetup.mountVolumes] Information on shared
     * volumes to be used by jobs. Specified mount volumes will be available to all
     * jobs executing on the cluster. The volumes will be mounted at location
     * specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.azureFileShares] Azure
     * File Share setup configuration. References to Azure File Shares that are to
     * be mounted to the cluster nodes.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.azureBlobFileSystems]
     * Azure Blob FileSystem setup configuration. References to Azure Blob FUSE
     * that are to be mounted to the cluster nodes.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.fileServers] References to
     * a list of file servers that are mounted to the cluster node.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.unmanagedFileSystems]
     * References to a list of file servers that are mounted to the cluster node.
     *
     * @param {object} [parameters.nodeSetup.performanceCountersSettings] Specifies
     * settings for performance counters collecting and uploading.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference
     * Specifies Azure Application Insights information for performance counters
     * reporting. If provided, Batch AI will upload node performance counters to
     * the corresponding Azure Application Insights account.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.component
     * Specifies the Azure Application Insights component resource id.
     *
     * @param {string}
     * [parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKey]
     * Value of the Azure Application Insights instrumentation key.
     *
     * @param {object}
     * [parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference]
     * Specifies a KeyVault Secret containing Azure Application Insights
     * instrumentation key. Specifies KeyVault Store and Secret which contains
     * Azure Application Insights instrumentation key. One of instumentationKey or
     * instrumentationKeySecretReference must be specified.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference.sourceVault
     * Fully qualified resource Id for the Key Vault.
     *
     * @param {string}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference.secretUrl
     * The URL referencing a secret in a Key Vault.
     *
     * @param {object} parameters.userAccountSettings Settings for user account
     * that will be created on all compute nodes of the cluster.
     *
     * @param {string} parameters.userAccountSettings.adminUserName Specifies the
     * name of the administrator account.
     *
     * @param {string} [parameters.userAccountSettings.adminUserSshPublicKey] SSH
     * public keys used to authenticate with linux based VMs. This does not get
     * returned in a GET response body.
     *
     * @param {string} [parameters.userAccountSettings.adminUserPassword] Admin
     * user Password (linux only). This does not get returned in a GET response
     * body.
     *
     * @param {object} [parameters.subnet] Specifies the identifier of the subnet.
     *
     * @param {string} parameters.subnet.id The ID of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Adds a cluster. A cluster is a collection of compute nodes. Multiple jobs
     * can be run on the same cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} parameters The parameters to provide for cluster creation.
     *
     * @param {string} parameters.location The region in which to create the
     * cluster.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the Cluster.
     *
     * @param {string} parameters.vmSize The size of the virtual machines in the
     * cluster. All virtual machines in a cluster are the same size. For
     * information about available VM sizes for clusters using images from the
     * Virtual Machines Marketplace (see Sizes for Virtual Machines (Linux) or
     * Sizes for Virtual Machines (Windows). Batch AI service supports all Azure VM
     * sizes except STANDARD_A0 and those with premium storage (STANDARD_GS,
     * STANDARD_DS, and STANDARD_DSV2 series).
     *
     * @param {string} [parameters.vmPriority] dedicated or lowpriority. Default is
     * dedicated. Possible values include: 'dedicated', 'lowpriority'
     *
     * @param {object} [parameters.scaleSettings] Desired scale for the cluster.
     *
     * @param {object} [parameters.scaleSettings.manual] The scale for the cluster
     * by manual settings
     *
     * @param {number} parameters.scaleSettings.manual.targetNodeCount The desired
     * number of compute nodes in the Cluster. Default is 0. If autoScaleSettings
     * are not specified, then the Cluster starts with this target.
     *
     * @param {string} [parameters.scaleSettings.manual.nodeDeallocationOption]
     * Determines what to do with the job(s) running on compute node if the Cluster
     * size is decreasing. The default value is requeue. Possible values include:
     * 'requeue', 'terminate', 'waitforjobcompletion', 'unknown'
     *
     * @param {object} [parameters.scaleSettings.autoScale] The scale for the
     * cluster by autoscale settings
     *
     * @param {number} parameters.scaleSettings.autoScale.minimumNodeCount
     * Specifies the minimum number of compute nodes the cluster can have.
     *
     * @param {number} parameters.scaleSettings.autoScale.maximumNodeCount
     * Specifies the maximum number of compute nodes the cluster can have.
     *
     * @param {number} [parameters.scaleSettings.autoScale.initialNodeCount]
     * Specifies the number of compute nodes to allocate on cluster creation. Note
     * that this value is used only during cluster creation.
     *
     * @param {object} [parameters.virtualMachineConfiguration] Settings for OS
     * image and mounted data volumes.
     *
     * @param {object} [parameters.virtualMachineConfiguration.imageReference]
     * Reference to OS image.
     *
     * @param {string}
     * parameters.virtualMachineConfiguration.imageReference.publisher Publisher of
     * the image.
     *
     * @param {string} parameters.virtualMachineConfiguration.imageReference.offer
     * Offer of the image.
     *
     * @param {string} parameters.virtualMachineConfiguration.imageReference.sku
     * SKU of the image.
     *
     * @param {string}
     * [parameters.virtualMachineConfiguration.imageReference.version] Version of
     * the image.
     *
     * @param {string}
     * [parameters.virtualMachineConfiguration.imageReference.virtualMachineImageId]
     * The ARM resource identifier of the virtual machine image. Computes nodes of
     * the cluster will be created using this custom image. This is of the form
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}
     * The virtual machine image must be in the same region and subscription as the
     * cluster. For information about the firewall settings for the Batch node
     * agent to communicate with the Batch service see
     * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
     * Note, you need to provide publisher, offer and sku of the base OS image of
     * which the custom image has been derived from.
     *
     * @param {object} [parameters.nodeSetup] Setup to be done on all compute nodes
     * in the cluster.
     *
     * @param {object} [parameters.nodeSetup.setupTask] Specifies a setup task
     * which can be used to customize the compute nodes of the cluster. The
     * NodeSetup task runs everytime a VM is rebooted. For that reason the task
     * code needs to be idempotent. Generally it is used to either download static
     * data that is required for all jobs that run on the cluster VMs or to
     * download/install software.
     *
     * @param {string} parameters.nodeSetup.setupTask.commandLine Command Line to
     * start Setup process.
     *
     * @param {array} [parameters.nodeSetup.setupTask.environmentVariables]
     * Collection of environment variables to be set for setup task.
     *
     * @param {array} [parameters.nodeSetup.setupTask.secrets] Collection of
     * environment variables with secret values to be set for setup task. Server
     * will never report values of these variables back.
     *
     * @param {boolean} [parameters.nodeSetup.setupTask.runElevated] Specifies
     * whether to run the setup task under root account. The default value is
     * false. Note. Non-elevated tasks are run under an account added into sudoer
     * list and can perform sudo when required.
     *
     * @param {string} parameters.nodeSetup.setupTask.stdOutErrPathPrefix The
     * prefix of a path where the Batch AI service will upload the stdout and
     * stderr of the setup task.
     *
     * @param {object} [parameters.nodeSetup.mountVolumes] Information on shared
     * volumes to be used by jobs. Specified mount volumes will be available to all
     * jobs executing on the cluster. The volumes will be mounted at location
     * specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.azureFileShares] Azure
     * File Share setup configuration. References to Azure File Shares that are to
     * be mounted to the cluster nodes.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.azureBlobFileSystems]
     * Azure Blob FileSystem setup configuration. References to Azure Blob FUSE
     * that are to be mounted to the cluster nodes.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.fileServers] References to
     * a list of file servers that are mounted to the cluster node.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.unmanagedFileSystems]
     * References to a list of file servers that are mounted to the cluster node.
     *
     * @param {object} [parameters.nodeSetup.performanceCountersSettings] Specifies
     * settings for performance counters collecting and uploading.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference
     * Specifies Azure Application Insights information for performance counters
     * reporting. If provided, Batch AI will upload node performance counters to
     * the corresponding Azure Application Insights account.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.component
     * Specifies the Azure Application Insights component resource id.
     *
     * @param {string}
     * [parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKey]
     * Value of the Azure Application Insights instrumentation key.
     *
     * @param {object}
     * [parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference]
     * Specifies a KeyVault Secret containing Azure Application Insights
     * instrumentation key. Specifies KeyVault Store and Secret which contains
     * Azure Application Insights instrumentation key. One of instumentationKey or
     * instrumentationKeySecretReference must be specified.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference.sourceVault
     * Fully qualified resource Id for the Key Vault.
     *
     * @param {string}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference.secretUrl
     * The URL referencing a secret in a Key Vault.
     *
     * @param {object} parameters.userAccountSettings Settings for user account
     * that will be created on all compute nodes of the cluster.
     *
     * @param {string} parameters.userAccountSettings.adminUserName Specifies the
     * name of the administrator account.
     *
     * @param {string} [parameters.userAccountSettings.adminUserSshPublicKey] SSH
     * public keys used to authenticate with linux based VMs. This does not get
     * returned in a GET response body.
     *
     * @param {string} [parameters.userAccountSettings.adminUserPassword] Admin
     * user Password (linux only). This does not get returned in a GET response
     * body.
     *
     * @param {object} [parameters.subnet] Specifies the identifier of the subnet.
     *
     * @param {string} parameters.subnet.id The ID of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    create(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParameters, callback: ServiceCallback<models.Cluster>): void;
    create(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Update the properties of a given cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} parameters Additional parameters for cluster update.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the Cluster.
     *
     * @param {object} [parameters.scaleSettings] Desired scale for the cluster
     *
     * @param {object} [parameters.scaleSettings.manual] The scale for the cluster
     * by manual settings
     *
     * @param {number} parameters.scaleSettings.manual.targetNodeCount The desired
     * number of compute nodes in the Cluster. Default is 0. If autoScaleSettings
     * are not specified, then the Cluster starts with this target.
     *
     * @param {string} [parameters.scaleSettings.manual.nodeDeallocationOption]
     * Determines what to do with the job(s) running on compute node if the Cluster
     * size is decreasing. The default value is requeue. Possible values include:
     * 'requeue', 'terminate', 'waitforjobcompletion', 'unknown'
     *
     * @param {object} [parameters.scaleSettings.autoScale] The scale for the
     * cluster by autoscale settings
     *
     * @param {number} parameters.scaleSettings.autoScale.minimumNodeCount
     * Specifies the minimum number of compute nodes the cluster can have.
     *
     * @param {number} parameters.scaleSettings.autoScale.maximumNodeCount
     * Specifies the maximum number of compute nodes the cluster can have.
     *
     * @param {number} [parameters.scaleSettings.autoScale.initialNodeCount]
     * Specifies the number of compute nodes to allocate on cluster creation. Note
     * that this value is used only during cluster creation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Update the properties of a given cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} parameters Additional parameters for cluster update.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the Cluster.
     *
     * @param {object} [parameters.scaleSettings] Desired scale for the cluster
     *
     * @param {object} [parameters.scaleSettings.manual] The scale for the cluster
     * by manual settings
     *
     * @param {number} parameters.scaleSettings.manual.targetNodeCount The desired
     * number of compute nodes in the Cluster. Default is 0. If autoScaleSettings
     * are not specified, then the Cluster starts with this target.
     *
     * @param {string} [parameters.scaleSettings.manual.nodeDeallocationOption]
     * Determines what to do with the job(s) running on compute node if the Cluster
     * size is decreasing. The default value is requeue. Possible values include:
     * 'requeue', 'terminate', 'waitforjobcompletion', 'unknown'
     *
     * @param {object} [parameters.scaleSettings.autoScale] The scale for the
     * cluster by autoscale settings
     *
     * @param {number} parameters.scaleSettings.autoScale.minimumNodeCount
     * Specifies the minimum number of compute nodes the cluster can have.
     *
     * @param {number} parameters.scaleSettings.autoScale.maximumNodeCount
     * Specifies the maximum number of compute nodes the cluster can have.
     *
     * @param {number} [parameters.scaleSettings.autoScale.initialNodeCount]
     * Specifies the number of compute nodes to allocate on cluster creation. Note
     * that this value is used only during cluster creation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    update(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, callback: ServiceCallback<models.Cluster>): void;
    update(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Deletes a Cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a Cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about the specified Cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Gets information about the specified Cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    get(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.Cluster>): void;
    get(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Get the IP address, port of all the compute nodes in the cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemoteLoginInformationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRemoteLoginInformationWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemoteLoginInformationListResult>>;

    /**
     * Get the IP address, port of all the compute nodes in the cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemoteLoginInformationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemoteLoginInformationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemoteLoginInformationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRemoteLoginInformation(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemoteLoginInformationListResult>;
    listRemoteLoginInformation(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.RemoteLoginInformationListResult>): void;
    listRemoteLoginInformation(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemoteLoginInformationListResult>): void;


    /**
     * Gets information about the Clusters associated with the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.clustersListOptions] Additional parameters for the
     * operation
     *
     * @param {string} [options.clustersListOptions.filter] An OData $filter
     * clause.. Used to filter results that are returned in the GET respnose.
     *
     * @param {string} [options.clustersListOptions.select] An OData $select
     * clause. Used to select the properties to be returned in the GET respnose.
     *
     * @param {number} [options.clustersListOptions.maxResults] The maximum number
     * of items to return in the response. A maximum of 1000 files can be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { clustersListOptions? : models.ClustersListOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * Gets information about the Clusters associated with the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.clustersListOptions] Additional parameters for the
     * operation
     *
     * @param {string} [options.clustersListOptions.filter] An OData $filter
     * clause.. Used to filter results that are returned in the GET respnose.
     *
     * @param {string} [options.clustersListOptions.select] An OData $select
     * clause. Used to select the properties to be returned in the GET respnose.
     *
     * @param {number} [options.clustersListOptions.maxResults] The maximum number
     * of items to return in the response. A maximum of 1000 files can be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { clustersListOptions? : models.ClustersListOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    list(callback: ServiceCallback<models.ClusterListResult>): void;
    list(options: { clustersListOptions? : models.ClustersListOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * Gets information about the Clusters associated within the specified resource
     * group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.clustersListByResourceGroupOptions] Additional
     * parameters for the operation
     *
     * @param {string} [options.clustersListByResourceGroupOptions.filter] An OData
     * $filter clause.. Used to filter results that are returned in the GET
     * respnose.
     *
     * @param {string} [options.clustersListByResourceGroupOptions.select] An OData
     * $select clause. Used to select the properties to be returned in the GET
     * respnose.
     *
     * @param {number} [options.clustersListByResourceGroupOptions.maxResults] The
     * maximum number of items to return in the response. A maximum of 1000 files
     * can be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { clustersListByResourceGroupOptions? : models.ClustersListByResourceGroupOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * Gets information about the Clusters associated within the specified resource
     * group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.clustersListByResourceGroupOptions] Additional
     * parameters for the operation
     *
     * @param {string} [options.clustersListByResourceGroupOptions.filter] An OData
     * $filter clause.. Used to filter results that are returned in the GET
     * respnose.
     *
     * @param {string} [options.clustersListByResourceGroupOptions.select] An OData
     * $select clause. Used to select the properties to be returned in the GET
     * respnose.
     *
     * @param {number} [options.clustersListByResourceGroupOptions.maxResults] The
     * maximum number of items to return in the response. A maximum of 1000 files
     * can be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { clustersListByResourceGroupOptions? : models.ClustersListByResourceGroupOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { clustersListByResourceGroupOptions? : models.ClustersListByResourceGroupOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * Adds a cluster. A cluster is a collection of compute nodes. Multiple jobs
     * can be run on the same cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} parameters The parameters to provide for cluster creation.
     *
     * @param {string} parameters.location The region in which to create the
     * cluster.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the Cluster.
     *
     * @param {string} parameters.vmSize The size of the virtual machines in the
     * cluster. All virtual machines in a cluster are the same size. For
     * information about available VM sizes for clusters using images from the
     * Virtual Machines Marketplace (see Sizes for Virtual Machines (Linux) or
     * Sizes for Virtual Machines (Windows). Batch AI service supports all Azure VM
     * sizes except STANDARD_A0 and those with premium storage (STANDARD_GS,
     * STANDARD_DS, and STANDARD_DSV2 series).
     *
     * @param {string} [parameters.vmPriority] dedicated or lowpriority. Default is
     * dedicated. Possible values include: 'dedicated', 'lowpriority'
     *
     * @param {object} [parameters.scaleSettings] Desired scale for the cluster.
     *
     * @param {object} [parameters.scaleSettings.manual] The scale for the cluster
     * by manual settings
     *
     * @param {number} parameters.scaleSettings.manual.targetNodeCount The desired
     * number of compute nodes in the Cluster. Default is 0. If autoScaleSettings
     * are not specified, then the Cluster starts with this target.
     *
     * @param {string} [parameters.scaleSettings.manual.nodeDeallocationOption]
     * Determines what to do with the job(s) running on compute node if the Cluster
     * size is decreasing. The default value is requeue. Possible values include:
     * 'requeue', 'terminate', 'waitforjobcompletion', 'unknown'
     *
     * @param {object} [parameters.scaleSettings.autoScale] The scale for the
     * cluster by autoscale settings
     *
     * @param {number} parameters.scaleSettings.autoScale.minimumNodeCount
     * Specifies the minimum number of compute nodes the cluster can have.
     *
     * @param {number} parameters.scaleSettings.autoScale.maximumNodeCount
     * Specifies the maximum number of compute nodes the cluster can have.
     *
     * @param {number} [parameters.scaleSettings.autoScale.initialNodeCount]
     * Specifies the number of compute nodes to allocate on cluster creation. Note
     * that this value is used only during cluster creation.
     *
     * @param {object} [parameters.virtualMachineConfiguration] Settings for OS
     * image and mounted data volumes.
     *
     * @param {object} [parameters.virtualMachineConfiguration.imageReference]
     * Reference to OS image.
     *
     * @param {string}
     * parameters.virtualMachineConfiguration.imageReference.publisher Publisher of
     * the image.
     *
     * @param {string} parameters.virtualMachineConfiguration.imageReference.offer
     * Offer of the image.
     *
     * @param {string} parameters.virtualMachineConfiguration.imageReference.sku
     * SKU of the image.
     *
     * @param {string}
     * [parameters.virtualMachineConfiguration.imageReference.version] Version of
     * the image.
     *
     * @param {string}
     * [parameters.virtualMachineConfiguration.imageReference.virtualMachineImageId]
     * The ARM resource identifier of the virtual machine image. Computes nodes of
     * the cluster will be created using this custom image. This is of the form
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}
     * The virtual machine image must be in the same region and subscription as the
     * cluster. For information about the firewall settings for the Batch node
     * agent to communicate with the Batch service see
     * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
     * Note, you need to provide publisher, offer and sku of the base OS image of
     * which the custom image has been derived from.
     *
     * @param {object} [parameters.nodeSetup] Setup to be done on all compute nodes
     * in the cluster.
     *
     * @param {object} [parameters.nodeSetup.setupTask] Specifies a setup task
     * which can be used to customize the compute nodes of the cluster. The
     * NodeSetup task runs everytime a VM is rebooted. For that reason the task
     * code needs to be idempotent. Generally it is used to either download static
     * data that is required for all jobs that run on the cluster VMs or to
     * download/install software.
     *
     * @param {string} parameters.nodeSetup.setupTask.commandLine Command Line to
     * start Setup process.
     *
     * @param {array} [parameters.nodeSetup.setupTask.environmentVariables]
     * Collection of environment variables to be set for setup task.
     *
     * @param {array} [parameters.nodeSetup.setupTask.secrets] Collection of
     * environment variables with secret values to be set for setup task. Server
     * will never report values of these variables back.
     *
     * @param {boolean} [parameters.nodeSetup.setupTask.runElevated] Specifies
     * whether to run the setup task under root account. The default value is
     * false. Note. Non-elevated tasks are run under an account added into sudoer
     * list and can perform sudo when required.
     *
     * @param {string} parameters.nodeSetup.setupTask.stdOutErrPathPrefix The
     * prefix of a path where the Batch AI service will upload the stdout and
     * stderr of the setup task.
     *
     * @param {object} [parameters.nodeSetup.mountVolumes] Information on shared
     * volumes to be used by jobs. Specified mount volumes will be available to all
     * jobs executing on the cluster. The volumes will be mounted at location
     * specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.azureFileShares] Azure
     * File Share setup configuration. References to Azure File Shares that are to
     * be mounted to the cluster nodes.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.azureBlobFileSystems]
     * Azure Blob FileSystem setup configuration. References to Azure Blob FUSE
     * that are to be mounted to the cluster nodes.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.fileServers] References to
     * a list of file servers that are mounted to the cluster node.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.unmanagedFileSystems]
     * References to a list of file servers that are mounted to the cluster node.
     *
     * @param {object} [parameters.nodeSetup.performanceCountersSettings] Specifies
     * settings for performance counters collecting and uploading.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference
     * Specifies Azure Application Insights information for performance counters
     * reporting. If provided, Batch AI will upload node performance counters to
     * the corresponding Azure Application Insights account.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.component
     * Specifies the Azure Application Insights component resource id.
     *
     * @param {string}
     * [parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKey]
     * Value of the Azure Application Insights instrumentation key.
     *
     * @param {object}
     * [parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference]
     * Specifies a KeyVault Secret containing Azure Application Insights
     * instrumentation key. Specifies KeyVault Store and Secret which contains
     * Azure Application Insights instrumentation key. One of instumentationKey or
     * instrumentationKeySecretReference must be specified.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference.sourceVault
     * Fully qualified resource Id for the Key Vault.
     *
     * @param {string}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference.secretUrl
     * The URL referencing a secret in a Key Vault.
     *
     * @param {object} parameters.userAccountSettings Settings for user account
     * that will be created on all compute nodes of the cluster.
     *
     * @param {string} parameters.userAccountSettings.adminUserName Specifies the
     * name of the administrator account.
     *
     * @param {string} [parameters.userAccountSettings.adminUserSshPublicKey] SSH
     * public keys used to authenticate with linux based VMs. This does not get
     * returned in a GET response body.
     *
     * @param {string} [parameters.userAccountSettings.adminUserPassword] Admin
     * user Password (linux only). This does not get returned in a GET response
     * body.
     *
     * @param {object} [parameters.subnet] Specifies the identifier of the subnet.
     *
     * @param {string} parameters.subnet.id The ID of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Adds a cluster. A cluster is a collection of compute nodes. Multiple jobs
     * can be run on the same cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} parameters The parameters to provide for cluster creation.
     *
     * @param {string} parameters.location The region in which to create the
     * cluster.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the Cluster.
     *
     * @param {string} parameters.vmSize The size of the virtual machines in the
     * cluster. All virtual machines in a cluster are the same size. For
     * information about available VM sizes for clusters using images from the
     * Virtual Machines Marketplace (see Sizes for Virtual Machines (Linux) or
     * Sizes for Virtual Machines (Windows). Batch AI service supports all Azure VM
     * sizes except STANDARD_A0 and those with premium storage (STANDARD_GS,
     * STANDARD_DS, and STANDARD_DSV2 series).
     *
     * @param {string} [parameters.vmPriority] dedicated or lowpriority. Default is
     * dedicated. Possible values include: 'dedicated', 'lowpriority'
     *
     * @param {object} [parameters.scaleSettings] Desired scale for the cluster.
     *
     * @param {object} [parameters.scaleSettings.manual] The scale for the cluster
     * by manual settings
     *
     * @param {number} parameters.scaleSettings.manual.targetNodeCount The desired
     * number of compute nodes in the Cluster. Default is 0. If autoScaleSettings
     * are not specified, then the Cluster starts with this target.
     *
     * @param {string} [parameters.scaleSettings.manual.nodeDeallocationOption]
     * Determines what to do with the job(s) running on compute node if the Cluster
     * size is decreasing. The default value is requeue. Possible values include:
     * 'requeue', 'terminate', 'waitforjobcompletion', 'unknown'
     *
     * @param {object} [parameters.scaleSettings.autoScale] The scale for the
     * cluster by autoscale settings
     *
     * @param {number} parameters.scaleSettings.autoScale.minimumNodeCount
     * Specifies the minimum number of compute nodes the cluster can have.
     *
     * @param {number} parameters.scaleSettings.autoScale.maximumNodeCount
     * Specifies the maximum number of compute nodes the cluster can have.
     *
     * @param {number} [parameters.scaleSettings.autoScale.initialNodeCount]
     * Specifies the number of compute nodes to allocate on cluster creation. Note
     * that this value is used only during cluster creation.
     *
     * @param {object} [parameters.virtualMachineConfiguration] Settings for OS
     * image and mounted data volumes.
     *
     * @param {object} [parameters.virtualMachineConfiguration.imageReference]
     * Reference to OS image.
     *
     * @param {string}
     * parameters.virtualMachineConfiguration.imageReference.publisher Publisher of
     * the image.
     *
     * @param {string} parameters.virtualMachineConfiguration.imageReference.offer
     * Offer of the image.
     *
     * @param {string} parameters.virtualMachineConfiguration.imageReference.sku
     * SKU of the image.
     *
     * @param {string}
     * [parameters.virtualMachineConfiguration.imageReference.version] Version of
     * the image.
     *
     * @param {string}
     * [parameters.virtualMachineConfiguration.imageReference.virtualMachineImageId]
     * The ARM resource identifier of the virtual machine image. Computes nodes of
     * the cluster will be created using this custom image. This is of the form
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}
     * The virtual machine image must be in the same region and subscription as the
     * cluster. For information about the firewall settings for the Batch node
     * agent to communicate with the Batch service see
     * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
     * Note, you need to provide publisher, offer and sku of the base OS image of
     * which the custom image has been derived from.
     *
     * @param {object} [parameters.nodeSetup] Setup to be done on all compute nodes
     * in the cluster.
     *
     * @param {object} [parameters.nodeSetup.setupTask] Specifies a setup task
     * which can be used to customize the compute nodes of the cluster. The
     * NodeSetup task runs everytime a VM is rebooted. For that reason the task
     * code needs to be idempotent. Generally it is used to either download static
     * data that is required for all jobs that run on the cluster VMs or to
     * download/install software.
     *
     * @param {string} parameters.nodeSetup.setupTask.commandLine Command Line to
     * start Setup process.
     *
     * @param {array} [parameters.nodeSetup.setupTask.environmentVariables]
     * Collection of environment variables to be set for setup task.
     *
     * @param {array} [parameters.nodeSetup.setupTask.secrets] Collection of
     * environment variables with secret values to be set for setup task. Server
     * will never report values of these variables back.
     *
     * @param {boolean} [parameters.nodeSetup.setupTask.runElevated] Specifies
     * whether to run the setup task under root account. The default value is
     * false. Note. Non-elevated tasks are run under an account added into sudoer
     * list and can perform sudo when required.
     *
     * @param {string} parameters.nodeSetup.setupTask.stdOutErrPathPrefix The
     * prefix of a path where the Batch AI service will upload the stdout and
     * stderr of the setup task.
     *
     * @param {object} [parameters.nodeSetup.mountVolumes] Information on shared
     * volumes to be used by jobs. Specified mount volumes will be available to all
     * jobs executing on the cluster. The volumes will be mounted at location
     * specified by $AZ_BATCHAI_MOUNT_ROOT environment variable.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.azureFileShares] Azure
     * File Share setup configuration. References to Azure File Shares that are to
     * be mounted to the cluster nodes.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.azureBlobFileSystems]
     * Azure Blob FileSystem setup configuration. References to Azure Blob FUSE
     * that are to be mounted to the cluster nodes.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.fileServers] References to
     * a list of file servers that are mounted to the cluster node.
     *
     * @param {array} [parameters.nodeSetup.mountVolumes.unmanagedFileSystems]
     * References to a list of file servers that are mounted to the cluster node.
     *
     * @param {object} [parameters.nodeSetup.performanceCountersSettings] Specifies
     * settings for performance counters collecting and uploading.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference
     * Specifies Azure Application Insights information for performance counters
     * reporting. If provided, Batch AI will upload node performance counters to
     * the corresponding Azure Application Insights account.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.component
     * Specifies the Azure Application Insights component resource id.
     *
     * @param {string}
     * [parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKey]
     * Value of the Azure Application Insights instrumentation key.
     *
     * @param {object}
     * [parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference]
     * Specifies a KeyVault Secret containing Azure Application Insights
     * instrumentation key. Specifies KeyVault Store and Secret which contains
     * Azure Application Insights instrumentation key. One of instumentationKey or
     * instrumentationKeySecretReference must be specified.
     *
     * @param {object}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference.sourceVault
     * Fully qualified resource Id for the Key Vault.
     *
     * @param {string}
     * parameters.nodeSetup.performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference.secretUrl
     * The URL referencing a secret in a Key Vault.
     *
     * @param {object} parameters.userAccountSettings Settings for user account
     * that will be created on all compute nodes of the cluster.
     *
     * @param {string} parameters.userAccountSettings.adminUserName Specifies the
     * name of the administrator account.
     *
     * @param {string} [parameters.userAccountSettings.adminUserSshPublicKey] SSH
     * public keys used to authenticate with linux based VMs. This does not get
     * returned in a GET response body.
     *
     * @param {string} [parameters.userAccountSettings.adminUserPassword] Admin
     * user Password (linux only). This does not get returned in a GET response
     * body.
     *
     * @param {object} [parameters.subnet] Specifies the identifier of the subnet.
     *
     * @param {string} parameters.subnet.id The ID of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    beginCreate(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParameters, callback: ServiceCallback<models.Cluster>): void;
    beginCreate(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Deletes a Cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a Cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} clusterName The name of the cluster within the specified
     * resource group. Cluster names can only contain a combination of alphanumeric
     * characters along with dash (-) and underscore (_). The name must be from 1
     * through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the IP address, port of all the compute nodes in the cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemoteLoginInformationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRemoteLoginInformationNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemoteLoginInformationListResult>>;

    /**
     * Get the IP address, port of all the compute nodes in the cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemoteLoginInformationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemoteLoginInformationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemoteLoginInformationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRemoteLoginInformationNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemoteLoginInformationListResult>;
    listRemoteLoginInformationNext(nextPageLink: string, callback: ServiceCallback<models.RemoteLoginInformationListResult>): void;
    listRemoteLoginInformationNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemoteLoginInformationListResult>): void;


    /**
     * Gets information about the Clusters associated with the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * Gets information about the Clusters associated with the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * Gets information about the Clusters associated within the specified resource
     * group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * Gets information about the Clusters associated within the specified resource
     * group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;
}

/**
 * @class
 * Jobs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchAIManagementClient.
 */
export interface Jobs {


    /**
     * Adds a Job that gets executed on a cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} parameters The parameters to provide for job creation.
     *
     * @param {string} parameters.location The region in which to create the job.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the job.
     *
     * @param {string} [parameters.experimentName] Describe the experiment
     * information of the job
     *
     * @param {number} [parameters.priority] Priority associated with the job.
     * Priority associated with the job. Priority values can range from -1000 to
     * 1000, with -1000 being the lowest priority and 1000 being the highest
     * priority. The default value is 0.
     *
     * @param {object} parameters.cluster Specifies the Id of the cluster on which
     * this job will run.
     *
     * @param {object} [parameters.mountVolumes] Information on mount volumes to be
     * used by the job. These volumes will be mounted before the job execution and
     * will be unmouted after the job completion. The volumes will be mounted at
     * location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
     *
     * @param {array} [parameters.mountVolumes.azureFileShares] Azure File Share
     * setup configuration. References to Azure File Shares that are to be mounted
     * to the cluster nodes.
     *
     * @param {array} [parameters.mountVolumes.azureBlobFileSystems] Azure Blob
     * FileSystem setup configuration. References to Azure Blob FUSE that are to be
     * mounted to the cluster nodes.
     *
     * @param {array} [parameters.mountVolumes.fileServers] References to a list of
     * file servers that are mounted to the cluster node.
     *
     * @param {array} [parameters.mountVolumes.unmanagedFileSystems] References to
     * a list of file servers that are mounted to the cluster node.
     *
     * @param {number} parameters.nodeCount Number of compute nodes to run the job
     * on. The job will be gang scheduled on that many compute nodes
     *
     * @param {object} [parameters.containerSettings] If provided the job will run
     * in the specified container. If the container was downloaded as part of
     * cluster setup then the same container image will be used. If not provided,
     * the job will run on the VM.
     *
     * @param {object} parameters.containerSettings.imageSourceRegistry Registry to
     * download the container from.
     *
     * @param {string} [parameters.containerSettings.imageSourceRegistry.serverUrl]
     * URL for image repository.
     *
     * @param {string} parameters.containerSettings.imageSourceRegistry.image The
     * name of the image in image repository.
     *
     * @param {object}
     * [parameters.containerSettings.imageSourceRegistry.credentials] Information
     * to access the private Docker repository.
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.username User
     * name to login.
     *
     * @param {string}
     * [parameters.containerSettings.imageSourceRegistry.credentials.password]
     * Password to login. One of password or passwordSecretReference must be
     * specified.
     *
     * @param {object}
     * [parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference]
     * Specifies the location of the password, which is a Key Vault Secret. Users
     * can store their secrets in Azure KeyVault and pass it to the Batch AI
     * Service to integrate with KeyVault. One of password or
     * passwordSecretReference must be specified.
     *
     * @param {object}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault
     * Fully qualified resource Id for the Key Vault.
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault.id
     * The ID of the resource
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.secretUrl
     * The URL referencing a secret in a Key Vault.
     *
     * @param {object} [parameters.cntkSettings] Specifies the settings for CNTK
     * (aka Microsoft Cognitive Toolkit) job.
     *
     * @param {string} [parameters.cntkSettings.languageType] Specifies the
     * language type to use for launching CNTK (aka Microsoft Cognitive Toolkit)
     * job. Valid values are 'BrainScript' or 'Python'.
     *
     * @param {string} [parameters.cntkSettings.configFilePath] Specifies the path
     * of the config file. This property can be specified only if the languageType
     * is 'BrainScript'.
     *
     * @param {string} [parameters.cntkSettings.pythonScriptFilePath] The path and
     * file name of the python script to execute the job. This property can be
     * specified only if the languageType is 'Python'.
     *
     * @param {string} [parameters.cntkSettings.pythonInterpreterPath] The path to
     * python interpreter. This property can be specified only if the languageType
     * is 'Python'.
     *
     * @param {string} [parameters.cntkSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script or CNTK.exe.
     *
     * @param {number} [parameters.cntkSettings.processCount] Number of processes
     * parameter that is passed to MPI runtime. The default value for this property
     * is equal to nodeCount property
     *
     * @param {object} [parameters.pyTorchSettings] Specifies the settings for
     * pyTorch job.
     *
     * @param {string} parameters.pyTorchSettings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.pyTorchSettings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.pyTorchSettings.commandLineArgs] Specifies the
     * command line arguments for the master task.
     *
     * @param {number} [parameters.pyTorchSettings.processCount] Number of
     * processes to launch for the job execution. The default value for this
     * property is equal to nodeCount property.
     *
     * @param {string} [parameters.pyTorchSettings.communicationBackend] Type of
     * the communication backend for distributed jobs. Valid values are 'TCP',
     * 'Gloo' or 'MPI'. Not required for non-distributed jobs.
     *
     * @param {object} [parameters.tensorFlowSettings] Specifies the settings for
     * Tensor Flow job.
     *
     * @param {string} parameters.tensorFlowSettings.pythonScriptFilePath The path
     * and file name of the python script to execute the job.
     *
     * @param {string} [parameters.tensorFlowSettings.pythonInterpreterPath] The
     * path to python interpreter.
     *
     * @param {string} [parameters.tensorFlowSettings.masterCommandLineArgs]
     * Specifies the command line arguments for the master task.
     *
     * @param {string} [parameters.tensorFlowSettings.workerCommandLineArgs]
     * Specifies the command line arguments for the worker task. This property is
     * optional for single machine training.
     *
     * @param {string}
     * [parameters.tensorFlowSettings.parameterServerCommandLineArgs] Specifies the
     * command line arguments for the parameter server task. This property is
     * optional for single machine training.
     *
     * @param {number} [parameters.tensorFlowSettings.workerCount] The number of
     * worker tasks. If specified, the value must be less than or equal to
     * (nodeCount * numberOfGPUs per VM). If not specified, the default value is
     * equal to nodeCount. This property can be specified only for distributed
     * TensorFlow training
     *
     * @param {number} [parameters.tensorFlowSettings.parameterServerCount] The
     * number of parmeter server tasks. If specified, the value must be less than
     * or equal to nodeCount. If not specified, the default value is equal to 1 for
     * distributed TensorFlow training (This property is not applicable for single
     * machine training). This property can be specified only for distributed
     * TensorFlow training.
     *
     * @param {object} [parameters.caffeSettings] Specifies the settings for Caffe
     * job.
     *
     * @param {string} [parameters.caffeSettings.configFilePath] Specifies the path
     * of the config file. This property cannot be specified if
     * pythonScriptFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.pythonScriptFilePath] The path and
     * file name of the python script to execute the job. This property cannot be
     * specified if configFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.pythonInterpreterPath] The path to
     * python interpreter. This property can be specified only if the
     * pythonScriptFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the Caffe job.
     *
     * @param {number} [parameters.caffeSettings.processCount] Number of processes
     * parameter that is passed to MPI runtime. The default value for this property
     * is equal to nodeCount property
     *
     * @param {object} [parameters.caffe2Settings] Specifies the settings for
     * Caffe2 job.
     *
     * @param {string} parameters.caffe2Settings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.caffe2Settings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.caffe2Settings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script
     *
     * @param {object} [parameters.chainerSettings] Specifies the settings for
     * Chainer job.
     *
     * @param {string} parameters.chainerSettings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.chainerSettings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.chainerSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script
     *
     * @param {number} [parameters.chainerSettings.processCount] Number of
     * processes parameter that is passed to MPI runtime. The default value for
     * this property is equal to nodeCount property
     *
     * @param {object} [parameters.customToolkitSettings] Specifies the settings
     * for custom tool kit job.
     *
     * @param {string} [parameters.customToolkitSettings.commandLine] The command
     * line to execute the custom toolkit Job.
     *
     * @param {object} [parameters.jobPreparation] Specifies the command line to be
     * executed before tool kit is launched. The specified actions will run on all
     * the nodes that are part of the job
     *
     * @param {string} parameters.jobPreparation.commandLine The command line to
     * execute. If containerSettings is specified on the job, this commandLine will
     * be executed in the same container as job. Otherwise it will be executed on
     * the node.
     *
     * @param {string} parameters.stdOutErrPathPrefix The path where the Batch AI
     * service will upload stdout and stderror of the job.
     *
     * @param {array} [parameters.inputDirectories] Specifies the list of input
     * directories for the Job.
     *
     * @param {array} [parameters.outputDirectories] Specifies the list of output
     * directories.
     *
     * @param {array} [parameters.environmentVariables] Additional environment
     * variables to set on the job. Batch AI will setup these additional
     * environment variables for the job.
     *
     * @param {array} [parameters.secrets] Additional environment variables with
     * secret values to set on the job. Batch AI will setup these additional
     * environment variables for the job. Server will never report values of these
     * variables back.
     *
     * @param {object} [parameters.constraints] Constraints associated with the
     * Job.
     *
     * @param {moment.duration} [parameters.constraints.maxWallClockTime] Max time
     * the job can run. Default Value = 1 week.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, jobName: string, parameters: models.JobCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * Adds a Job that gets executed on a cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} parameters The parameters to provide for job creation.
     *
     * @param {string} parameters.location The region in which to create the job.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the job.
     *
     * @param {string} [parameters.experimentName] Describe the experiment
     * information of the job
     *
     * @param {number} [parameters.priority] Priority associated with the job.
     * Priority associated with the job. Priority values can range from -1000 to
     * 1000, with -1000 being the lowest priority and 1000 being the highest
     * priority. The default value is 0.
     *
     * @param {object} parameters.cluster Specifies the Id of the cluster on which
     * this job will run.
     *
     * @param {object} [parameters.mountVolumes] Information on mount volumes to be
     * used by the job. These volumes will be mounted before the job execution and
     * will be unmouted after the job completion. The volumes will be mounted at
     * location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
     *
     * @param {array} [parameters.mountVolumes.azureFileShares] Azure File Share
     * setup configuration. References to Azure File Shares that are to be mounted
     * to the cluster nodes.
     *
     * @param {array} [parameters.mountVolumes.azureBlobFileSystems] Azure Blob
     * FileSystem setup configuration. References to Azure Blob FUSE that are to be
     * mounted to the cluster nodes.
     *
     * @param {array} [parameters.mountVolumes.fileServers] References to a list of
     * file servers that are mounted to the cluster node.
     *
     * @param {array} [parameters.mountVolumes.unmanagedFileSystems] References to
     * a list of file servers that are mounted to the cluster node.
     *
     * @param {number} parameters.nodeCount Number of compute nodes to run the job
     * on. The job will be gang scheduled on that many compute nodes
     *
     * @param {object} [parameters.containerSettings] If provided the job will run
     * in the specified container. If the container was downloaded as part of
     * cluster setup then the same container image will be used. If not provided,
     * the job will run on the VM.
     *
     * @param {object} parameters.containerSettings.imageSourceRegistry Registry to
     * download the container from.
     *
     * @param {string} [parameters.containerSettings.imageSourceRegistry.serverUrl]
     * URL for image repository.
     *
     * @param {string} parameters.containerSettings.imageSourceRegistry.image The
     * name of the image in image repository.
     *
     * @param {object}
     * [parameters.containerSettings.imageSourceRegistry.credentials] Information
     * to access the private Docker repository.
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.username User
     * name to login.
     *
     * @param {string}
     * [parameters.containerSettings.imageSourceRegistry.credentials.password]
     * Password to login. One of password or passwordSecretReference must be
     * specified.
     *
     * @param {object}
     * [parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference]
     * Specifies the location of the password, which is a Key Vault Secret. Users
     * can store their secrets in Azure KeyVault and pass it to the Batch AI
     * Service to integrate with KeyVault. One of password or
     * passwordSecretReference must be specified.
     *
     * @param {object}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault
     * Fully qualified resource Id for the Key Vault.
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault.id
     * The ID of the resource
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.secretUrl
     * The URL referencing a secret in a Key Vault.
     *
     * @param {object} [parameters.cntkSettings] Specifies the settings for CNTK
     * (aka Microsoft Cognitive Toolkit) job.
     *
     * @param {string} [parameters.cntkSettings.languageType] Specifies the
     * language type to use for launching CNTK (aka Microsoft Cognitive Toolkit)
     * job. Valid values are 'BrainScript' or 'Python'.
     *
     * @param {string} [parameters.cntkSettings.configFilePath] Specifies the path
     * of the config file. This property can be specified only if the languageType
     * is 'BrainScript'.
     *
     * @param {string} [parameters.cntkSettings.pythonScriptFilePath] The path and
     * file name of the python script to execute the job. This property can be
     * specified only if the languageType is 'Python'.
     *
     * @param {string} [parameters.cntkSettings.pythonInterpreterPath] The path to
     * python interpreter. This property can be specified only if the languageType
     * is 'Python'.
     *
     * @param {string} [parameters.cntkSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script or CNTK.exe.
     *
     * @param {number} [parameters.cntkSettings.processCount] Number of processes
     * parameter that is passed to MPI runtime. The default value for this property
     * is equal to nodeCount property
     *
     * @param {object} [parameters.pyTorchSettings] Specifies the settings for
     * pyTorch job.
     *
     * @param {string} parameters.pyTorchSettings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.pyTorchSettings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.pyTorchSettings.commandLineArgs] Specifies the
     * command line arguments for the master task.
     *
     * @param {number} [parameters.pyTorchSettings.processCount] Number of
     * processes to launch for the job execution. The default value for this
     * property is equal to nodeCount property.
     *
     * @param {string} [parameters.pyTorchSettings.communicationBackend] Type of
     * the communication backend for distributed jobs. Valid values are 'TCP',
     * 'Gloo' or 'MPI'. Not required for non-distributed jobs.
     *
     * @param {object} [parameters.tensorFlowSettings] Specifies the settings for
     * Tensor Flow job.
     *
     * @param {string} parameters.tensorFlowSettings.pythonScriptFilePath The path
     * and file name of the python script to execute the job.
     *
     * @param {string} [parameters.tensorFlowSettings.pythonInterpreterPath] The
     * path to python interpreter.
     *
     * @param {string} [parameters.tensorFlowSettings.masterCommandLineArgs]
     * Specifies the command line arguments for the master task.
     *
     * @param {string} [parameters.tensorFlowSettings.workerCommandLineArgs]
     * Specifies the command line arguments for the worker task. This property is
     * optional for single machine training.
     *
     * @param {string}
     * [parameters.tensorFlowSettings.parameterServerCommandLineArgs] Specifies the
     * command line arguments for the parameter server task. This property is
     * optional for single machine training.
     *
     * @param {number} [parameters.tensorFlowSettings.workerCount] The number of
     * worker tasks. If specified, the value must be less than or equal to
     * (nodeCount * numberOfGPUs per VM). If not specified, the default value is
     * equal to nodeCount. This property can be specified only for distributed
     * TensorFlow training
     *
     * @param {number} [parameters.tensorFlowSettings.parameterServerCount] The
     * number of parmeter server tasks. If specified, the value must be less than
     * or equal to nodeCount. If not specified, the default value is equal to 1 for
     * distributed TensorFlow training (This property is not applicable for single
     * machine training). This property can be specified only for distributed
     * TensorFlow training.
     *
     * @param {object} [parameters.caffeSettings] Specifies the settings for Caffe
     * job.
     *
     * @param {string} [parameters.caffeSettings.configFilePath] Specifies the path
     * of the config file. This property cannot be specified if
     * pythonScriptFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.pythonScriptFilePath] The path and
     * file name of the python script to execute the job. This property cannot be
     * specified if configFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.pythonInterpreterPath] The path to
     * python interpreter. This property can be specified only if the
     * pythonScriptFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the Caffe job.
     *
     * @param {number} [parameters.caffeSettings.processCount] Number of processes
     * parameter that is passed to MPI runtime. The default value for this property
     * is equal to nodeCount property
     *
     * @param {object} [parameters.caffe2Settings] Specifies the settings for
     * Caffe2 job.
     *
     * @param {string} parameters.caffe2Settings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.caffe2Settings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.caffe2Settings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script
     *
     * @param {object} [parameters.chainerSettings] Specifies the settings for
     * Chainer job.
     *
     * @param {string} parameters.chainerSettings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.chainerSettings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.chainerSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script
     *
     * @param {number} [parameters.chainerSettings.processCount] Number of
     * processes parameter that is passed to MPI runtime. The default value for
     * this property is equal to nodeCount property
     *
     * @param {object} [parameters.customToolkitSettings] Specifies the settings
     * for custom tool kit job.
     *
     * @param {string} [parameters.customToolkitSettings.commandLine] The command
     * line to execute the custom toolkit Job.
     *
     * @param {object} [parameters.jobPreparation] Specifies the command line to be
     * executed before tool kit is launched. The specified actions will run on all
     * the nodes that are part of the job
     *
     * @param {string} parameters.jobPreparation.commandLine The command line to
     * execute. If containerSettings is specified on the job, this commandLine will
     * be executed in the same container as job. Otherwise it will be executed on
     * the node.
     *
     * @param {string} parameters.stdOutErrPathPrefix The path where the Batch AI
     * service will upload stdout and stderror of the job.
     *
     * @param {array} [parameters.inputDirectories] Specifies the list of input
     * directories for the Job.
     *
     * @param {array} [parameters.outputDirectories] Specifies the list of output
     * directories.
     *
     * @param {array} [parameters.environmentVariables] Additional environment
     * variables to set on the job. Batch AI will setup these additional
     * environment variables for the job.
     *
     * @param {array} [parameters.secrets] Additional environment variables with
     * secret values to set on the job. Batch AI will setup these additional
     * environment variables for the job. Server will never report values of these
     * variables back.
     *
     * @param {object} [parameters.constraints] Constraints associated with the
     * Job.
     *
     * @param {moment.duration} [parameters.constraints.maxWallClockTime] Max time
     * the job can run. Default Value = 1 week.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, jobName: string, parameters: models.JobCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    create(resourceGroupName: string, jobName: string, parameters: models.JobCreateParameters, callback: ServiceCallback<models.Job>): void;
    create(resourceGroupName: string, jobName: string, parameters: models.JobCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * Deletes the specified Batch AI job.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified Batch AI job.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, jobName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about the specified Batch AI job.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * Gets information about the specified Batch AI job.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    get(resourceGroupName: string, jobName: string, callback: ServiceCallback<models.Job>): void;
    get(resourceGroupName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * Gets the IP address and port information of all the compute nodes which are
     * used for job execution.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemoteLoginInformationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRemoteLoginInformationWithHttpOperationResponse(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemoteLoginInformationListResult>>;

    /**
     * Gets the IP address and port information of all the compute nodes which are
     * used for job execution.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemoteLoginInformationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemoteLoginInformationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemoteLoginInformationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRemoteLoginInformation(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemoteLoginInformationListResult>;
    listRemoteLoginInformation(resourceGroupName: string, jobName: string, callback: ServiceCallback<models.RemoteLoginInformationListResult>): void;
    listRemoteLoginInformation(resourceGroupName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemoteLoginInformationListResult>): void;


    /**
     * Terminates a job.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    terminateWithHttpOperationResponse(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Terminates a job.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    terminate(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    terminate(resourceGroupName: string, jobName: string, callback: ServiceCallback<void>): void;
    terminate(resourceGroupName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about the jobs associated with the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.jobsListOptions] Additional parameters for the
     * operation
     *
     * @param {string} [options.jobsListOptions.filter] An OData $filter clause..
     * Used to filter results that are returned in the GET respnose.
     *
     * @param {string} [options.jobsListOptions.select] An OData $select clause.
     * Used to select the properties to be returned in the GET respnose.
     *
     * @param {number} [options.jobsListOptions.maxResults] The maximum number of
     * items to return in the response. A maximum of 1000 files can be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { jobsListOptions? : models.JobsListOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobListResult>>;

    /**
     * Gets information about the jobs associated with the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.jobsListOptions] Additional parameters for the
     * operation
     *
     * @param {string} [options.jobsListOptions.filter] An OData $filter clause..
     * Used to filter results that are returned in the GET respnose.
     *
     * @param {string} [options.jobsListOptions.select] An OData $select clause.
     * Used to select the properties to be returned in the GET respnose.
     *
     * @param {number} [options.jobsListOptions.maxResults] The maximum number of
     * items to return in the response. A maximum of 1000 files can be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { jobsListOptions? : models.JobsListOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobListResult>;
    list(callback: ServiceCallback<models.JobListResult>): void;
    list(options: { jobsListOptions? : models.JobsListOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobListResult>): void;


    /**
     * Gets information about the Batch AI jobs associated within the specified
     * resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.jobsListByResourceGroupOptions] Additional
     * parameters for the operation
     *
     * @param {string} [options.jobsListByResourceGroupOptions.filter] An OData
     * $filter clause.. Used to filter results that are returned in the GET
     * respnose.
     *
     * @param {string} [options.jobsListByResourceGroupOptions.select] An OData
     * $select clause. Used to select the properties to be returned in the GET
     * respnose.
     *
     * @param {number} [options.jobsListByResourceGroupOptions.maxResults] The
     * maximum number of items to return in the response. A maximum of 1000 files
     * can be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { jobsListByResourceGroupOptions? : models.JobsListByResourceGroupOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobListResult>>;

    /**
     * Gets information about the Batch AI jobs associated within the specified
     * resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.jobsListByResourceGroupOptions] Additional
     * parameters for the operation
     *
     * @param {string} [options.jobsListByResourceGroupOptions.filter] An OData
     * $filter clause.. Used to filter results that are returned in the GET
     * respnose.
     *
     * @param {string} [options.jobsListByResourceGroupOptions.select] An OData
     * $select clause. Used to select the properties to be returned in the GET
     * respnose.
     *
     * @param {number} [options.jobsListByResourceGroupOptions.maxResults] The
     * maximum number of items to return in the response. A maximum of 1000 files
     * can be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { jobsListByResourceGroupOptions? : models.JobsListByResourceGroupOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.JobListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { jobsListByResourceGroupOptions? : models.JobsListByResourceGroupOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobListResult>): void;


    /**
     * List all directories and files inside the given directory of the output
     * directory (Only if the output directory is on Azure File Share or Azure
     * Storage container).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} jobsListOutputFilesOptions Additional parameters for the
     * operation
     *
     * @param {string} jobsListOutputFilesOptions.outputdirectoryid Id of the job
     * output directory. This is the OutputDirectory-->id parameter that is given
     * by the user during Create Job.
     *
     * @param {string} [jobsListOutputFilesOptions.directory] The path to the
     * directory.
     *
     * @param {number} [jobsListOutputFilesOptions.linkexpiryinminutes] The number
     * of minutes after which the download link will expire.
     *
     * @param {number} [jobsListOutputFilesOptions.maxResults] The maximum number
     * of items to return in the response. A maximum of 1000 files can be returned.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOutputFilesWithHttpOperationResponse(resourceGroupName: string, jobName: string, jobsListOutputFilesOptions: models.JobsListOutputFilesOptions, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileListResult>>;

    /**
     * List all directories and files inside the given directory of the output
     * directory (Only if the output directory is on Azure File Share or Azure
     * Storage container).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} jobsListOutputFilesOptions Additional parameters for the
     * operation
     *
     * @param {string} jobsListOutputFilesOptions.outputdirectoryid Id of the job
     * output directory. This is the OutputDirectory-->id parameter that is given
     * by the user during Create Job.
     *
     * @param {string} [jobsListOutputFilesOptions.directory] The path to the
     * directory.
     *
     * @param {number} [jobsListOutputFilesOptions.linkexpiryinminutes] The number
     * of minutes after which the download link will expire.
     *
     * @param {number} [jobsListOutputFilesOptions.maxResults] The maximum number
     * of items to return in the response. A maximum of 1000 files can be returned.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOutputFiles(resourceGroupName: string, jobName: string, jobsListOutputFilesOptions: models.JobsListOutputFilesOptions, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileListResult>;
    listOutputFiles(resourceGroupName: string, jobName: string, jobsListOutputFilesOptions: models.JobsListOutputFilesOptions, callback: ServiceCallback<models.FileListResult>): void;
    listOutputFiles(resourceGroupName: string, jobName: string, jobsListOutputFilesOptions: models.JobsListOutputFilesOptions, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileListResult>): void;


    /**
     * Adds a Job that gets executed on a cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} parameters The parameters to provide for job creation.
     *
     * @param {string} parameters.location The region in which to create the job.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the job.
     *
     * @param {string} [parameters.experimentName] Describe the experiment
     * information of the job
     *
     * @param {number} [parameters.priority] Priority associated with the job.
     * Priority associated with the job. Priority values can range from -1000 to
     * 1000, with -1000 being the lowest priority and 1000 being the highest
     * priority. The default value is 0.
     *
     * @param {object} parameters.cluster Specifies the Id of the cluster on which
     * this job will run.
     *
     * @param {object} [parameters.mountVolumes] Information on mount volumes to be
     * used by the job. These volumes will be mounted before the job execution and
     * will be unmouted after the job completion. The volumes will be mounted at
     * location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
     *
     * @param {array} [parameters.mountVolumes.azureFileShares] Azure File Share
     * setup configuration. References to Azure File Shares that are to be mounted
     * to the cluster nodes.
     *
     * @param {array} [parameters.mountVolumes.azureBlobFileSystems] Azure Blob
     * FileSystem setup configuration. References to Azure Blob FUSE that are to be
     * mounted to the cluster nodes.
     *
     * @param {array} [parameters.mountVolumes.fileServers] References to a list of
     * file servers that are mounted to the cluster node.
     *
     * @param {array} [parameters.mountVolumes.unmanagedFileSystems] References to
     * a list of file servers that are mounted to the cluster node.
     *
     * @param {number} parameters.nodeCount Number of compute nodes to run the job
     * on. The job will be gang scheduled on that many compute nodes
     *
     * @param {object} [parameters.containerSettings] If provided the job will run
     * in the specified container. If the container was downloaded as part of
     * cluster setup then the same container image will be used. If not provided,
     * the job will run on the VM.
     *
     * @param {object} parameters.containerSettings.imageSourceRegistry Registry to
     * download the container from.
     *
     * @param {string} [parameters.containerSettings.imageSourceRegistry.serverUrl]
     * URL for image repository.
     *
     * @param {string} parameters.containerSettings.imageSourceRegistry.image The
     * name of the image in image repository.
     *
     * @param {object}
     * [parameters.containerSettings.imageSourceRegistry.credentials] Information
     * to access the private Docker repository.
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.username User
     * name to login.
     *
     * @param {string}
     * [parameters.containerSettings.imageSourceRegistry.credentials.password]
     * Password to login. One of password or passwordSecretReference must be
     * specified.
     *
     * @param {object}
     * [parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference]
     * Specifies the location of the password, which is a Key Vault Secret. Users
     * can store their secrets in Azure KeyVault and pass it to the Batch AI
     * Service to integrate with KeyVault. One of password or
     * passwordSecretReference must be specified.
     *
     * @param {object}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault
     * Fully qualified resource Id for the Key Vault.
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault.id
     * The ID of the resource
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.secretUrl
     * The URL referencing a secret in a Key Vault.
     *
     * @param {object} [parameters.cntkSettings] Specifies the settings for CNTK
     * (aka Microsoft Cognitive Toolkit) job.
     *
     * @param {string} [parameters.cntkSettings.languageType] Specifies the
     * language type to use for launching CNTK (aka Microsoft Cognitive Toolkit)
     * job. Valid values are 'BrainScript' or 'Python'.
     *
     * @param {string} [parameters.cntkSettings.configFilePath] Specifies the path
     * of the config file. This property can be specified only if the languageType
     * is 'BrainScript'.
     *
     * @param {string} [parameters.cntkSettings.pythonScriptFilePath] The path and
     * file name of the python script to execute the job. This property can be
     * specified only if the languageType is 'Python'.
     *
     * @param {string} [parameters.cntkSettings.pythonInterpreterPath] The path to
     * python interpreter. This property can be specified only if the languageType
     * is 'Python'.
     *
     * @param {string} [parameters.cntkSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script or CNTK.exe.
     *
     * @param {number} [parameters.cntkSettings.processCount] Number of processes
     * parameter that is passed to MPI runtime. The default value for this property
     * is equal to nodeCount property
     *
     * @param {object} [parameters.pyTorchSettings] Specifies the settings for
     * pyTorch job.
     *
     * @param {string} parameters.pyTorchSettings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.pyTorchSettings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.pyTorchSettings.commandLineArgs] Specifies the
     * command line arguments for the master task.
     *
     * @param {number} [parameters.pyTorchSettings.processCount] Number of
     * processes to launch for the job execution. The default value for this
     * property is equal to nodeCount property.
     *
     * @param {string} [parameters.pyTorchSettings.communicationBackend] Type of
     * the communication backend for distributed jobs. Valid values are 'TCP',
     * 'Gloo' or 'MPI'. Not required for non-distributed jobs.
     *
     * @param {object} [parameters.tensorFlowSettings] Specifies the settings for
     * Tensor Flow job.
     *
     * @param {string} parameters.tensorFlowSettings.pythonScriptFilePath The path
     * and file name of the python script to execute the job.
     *
     * @param {string} [parameters.tensorFlowSettings.pythonInterpreterPath] The
     * path to python interpreter.
     *
     * @param {string} [parameters.tensorFlowSettings.masterCommandLineArgs]
     * Specifies the command line arguments for the master task.
     *
     * @param {string} [parameters.tensorFlowSettings.workerCommandLineArgs]
     * Specifies the command line arguments for the worker task. This property is
     * optional for single machine training.
     *
     * @param {string}
     * [parameters.tensorFlowSettings.parameterServerCommandLineArgs] Specifies the
     * command line arguments for the parameter server task. This property is
     * optional for single machine training.
     *
     * @param {number} [parameters.tensorFlowSettings.workerCount] The number of
     * worker tasks. If specified, the value must be less than or equal to
     * (nodeCount * numberOfGPUs per VM). If not specified, the default value is
     * equal to nodeCount. This property can be specified only for distributed
     * TensorFlow training
     *
     * @param {number} [parameters.tensorFlowSettings.parameterServerCount] The
     * number of parmeter server tasks. If specified, the value must be less than
     * or equal to nodeCount. If not specified, the default value is equal to 1 for
     * distributed TensorFlow training (This property is not applicable for single
     * machine training). This property can be specified only for distributed
     * TensorFlow training.
     *
     * @param {object} [parameters.caffeSettings] Specifies the settings for Caffe
     * job.
     *
     * @param {string} [parameters.caffeSettings.configFilePath] Specifies the path
     * of the config file. This property cannot be specified if
     * pythonScriptFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.pythonScriptFilePath] The path and
     * file name of the python script to execute the job. This property cannot be
     * specified if configFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.pythonInterpreterPath] The path to
     * python interpreter. This property can be specified only if the
     * pythonScriptFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the Caffe job.
     *
     * @param {number} [parameters.caffeSettings.processCount] Number of processes
     * parameter that is passed to MPI runtime. The default value for this property
     * is equal to nodeCount property
     *
     * @param {object} [parameters.caffe2Settings] Specifies the settings for
     * Caffe2 job.
     *
     * @param {string} parameters.caffe2Settings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.caffe2Settings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.caffe2Settings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script
     *
     * @param {object} [parameters.chainerSettings] Specifies the settings for
     * Chainer job.
     *
     * @param {string} parameters.chainerSettings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.chainerSettings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.chainerSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script
     *
     * @param {number} [parameters.chainerSettings.processCount] Number of
     * processes parameter that is passed to MPI runtime. The default value for
     * this property is equal to nodeCount property
     *
     * @param {object} [parameters.customToolkitSettings] Specifies the settings
     * for custom tool kit job.
     *
     * @param {string} [parameters.customToolkitSettings.commandLine] The command
     * line to execute the custom toolkit Job.
     *
     * @param {object} [parameters.jobPreparation] Specifies the command line to be
     * executed before tool kit is launched. The specified actions will run on all
     * the nodes that are part of the job
     *
     * @param {string} parameters.jobPreparation.commandLine The command line to
     * execute. If containerSettings is specified on the job, this commandLine will
     * be executed in the same container as job. Otherwise it will be executed on
     * the node.
     *
     * @param {string} parameters.stdOutErrPathPrefix The path where the Batch AI
     * service will upload stdout and stderror of the job.
     *
     * @param {array} [parameters.inputDirectories] Specifies the list of input
     * directories for the Job.
     *
     * @param {array} [parameters.outputDirectories] Specifies the list of output
     * directories.
     *
     * @param {array} [parameters.environmentVariables] Additional environment
     * variables to set on the job. Batch AI will setup these additional
     * environment variables for the job.
     *
     * @param {array} [parameters.secrets] Additional environment variables with
     * secret values to set on the job. Batch AI will setup these additional
     * environment variables for the job. Server will never report values of these
     * variables back.
     *
     * @param {object} [parameters.constraints] Constraints associated with the
     * Job.
     *
     * @param {moment.duration} [parameters.constraints.maxWallClockTime] Max time
     * the job can run. Default Value = 1 week.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, jobName: string, parameters: models.JobCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * Adds a Job that gets executed on a cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} parameters The parameters to provide for job creation.
     *
     * @param {string} parameters.location The region in which to create the job.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the job.
     *
     * @param {string} [parameters.experimentName] Describe the experiment
     * information of the job
     *
     * @param {number} [parameters.priority] Priority associated with the job.
     * Priority associated with the job. Priority values can range from -1000 to
     * 1000, with -1000 being the lowest priority and 1000 being the highest
     * priority. The default value is 0.
     *
     * @param {object} parameters.cluster Specifies the Id of the cluster on which
     * this job will run.
     *
     * @param {object} [parameters.mountVolumes] Information on mount volumes to be
     * used by the job. These volumes will be mounted before the job execution and
     * will be unmouted after the job completion. The volumes will be mounted at
     * location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
     *
     * @param {array} [parameters.mountVolumes.azureFileShares] Azure File Share
     * setup configuration. References to Azure File Shares that are to be mounted
     * to the cluster nodes.
     *
     * @param {array} [parameters.mountVolumes.azureBlobFileSystems] Azure Blob
     * FileSystem setup configuration. References to Azure Blob FUSE that are to be
     * mounted to the cluster nodes.
     *
     * @param {array} [parameters.mountVolumes.fileServers] References to a list of
     * file servers that are mounted to the cluster node.
     *
     * @param {array} [parameters.mountVolumes.unmanagedFileSystems] References to
     * a list of file servers that are mounted to the cluster node.
     *
     * @param {number} parameters.nodeCount Number of compute nodes to run the job
     * on. The job will be gang scheduled on that many compute nodes
     *
     * @param {object} [parameters.containerSettings] If provided the job will run
     * in the specified container. If the container was downloaded as part of
     * cluster setup then the same container image will be used. If not provided,
     * the job will run on the VM.
     *
     * @param {object} parameters.containerSettings.imageSourceRegistry Registry to
     * download the container from.
     *
     * @param {string} [parameters.containerSettings.imageSourceRegistry.serverUrl]
     * URL for image repository.
     *
     * @param {string} parameters.containerSettings.imageSourceRegistry.image The
     * name of the image in image repository.
     *
     * @param {object}
     * [parameters.containerSettings.imageSourceRegistry.credentials] Information
     * to access the private Docker repository.
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.username User
     * name to login.
     *
     * @param {string}
     * [parameters.containerSettings.imageSourceRegistry.credentials.password]
     * Password to login. One of password or passwordSecretReference must be
     * specified.
     *
     * @param {object}
     * [parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference]
     * Specifies the location of the password, which is a Key Vault Secret. Users
     * can store their secrets in Azure KeyVault and pass it to the Batch AI
     * Service to integrate with KeyVault. One of password or
     * passwordSecretReference must be specified.
     *
     * @param {object}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault
     * Fully qualified resource Id for the Key Vault.
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault.id
     * The ID of the resource
     *
     * @param {string}
     * parameters.containerSettings.imageSourceRegistry.credentials.passwordSecretReference.secretUrl
     * The URL referencing a secret in a Key Vault.
     *
     * @param {object} [parameters.cntkSettings] Specifies the settings for CNTK
     * (aka Microsoft Cognitive Toolkit) job.
     *
     * @param {string} [parameters.cntkSettings.languageType] Specifies the
     * language type to use for launching CNTK (aka Microsoft Cognitive Toolkit)
     * job. Valid values are 'BrainScript' or 'Python'.
     *
     * @param {string} [parameters.cntkSettings.configFilePath] Specifies the path
     * of the config file. This property can be specified only if the languageType
     * is 'BrainScript'.
     *
     * @param {string} [parameters.cntkSettings.pythonScriptFilePath] The path and
     * file name of the python script to execute the job. This property can be
     * specified only if the languageType is 'Python'.
     *
     * @param {string} [parameters.cntkSettings.pythonInterpreterPath] The path to
     * python interpreter. This property can be specified only if the languageType
     * is 'Python'.
     *
     * @param {string} [parameters.cntkSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script or CNTK.exe.
     *
     * @param {number} [parameters.cntkSettings.processCount] Number of processes
     * parameter that is passed to MPI runtime. The default value for this property
     * is equal to nodeCount property
     *
     * @param {object} [parameters.pyTorchSettings] Specifies the settings for
     * pyTorch job.
     *
     * @param {string} parameters.pyTorchSettings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.pyTorchSettings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.pyTorchSettings.commandLineArgs] Specifies the
     * command line arguments for the master task.
     *
     * @param {number} [parameters.pyTorchSettings.processCount] Number of
     * processes to launch for the job execution. The default value for this
     * property is equal to nodeCount property.
     *
     * @param {string} [parameters.pyTorchSettings.communicationBackend] Type of
     * the communication backend for distributed jobs. Valid values are 'TCP',
     * 'Gloo' or 'MPI'. Not required for non-distributed jobs.
     *
     * @param {object} [parameters.tensorFlowSettings] Specifies the settings for
     * Tensor Flow job.
     *
     * @param {string} parameters.tensorFlowSettings.pythonScriptFilePath The path
     * and file name of the python script to execute the job.
     *
     * @param {string} [parameters.tensorFlowSettings.pythonInterpreterPath] The
     * path to python interpreter.
     *
     * @param {string} [parameters.tensorFlowSettings.masterCommandLineArgs]
     * Specifies the command line arguments for the master task.
     *
     * @param {string} [parameters.tensorFlowSettings.workerCommandLineArgs]
     * Specifies the command line arguments for the worker task. This property is
     * optional for single machine training.
     *
     * @param {string}
     * [parameters.tensorFlowSettings.parameterServerCommandLineArgs] Specifies the
     * command line arguments for the parameter server task. This property is
     * optional for single machine training.
     *
     * @param {number} [parameters.tensorFlowSettings.workerCount] The number of
     * worker tasks. If specified, the value must be less than or equal to
     * (nodeCount * numberOfGPUs per VM). If not specified, the default value is
     * equal to nodeCount. This property can be specified only for distributed
     * TensorFlow training
     *
     * @param {number} [parameters.tensorFlowSettings.parameterServerCount] The
     * number of parmeter server tasks. If specified, the value must be less than
     * or equal to nodeCount. If not specified, the default value is equal to 1 for
     * distributed TensorFlow training (This property is not applicable for single
     * machine training). This property can be specified only for distributed
     * TensorFlow training.
     *
     * @param {object} [parameters.caffeSettings] Specifies the settings for Caffe
     * job.
     *
     * @param {string} [parameters.caffeSettings.configFilePath] Specifies the path
     * of the config file. This property cannot be specified if
     * pythonScriptFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.pythonScriptFilePath] The path and
     * file name of the python script to execute the job. This property cannot be
     * specified if configFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.pythonInterpreterPath] The path to
     * python interpreter. This property can be specified only if the
     * pythonScriptFilePath is specified.
     *
     * @param {string} [parameters.caffeSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the Caffe job.
     *
     * @param {number} [parameters.caffeSettings.processCount] Number of processes
     * parameter that is passed to MPI runtime. The default value for this property
     * is equal to nodeCount property
     *
     * @param {object} [parameters.caffe2Settings] Specifies the settings for
     * Caffe2 job.
     *
     * @param {string} parameters.caffe2Settings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.caffe2Settings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.caffe2Settings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script
     *
     * @param {object} [parameters.chainerSettings] Specifies the settings for
     * Chainer job.
     *
     * @param {string} parameters.chainerSettings.pythonScriptFilePath The path and
     * file name of the python script to execute the job.
     *
     * @param {string} [parameters.chainerSettings.pythonInterpreterPath] The path
     * to python interpreter.
     *
     * @param {string} [parameters.chainerSettings.commandLineArgs] Command line
     * arguments that needs to be passed to the python script
     *
     * @param {number} [parameters.chainerSettings.processCount] Number of
     * processes parameter that is passed to MPI runtime. The default value for
     * this property is equal to nodeCount property
     *
     * @param {object} [parameters.customToolkitSettings] Specifies the settings
     * for custom tool kit job.
     *
     * @param {string} [parameters.customToolkitSettings.commandLine] The command
     * line to execute the custom toolkit Job.
     *
     * @param {object} [parameters.jobPreparation] Specifies the command line to be
     * executed before tool kit is launched. The specified actions will run on all
     * the nodes that are part of the job
     *
     * @param {string} parameters.jobPreparation.commandLine The command line to
     * execute. If containerSettings is specified on the job, this commandLine will
     * be executed in the same container as job. Otherwise it will be executed on
     * the node.
     *
     * @param {string} parameters.stdOutErrPathPrefix The path where the Batch AI
     * service will upload stdout and stderror of the job.
     *
     * @param {array} [parameters.inputDirectories] Specifies the list of input
     * directories for the Job.
     *
     * @param {array} [parameters.outputDirectories] Specifies the list of output
     * directories.
     *
     * @param {array} [parameters.environmentVariables] Additional environment
     * variables to set on the job. Batch AI will setup these additional
     * environment variables for the job.
     *
     * @param {array} [parameters.secrets] Additional environment variables with
     * secret values to set on the job. Batch AI will setup these additional
     * environment variables for the job. Server will never report values of these
     * variables back.
     *
     * @param {object} [parameters.constraints] Constraints associated with the
     * Job.
     *
     * @param {moment.duration} [parameters.constraints.maxWallClockTime] Max time
     * the job can run. Default Value = 1 week.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, jobName: string, parameters: models.JobCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    beginCreate(resourceGroupName: string, jobName: string, parameters: models.JobCreateParameters, callback: ServiceCallback<models.Job>): void;
    beginCreate(resourceGroupName: string, jobName: string, parameters: models.JobCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * Deletes the specified Batch AI job.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified Batch AI job.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, jobName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Terminates a job.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginTerminateWithHttpOperationResponse(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Terminates a job.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} jobName The name of the job within the specified resource
     * group. Job names can only contain a combination of alphanumeric characters
     * along with dash (-) and underscore (_). The name must be from 1 through 64
     * characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginTerminate(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginTerminate(resourceGroupName: string, jobName: string, callback: ServiceCallback<void>): void;
    beginTerminate(resourceGroupName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the IP address and port information of all the compute nodes which are
     * used for job execution.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RemoteLoginInformationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRemoteLoginInformationNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RemoteLoginInformationListResult>>;

    /**
     * Gets the IP address and port information of all the compute nodes which are
     * used for job execution.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RemoteLoginInformationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RemoteLoginInformationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RemoteLoginInformationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRemoteLoginInformationNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RemoteLoginInformationListResult>;
    listRemoteLoginInformationNext(nextPageLink: string, callback: ServiceCallback<models.RemoteLoginInformationListResult>): void;
    listRemoteLoginInformationNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RemoteLoginInformationListResult>): void;


    /**
     * Gets information about the jobs associated with the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobListResult>>;

    /**
     * Gets information about the jobs associated with the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.JobListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobListResult>): void;


    /**
     * Gets information about the Batch AI jobs associated within the specified
     * resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobListResult>>;

    /**
     * Gets information about the Batch AI jobs associated within the specified
     * resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.JobListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobListResult>): void;


    /**
     * List all directories and files inside the given directory of the output
     * directory (Only if the output directory is on Azure File Share or Azure
     * Storage container).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOutputFilesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileListResult>>;

    /**
     * List all directories and files inside the given directory of the output
     * directory (Only if the output directory is on Azure File Share or Azure
     * Storage container).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOutputFilesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileListResult>;
    listOutputFilesNext(nextPageLink: string, callback: ServiceCallback<models.FileListResult>): void;
    listOutputFilesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileListResult>): void;
}

/**
 * @class
 * FileServers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchAIManagementClient.
 */
export interface FileServers {


    /**
     * Creates a file server.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} fileServerName The name of the file server within the
     * specified resource group. File server names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name
     * must be from 1 through 64 characters long.
     *
     * @param {object} parameters The parameters to provide for file server
     * creation.
     *
     * @param {string} parameters.location The region in which to create the File
     * Server.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the File Server.
     *
     * @param {string} parameters.vmSize The size of the virtual machine of the
     * file server. For information about available VM sizes for fileservers from
     * the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
     *
     * @param {object} parameters.sshConfiguration SSH configuration for the file
     * server.
     *
     * @param {array} [parameters.sshConfiguration.publicIPsToAllow] List of source
     * IP ranges to allow SSH connection to a node. Default value is '*' can be
     * used to match all source IPs. Maximum number of IP ranges that can be
     * specified are 400.
     *
     * @param {object} parameters.sshConfiguration.userAccountSettings Settings for
     * user account to be created on a node.
     *
     * @param {string}
     * parameters.sshConfiguration.userAccountSettings.adminUserName Specifies the
     * name of the administrator account.
     *
     * @param {string}
     * [parameters.sshConfiguration.userAccountSettings.adminUserSshPublicKey] SSH
     * public keys used to authenticate with linux based VMs. This does not get
     * returned in a GET response body.
     *
     * @param {string}
     * [parameters.sshConfiguration.userAccountSettings.adminUserPassword] Admin
     * user Password (linux only). This does not get returned in a GET response
     * body.
     *
     * @param {object} parameters.dataDisks Settings for the data disk which would
     * be created for the file server.
     *
     * @param {number} parameters.dataDisks.diskSizeInGB Initial disk size in GB
     * for blank data disks, and the new desired size for resizing existing data
     * disks.
     *
     * @param {string} [parameters.dataDisks.cachingType] None, ReadOnly,
     * ReadWrite. Default value is None. This property is not patchable. Possible
     * values include: 'none', 'readonly', 'readwrite'
     *
     * @param {number} parameters.dataDisks.diskCount Number of data disks to be
     * attached to the VM. RAID level 0 will be applied in the case of multiple
     * disks.
     *
     * @param {string} parameters.dataDisks.storageAccountType Specifies the type
     * of storage account to be used on the disk. Possible values are: Standard_LRS
     * or Premium_LRS. Possible values include: 'Standard_LRS', 'Premium_LRS'
     *
     * @param {object} [parameters.subnet] Specifies the identifier of the subnet.
     *
     * @param {string} parameters.subnet.id The ID of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, fileServerName: string, parameters: models.FileServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServer>>;

    /**
     * Creates a file server.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} fileServerName The name of the file server within the
     * specified resource group. File server names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name
     * must be from 1 through 64 characters long.
     *
     * @param {object} parameters The parameters to provide for file server
     * creation.
     *
     * @param {string} parameters.location The region in which to create the File
     * Server.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the File Server.
     *
     * @param {string} parameters.vmSize The size of the virtual machine of the
     * file server. For information about available VM sizes for fileservers from
     * the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
     *
     * @param {object} parameters.sshConfiguration SSH configuration for the file
     * server.
     *
     * @param {array} [parameters.sshConfiguration.publicIPsToAllow] List of source
     * IP ranges to allow SSH connection to a node. Default value is '*' can be
     * used to match all source IPs. Maximum number of IP ranges that can be
     * specified are 400.
     *
     * @param {object} parameters.sshConfiguration.userAccountSettings Settings for
     * user account to be created on a node.
     *
     * @param {string}
     * parameters.sshConfiguration.userAccountSettings.adminUserName Specifies the
     * name of the administrator account.
     *
     * @param {string}
     * [parameters.sshConfiguration.userAccountSettings.adminUserSshPublicKey] SSH
     * public keys used to authenticate with linux based VMs. This does not get
     * returned in a GET response body.
     *
     * @param {string}
     * [parameters.sshConfiguration.userAccountSettings.adminUserPassword] Admin
     * user Password (linux only). This does not get returned in a GET response
     * body.
     *
     * @param {object} parameters.dataDisks Settings for the data disk which would
     * be created for the file server.
     *
     * @param {number} parameters.dataDisks.diskSizeInGB Initial disk size in GB
     * for blank data disks, and the new desired size for resizing existing data
     * disks.
     *
     * @param {string} [parameters.dataDisks.cachingType] None, ReadOnly,
     * ReadWrite. Default value is None. This property is not patchable. Possible
     * values include: 'none', 'readonly', 'readwrite'
     *
     * @param {number} parameters.dataDisks.diskCount Number of data disks to be
     * attached to the VM. RAID level 0 will be applied in the case of multiple
     * disks.
     *
     * @param {string} parameters.dataDisks.storageAccountType Specifies the type
     * of storage account to be used on the disk. Possible values are: Standard_LRS
     * or Premium_LRS. Possible values include: 'Standard_LRS', 'Premium_LRS'
     *
     * @param {object} [parameters.subnet] Specifies the identifier of the subnet.
     *
     * @param {string} parameters.subnet.id The ID of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, fileServerName: string, parameters: models.FileServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServer>;
    create(resourceGroupName: string, fileServerName: string, parameters: models.FileServerCreateParameters, callback: ServiceCallback<models.FileServer>): void;
    create(resourceGroupName: string, fileServerName: string, parameters: models.FileServerCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServer>): void;


    /**
     * Delete a file Server.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} fileServerName The name of the file server within the
     * specified resource group. File server names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name
     * must be from 1 through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, fileServerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a file Server.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} fileServerName The name of the file server within the
     * specified resource group. File server names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name
     * must be from 1 through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, fileServerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, fileServerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, fileServerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about the specified Cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} fileServerName The name of the file server within the
     * specified resource group. File server names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name
     * must be from 1 through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, fileServerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServer>>;

    /**
     * Gets information about the specified Cluster.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} fileServerName The name of the file server within the
     * specified resource group. File server names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name
     * must be from 1 through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, fileServerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServer>;
    get(resourceGroupName: string, fileServerName: string, callback: ServiceCallback<models.FileServer>): void;
    get(resourceGroupName: string, fileServerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServer>): void;


    /**
     * To list all the file servers available under the given subscription (and
     * across all resource groups within that subscription)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.fileServersListOptions] Additional parameters for
     * the operation
     *
     * @param {string} [options.fileServersListOptions.filter] An OData $filter
     * clause.. Used to filter results that are returned in the GET respnose.
     *
     * @param {string} [options.fileServersListOptions.select] An OData $select
     * clause. Used to select the properties to be returned in the GET respnose.
     *
     * @param {number} [options.fileServersListOptions.maxResults] The maximum
     * number of items to return in the response. A maximum of 1000 files can be
     * returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { fileServersListOptions? : models.FileServersListOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServerListResult>>;

    /**
     * To list all the file servers available under the given subscription (and
     * across all resource groups within that subscription)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.fileServersListOptions] Additional parameters for
     * the operation
     *
     * @param {string} [options.fileServersListOptions.filter] An OData $filter
     * clause.. Used to filter results that are returned in the GET respnose.
     *
     * @param {string} [options.fileServersListOptions.select] An OData $select
     * clause. Used to select the properties to be returned in the GET respnose.
     *
     * @param {number} [options.fileServersListOptions.maxResults] The maximum
     * number of items to return in the response. A maximum of 1000 files can be
     * returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { fileServersListOptions? : models.FileServersListOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServerListResult>;
    list(callback: ServiceCallback<models.FileServerListResult>): void;
    list(options: { fileServersListOptions? : models.FileServersListOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServerListResult>): void;


    /**
     * Gets a formatted list of file servers and their properties associated within
     * the specified resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.fileServersListByResourceGroupOptions] Additional
     * parameters for the operation
     *
     * @param {string} [options.fileServersListByResourceGroupOptions.filter] An
     * OData $filter clause.. Used to filter results that are returned in the GET
     * respnose.
     *
     * @param {string} [options.fileServersListByResourceGroupOptions.select] An
     * OData $select clause. Used to select the properties to be returned in the
     * GET respnose.
     *
     * @param {number} [options.fileServersListByResourceGroupOptions.maxResults]
     * The maximum number of items to return in the response. A maximum of 1000
     * files can be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { fileServersListByResourceGroupOptions? : models.FileServersListByResourceGroupOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServerListResult>>;

    /**
     * Gets a formatted list of file servers and their properties associated within
     * the specified resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.fileServersListByResourceGroupOptions] Additional
     * parameters for the operation
     *
     * @param {string} [options.fileServersListByResourceGroupOptions.filter] An
     * OData $filter clause.. Used to filter results that are returned in the GET
     * respnose.
     *
     * @param {string} [options.fileServersListByResourceGroupOptions.select] An
     * OData $select clause. Used to select the properties to be returned in the
     * GET respnose.
     *
     * @param {number} [options.fileServersListByResourceGroupOptions.maxResults]
     * The maximum number of items to return in the response. A maximum of 1000
     * files can be returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { fileServersListByResourceGroupOptions? : models.FileServersListByResourceGroupOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServerListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.FileServerListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { fileServersListByResourceGroupOptions? : models.FileServersListByResourceGroupOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServerListResult>): void;


    /**
     * Creates a file server.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} fileServerName The name of the file server within the
     * specified resource group. File server names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name
     * must be from 1 through 64 characters long.
     *
     * @param {object} parameters The parameters to provide for file server
     * creation.
     *
     * @param {string} parameters.location The region in which to create the File
     * Server.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the File Server.
     *
     * @param {string} parameters.vmSize The size of the virtual machine of the
     * file server. For information about available VM sizes for fileservers from
     * the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
     *
     * @param {object} parameters.sshConfiguration SSH configuration for the file
     * server.
     *
     * @param {array} [parameters.sshConfiguration.publicIPsToAllow] List of source
     * IP ranges to allow SSH connection to a node. Default value is '*' can be
     * used to match all source IPs. Maximum number of IP ranges that can be
     * specified are 400.
     *
     * @param {object} parameters.sshConfiguration.userAccountSettings Settings for
     * user account to be created on a node.
     *
     * @param {string}
     * parameters.sshConfiguration.userAccountSettings.adminUserName Specifies the
     * name of the administrator account.
     *
     * @param {string}
     * [parameters.sshConfiguration.userAccountSettings.adminUserSshPublicKey] SSH
     * public keys used to authenticate with linux based VMs. This does not get
     * returned in a GET response body.
     *
     * @param {string}
     * [parameters.sshConfiguration.userAccountSettings.adminUserPassword] Admin
     * user Password (linux only). This does not get returned in a GET response
     * body.
     *
     * @param {object} parameters.dataDisks Settings for the data disk which would
     * be created for the file server.
     *
     * @param {number} parameters.dataDisks.diskSizeInGB Initial disk size in GB
     * for blank data disks, and the new desired size for resizing existing data
     * disks.
     *
     * @param {string} [parameters.dataDisks.cachingType] None, ReadOnly,
     * ReadWrite. Default value is None. This property is not patchable. Possible
     * values include: 'none', 'readonly', 'readwrite'
     *
     * @param {number} parameters.dataDisks.diskCount Number of data disks to be
     * attached to the VM. RAID level 0 will be applied in the case of multiple
     * disks.
     *
     * @param {string} parameters.dataDisks.storageAccountType Specifies the type
     * of storage account to be used on the disk. Possible values are: Standard_LRS
     * or Premium_LRS. Possible values include: 'Standard_LRS', 'Premium_LRS'
     *
     * @param {object} [parameters.subnet] Specifies the identifier of the subnet.
     *
     * @param {string} parameters.subnet.id The ID of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, fileServerName: string, parameters: models.FileServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServer>>;

    /**
     * Creates a file server.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} fileServerName The name of the file server within the
     * specified resource group. File server names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name
     * must be from 1 through 64 characters long.
     *
     * @param {object} parameters The parameters to provide for file server
     * creation.
     *
     * @param {string} parameters.location The region in which to create the File
     * Server.
     *
     * @param {object} [parameters.tags] The user specified tags associated with
     * the File Server.
     *
     * @param {string} parameters.vmSize The size of the virtual machine of the
     * file server. For information about available VM sizes for fileservers from
     * the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
     *
     * @param {object} parameters.sshConfiguration SSH configuration for the file
     * server.
     *
     * @param {array} [parameters.sshConfiguration.publicIPsToAllow] List of source
     * IP ranges to allow SSH connection to a node. Default value is '*' can be
     * used to match all source IPs. Maximum number of IP ranges that can be
     * specified are 400.
     *
     * @param {object} parameters.sshConfiguration.userAccountSettings Settings for
     * user account to be created on a node.
     *
     * @param {string}
     * parameters.sshConfiguration.userAccountSettings.adminUserName Specifies the
     * name of the administrator account.
     *
     * @param {string}
     * [parameters.sshConfiguration.userAccountSettings.adminUserSshPublicKey] SSH
     * public keys used to authenticate with linux based VMs. This does not get
     * returned in a GET response body.
     *
     * @param {string}
     * [parameters.sshConfiguration.userAccountSettings.adminUserPassword] Admin
     * user Password (linux only). This does not get returned in a GET response
     * body.
     *
     * @param {object} parameters.dataDisks Settings for the data disk which would
     * be created for the file server.
     *
     * @param {number} parameters.dataDisks.diskSizeInGB Initial disk size in GB
     * for blank data disks, and the new desired size for resizing existing data
     * disks.
     *
     * @param {string} [parameters.dataDisks.cachingType] None, ReadOnly,
     * ReadWrite. Default value is None. This property is not patchable. Possible
     * values include: 'none', 'readonly', 'readwrite'
     *
     * @param {number} parameters.dataDisks.diskCount Number of data disks to be
     * attached to the VM. RAID level 0 will be applied in the case of multiple
     * disks.
     *
     * @param {string} parameters.dataDisks.storageAccountType Specifies the type
     * of storage account to be used on the disk. Possible values are: Standard_LRS
     * or Premium_LRS. Possible values include: 'Standard_LRS', 'Premium_LRS'
     *
     * @param {object} [parameters.subnet] Specifies the identifier of the subnet.
     *
     * @param {string} parameters.subnet.id The ID of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, fileServerName: string, parameters: models.FileServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServer>;
    beginCreate(resourceGroupName: string, fileServerName: string, parameters: models.FileServerCreateParameters, callback: ServiceCallback<models.FileServer>): void;
    beginCreate(resourceGroupName: string, fileServerName: string, parameters: models.FileServerCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServer>): void;


    /**
     * Delete a file Server.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} fileServerName The name of the file server within the
     * specified resource group. File server names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name
     * must be from 1 through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, fileServerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a file Server.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} fileServerName The name of the file server within the
     * specified resource group. File server names can only contain a combination
     * of alphanumeric characters along with dash (-) and underscore (_). The name
     * must be from 1 through 64 characters long.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, fileServerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, fileServerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, fileServerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * To list all the file servers available under the given subscription (and
     * across all resource groups within that subscription)
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServerListResult>>;

    /**
     * To list all the file servers available under the given subscription (and
     * across all resource groups within that subscription)
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServerListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.FileServerListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServerListResult>): void;


    /**
     * Gets a formatted list of file servers and their properties associated within
     * the specified resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServerListResult>>;

    /**
     * Gets a formatted list of file servers and their properties associated within
     * the specified resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServerListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.FileServerListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServerListResult>): void;
}
