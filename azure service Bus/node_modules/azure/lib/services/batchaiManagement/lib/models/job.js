/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Contains information about the job.
 *
 * @extends models['Resource']
 */
class Job extends models['Resource'] {
  /**
   * Create a Job.
   * @member {string} [experimentName] Describe the experiment information of
   * the job
   * @member {number} [priority] Priority associated with the job. Priority
   * associated with the job. Priority values can range from -1000 to 1000,
   * with -1000 being the lowest priority and 1000 being the highest priority.
   * The default value is 0. Default value: 0 .
   * @member {object} [cluster] Specifies the Id of the cluster on which this
   * job will run.
   * @member {string} [cluster.id] The ID of the resource
   * @member {object} [mountVolumes] Information on mount volumes to be used by
   * the job. These volumes will be mounted before the job execution and will
   * be unmouted after the job completion. The volumes will be mounted at
   * location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
   * @member {array} [mountVolumes.azureFileShares] References to Azure File
   * Shares that are to be mounted to the cluster nodes.
   * @member {array} [mountVolumes.azureBlobFileSystems] References to Azure
   * Blob FUSE that are to be mounted to the cluster nodes.
   * @member {array} [mountVolumes.fileServers]
   * @member {array} [mountVolumes.unmanagedFileSystems]
   * @member {string} [jobOutputDirectoryPathSegment] A segment of job's output
   * directories path created by BatchAI. Batch AI creates job's output
   * directories under an unique path to avoid conflicts between jobs. This
   * value contains a path segment generated by Batch AI to make the path
   * unique and can be used to find the output directory on the node or mounted
   * filesystem.
   * @member {number} [nodeCount] Number of compute nodes to run the job on.
   * The job will be gang scheduled on that many compute nodes
   * @member {object} [containerSettings] If provided the job will run in the
   * specified container. If the container was downloaded as part of cluster
   * setup then the same container image will be used. If not provided, the job
   * will run on the VM.
   * @member {object} [containerSettings.imageSourceRegistry]
   * @member {string} [containerSettings.imageSourceRegistry.serverUrl]
   * @member {string} [containerSettings.imageSourceRegistry.image]
   * @member {object} [containerSettings.imageSourceRegistry.credentials]
   * @member {string}
   * [containerSettings.imageSourceRegistry.credentials.username]
   * @member {string}
   * [containerSettings.imageSourceRegistry.credentials.password] One of
   * password or passwordSecretReference must be specified.
   * @member {object}
   * [containerSettings.imageSourceRegistry.credentials.passwordSecretReference]
   * Users can store their secrets in Azure KeyVault and pass it to the Batch
   * AI Service to integrate with KeyVault. One of password or
   * passwordSecretReference must be specified.
   * @member {object}
   * [containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault]
   * @member {string}
   * [containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault.id]
   * The ID of the resource
   * @member {string}
   * [containerSettings.imageSourceRegistry.credentials.passwordSecretReference.secretUrl]
   * @member {string} [toolType] The toolkit type of this job. Possible values
   * are: cntk, tensorflow, caffe, caffe2, chainer, pytorch, custom. Possible
   * values include: 'cntk', 'tensorflow', 'caffe', 'caffe2', 'chainer',
   * 'custom'
   * @member {object} [cntkSettings] Specifies the settings for CNTK (aka
   * Microsoft Cognitive Toolkit) job.
   * @member {string} [cntkSettings.languageType] Valid values are
   * 'BrainScript' or 'Python'.
   * @member {string} [cntkSettings.configFilePath] This property can be
   * specified only if the languageType is 'BrainScript'.
   * @member {string} [cntkSettings.pythonScriptFilePath] This property can be
   * specified only if the languageType is 'Python'.
   * @member {string} [cntkSettings.pythonInterpreterPath] This property can be
   * specified only if the languageType is 'Python'.
   * @member {string} [cntkSettings.commandLineArgs]
   * @member {number} [cntkSettings.processCount] The default value for this
   * property is equal to nodeCount property
   * @member {object} [pyTorchSettings] Specifies the settings for pyTorch job.
   * @member {string} [pyTorchSettings.pythonScriptFilePath]
   * @member {string} [pyTorchSettings.pythonInterpreterPath]
   * @member {string} [pyTorchSettings.commandLineArgs]
   * @member {number} [pyTorchSettings.processCount] The default value for this
   * property is equal to nodeCount property.
   * @member {string} [pyTorchSettings.communicationBackend] Valid values are
   * 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
   * @member {object} [tensorFlowSettings] Specifies the settings for Tensor
   * Flow job.
   * @member {string} [tensorFlowSettings.pythonScriptFilePath]
   * @member {string} [tensorFlowSettings.pythonInterpreterPath]
   * @member {string} [tensorFlowSettings.masterCommandLineArgs]
   * @member {string} [tensorFlowSettings.workerCommandLineArgs] This property
   * is optional for single machine training.
   * @member {string} [tensorFlowSettings.parameterServerCommandLineArgs] This
   * property is optional for single machine training.
   * @member {number} [tensorFlowSettings.workerCount] If specified, the value
   * must be less than or equal to (nodeCount * numberOfGPUs per VM). If not
   * specified, the default value is equal to nodeCount. This property can be
   * specified only for distributed TensorFlow training
   * @member {number} [tensorFlowSettings.parameterServerCount] If specified,
   * the value must be less than or equal to nodeCount. If not specified, the
   * default value is equal to 1 for distributed TensorFlow training (This
   * property is not applicable for single machine training). This property can
   * be specified only for distributed TensorFlow training.
   * @member {object} [caffeSettings] Specifies the settings for Caffe job.
   * @member {string} [caffeSettings.configFilePath] This property cannot be
   * specified if pythonScriptFilePath is specified.
   * @member {string} [caffeSettings.pythonScriptFilePath] This property cannot
   * be specified if configFilePath is specified.
   * @member {string} [caffeSettings.pythonInterpreterPath] This property can
   * be specified only if the pythonScriptFilePath is specified.
   * @member {string} [caffeSettings.commandLineArgs]
   * @member {number} [caffeSettings.processCount] The default value for this
   * property is equal to nodeCount property
   * @member {object} [chainerSettings] Specifies the settings for Chainer job.
   * @member {string} [chainerSettings.pythonScriptFilePath]
   * @member {string} [chainerSettings.pythonInterpreterPath]
   * @member {string} [chainerSettings.commandLineArgs]
   * @member {number} [chainerSettings.processCount] The default value for this
   * property is equal to nodeCount property
   * @member {object} [customToolkitSettings] Specifies the settings for custom
   * tool kit job.
   * @member {string} [customToolkitSettings.commandLine]
   * @member {object} [jobPreparation] Specifies the actions to be performed
   * before tool kit is launched. The specified actions will run on all the
   * nodes that are part of the job
   * @member {string} [jobPreparation.commandLine] If containerSettings is
   * specified on the job, this commandLine will be executed in the same
   * container as job. Otherwise it will be executed on the node.
   * @member {string} [stdOutErrPathPrefix] The path where the Batch AI service
   * will upload stdout and stderror of the job.
   * @member {array} [inputDirectories] Specifies the list of input directories
   * for the Job.
   * @member {array} [outputDirectories] Specifies the list of output
   * directories where the models will be created.
   * @member {array} [environmentVariables] Additional environment variables to
   * set on the job. Batch AI will setup these additional environment variables
   * for the job.
   * @member {array} [secrets] Additional environment variables with secret
   * values to set on the job. Batch AI will setup these additional environment
   * variables for the job. Server will never report values of these variables
   * back.
   * @member {object} [constraints] Constraints associated with the Job.
   * @member {moment.duration} [constraints.maxWallClockTime] Default Value = 1
   * week.
   * @member {date} [creationTime] The job creation time. The creation time of
   * the job.
   * @member {string} [provisioningState] The provisioned state of the Batch AI
   * job. Possible values include: 'creating', 'succeeded', 'failed',
   * 'deleting'
   * @member {date} [provisioningStateTransitionTime] The time at which the job
   * entered its current provisioning state. The time at which the job entered
   * its current provisioning state.
   * @member {string} [executionState] The current state of the job. The
   * current state of the job. Possible values are: queued - The job is queued
   * and able to run. A job enters this state when it is created, or when it is
   * awaiting a retry after a failed run. running - The job is running on a
   * compute cluster. This includes job-level preparation such as downloading
   * resource files or set up container specified on the job - it does not
   * necessarily mean that the job command line has started executing.
   * terminating - The job is terminated by the user, the terminate operation
   * is in progress. succeeded - The job has completed running succesfully and
   * exited with exit code 0. failed - The job has finished unsuccessfully
   * (failed with a non-zero exit code) and has exhausted its retry limit. A
   * job is also marked as failed if an error occurred launching the job.
   * Possible values include: 'queued', 'running', 'terminating', 'succeeded',
   * 'failed'
   * @member {date} [executionStateTransitionTime] The time at which the job
   * entered its current execution state. The time at which the job entered its
   * current execution state.
   * @member {object} [executionInfo] Contains information about the execution
   * of a job in the Azure Batch service.
   * @member {date} [executionInfo.startTime] 'Running' corresponds to the
   * running state. If the job has been restarted or retried, this is the most
   * recent time at which the job started running. This property is present
   * only for job that are in the running or completed state.
   * @member {date} [executionInfo.endTime] This property is only returned if
   * the job is in completed state.
   * @member {number} [executionInfo.exitCode] This property is only returned
   * if the job is in completed state.
   * @member {array} [executionInfo.errors]
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Job
   *
   * @returns {object} metadata of Job
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Job',
      type: {
        name: 'Composite',
        className: 'Job',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            readOnly: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            readOnly: true,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          experimentName: {
            required: false,
            serializedName: 'properties.experimentName',
            type: {
              name: 'String'
            }
          },
          priority: {
            required: false,
            serializedName: 'properties.priority',
            defaultValue: 0,
            type: {
              name: 'Number'
            }
          },
          cluster: {
            required: false,
            serializedName: 'properties.cluster',
            type: {
              name: 'Composite',
              className: 'ResourceId'
            }
          },
          mountVolumes: {
            required: false,
            serializedName: 'properties.mountVolumes',
            type: {
              name: 'Composite',
              className: 'MountVolumes'
            }
          },
          jobOutputDirectoryPathSegment: {
            required: false,
            serializedName: 'properties.jobOutputDirectoryPathSegment',
            type: {
              name: 'String'
            }
          },
          nodeCount: {
            required: false,
            serializedName: 'properties.nodeCount',
            type: {
              name: 'Number'
            }
          },
          containerSettings: {
            required: false,
            serializedName: 'properties.containerSettings',
            type: {
              name: 'Composite',
              className: 'ContainerSettings'
            }
          },
          toolType: {
            required: false,
            serializedName: 'properties.toolType',
            type: {
              name: 'String'
            }
          },
          cntkSettings: {
            required: false,
            serializedName: 'properties.cntkSettings',
            type: {
              name: 'Composite',
              className: 'CNTKsettings'
            }
          },
          pyTorchSettings: {
            required: false,
            serializedName: 'properties.pyTorchSettings',
            type: {
              name: 'Composite',
              className: 'PyTorchSettings'
            }
          },
          tensorFlowSettings: {
            required: false,
            serializedName: 'properties.tensorFlowSettings',
            type: {
              name: 'Composite',
              className: 'TensorFlowSettings'
            }
          },
          caffeSettings: {
            required: false,
            serializedName: 'properties.caffeSettings',
            type: {
              name: 'Composite',
              className: 'CaffeSettings'
            }
          },
          chainerSettings: {
            required: false,
            serializedName: 'properties.chainerSettings',
            type: {
              name: 'Composite',
              className: 'ChainerSettings'
            }
          },
          customToolkitSettings: {
            required: false,
            serializedName: 'properties.customToolkitSettings',
            type: {
              name: 'Composite',
              className: 'CustomToolkitSettings'
            }
          },
          jobPreparation: {
            required: false,
            serializedName: 'properties.jobPreparation',
            type: {
              name: 'Composite',
              className: 'JobPreparation'
            }
          },
          stdOutErrPathPrefix: {
            required: false,
            serializedName: 'properties.stdOutErrPathPrefix',
            type: {
              name: 'String'
            }
          },
          inputDirectories: {
            required: false,
            serializedName: 'properties.inputDirectories',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'InputDirectoryElementType',
                  type: {
                    name: 'Composite',
                    className: 'InputDirectory'
                  }
              }
            }
          },
          outputDirectories: {
            required: false,
            serializedName: 'properties.outputDirectories',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'OutputDirectoryElementType',
                  type: {
                    name: 'Composite',
                    className: 'OutputDirectory'
                  }
              }
            }
          },
          environmentVariables: {
            required: false,
            serializedName: 'properties.environmentVariables',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentVariableElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentVariable'
                  }
              }
            }
          },
          secrets: {
            required: false,
            serializedName: 'properties.secrets',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentVariableWithSecretValueElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentVariableWithSecretValue'
                  }
              }
            }
          },
          constraints: {
            required: false,
            serializedName: 'properties.constraints',
            type: {
              name: 'Composite',
              className: 'JobPropertiesConstraints'
            }
          },
          creationTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationTime',
            type: {
              name: 'DateTime'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'creating', 'succeeded', 'failed', 'deleting' ]
            }
          },
          provisioningStateTransitionTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningStateTransitionTime',
            type: {
              name: 'DateTime'
            }
          },
          executionState: {
            required: false,
            serializedName: 'properties.executionState',
            type: {
              name: 'Enum',
              allowedValues: [ 'queued', 'running', 'terminating', 'succeeded', 'failed' ]
            }
          },
          executionStateTransitionTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.executionStateTransitionTime',
            type: {
              name: 'DateTime'
            }
          },
          executionInfo: {
            required: false,
            serializedName: 'properties.executionInfo',
            type: {
              name: 'Composite',
              className: 'JobPropertiesExecutionInfo'
            }
          }
        }
      }
    };
  }
}

module.exports = Job;
