/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Parameters supplied to the Create operation.
 *
 */
class FileServerCreateParameters {
  /**
   * Create a FileServerCreateParameters.
   * @member {string} location The region in which to create the File Server.
   * @member {object} [tags] The user specified tags associated with the File
   * Server.
   * @member {string} vmSize The size of the virtual machine of the file
   * server. For information about available VM sizes for fileservers from the
   * Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
   * @member {object} sshConfiguration SSH configuration for the file server.
   * @member {array} [sshConfiguration.publicIPsToAllow] Default value is '*'
   * can be used to match all source IPs. Maximum number of IP ranges that can
   * be specified are 400.
   * @member {object} [sshConfiguration.userAccountSettings]
   * @member {string} [sshConfiguration.userAccountSettings.adminUserName]
   * @member {string}
   * [sshConfiguration.userAccountSettings.adminUserSshPublicKey]
   * @member {string} [sshConfiguration.userAccountSettings.adminUserPassword]
   * @member {object} dataDisks Settings for the data disk which would be
   * created for the file server.
   * @member {number} [dataDisks.diskSizeInGB]
   * @member {string} [dataDisks.cachingType] Possible values include: 'none',
   * 'readonly', 'readwrite'
   * @member {number} [dataDisks.diskCount]
   * @member {string} [dataDisks.storageAccountType] Possible values include:
   * 'Standard_LRS', 'Premium_LRS'
   * @member {object} [subnet] Specifies the identifier of the subnet.
   * @member {string} [subnet.id] The ID of the resource
   */
  constructor() {
  }

  /**
   * Defines the metadata of FileServerCreateParameters
   *
   * @returns {object} metadata of FileServerCreateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'FileServerCreateParameters',
      type: {
        name: 'Composite',
        className: 'FileServerCreateParameters',
        modelProperties: {
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          vmSize: {
            required: true,
            serializedName: 'properties.vmSize',
            type: {
              name: 'String'
            }
          },
          sshConfiguration: {
            required: true,
            serializedName: 'properties.sshConfiguration',
            type: {
              name: 'Composite',
              className: 'SshConfiguration'
            }
          },
          dataDisks: {
            required: true,
            serializedName: 'properties.dataDisks',
            type: {
              name: 'Composite',
              className: 'DataDisks'
            }
          },
          subnet: {
            required: false,
            serializedName: 'properties.subnet',
            type: {
              name: 'Composite',
              className: 'ResourceId'
            }
          }
        }
      }
    };
  }
}

module.exports = FileServerCreateParameters;
