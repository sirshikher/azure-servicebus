/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Specifies a setup task which can be used to customize the compute nodes of
 * the cluster.
 *
 */
class SetupTask {
  /**
   * Create a SetupTask.
   * @member {string} commandLine Command Line to start Setup process.
   * @member {array} [environmentVariables] Collection of environment variables
   * to be set for setup task.
   * @member {array} [secrets] Collection of environment variables with secret
   * values to be set for setup task. Server will never report values of these
   * variables back.
   * @member {boolean} [runElevated] Specifies whether to run the setup task
   * under root account. The default value is false. Note. Non-elevated tasks
   * are run under an account added into sudoer list and can perform sudo when
   * required. Default value: false .
   * @member {string} stdOutErrPathPrefix The prefix of a path where the Batch
   * AI service will upload the stdout and stderr of the setup task.
   * @member {string} [stdOutErrPathSuffix] A path segment appended by Batch AI
   * to stdOutErrPathPrefix to form a path where stdout and stderr of the setup
   * task will be uploaded. Batch AI creates the setup task output directories
   * under an unique path to avoid conflicts between different clusters. You
   * can concatinate stdOutErrPathPrefix and stdOutErrPathSuffix to get the
   * full path to the output directory.
   */
  constructor() {
  }

  /**
   * Defines the metadata of SetupTask
   *
   * @returns {object} metadata of SetupTask
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SetupTask',
      type: {
        name: 'Composite',
        className: 'SetupTask',
        modelProperties: {
          commandLine: {
            required: true,
            serializedName: 'commandLine',
            type: {
              name: 'String'
            }
          },
          environmentVariables: {
            required: false,
            serializedName: 'environmentVariables',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentVariableElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentVariable'
                  }
              }
            }
          },
          secrets: {
            required: false,
            serializedName: 'secrets',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentVariableWithSecretValueElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentVariableWithSecretValue'
                  }
              }
            }
          },
          runElevated: {
            required: false,
            serializedName: 'runElevated',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          stdOutErrPathPrefix: {
            required: true,
            serializedName: 'stdOutErrPathPrefix',
            type: {
              name: 'String'
            }
          },
          stdOutErrPathSuffix: {
            required: false,
            readOnly: true,
            serializedName: 'stdOutErrPathSuffix',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = SetupTask;
