/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Contains information about the File Server.
 *
 * @extends models['Resource']
 */
class FileServer extends models['Resource'] {
  /**
   * Create a FileServer.
   * @member {string} [vmSize] The size of the virtual machine of the File
   * Server. For information about available VM sizes for File Server from the
   * Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
   * @member {object} [sshConfiguration] SSH settings for the File Server.
   * @member {array} [sshConfiguration.publicIPsToAllow] Default value is '*'
   * can be used to match all source IPs. Maximum number of IP ranges that can
   * be specified are 400.
   * @member {object} [sshConfiguration.userAccountSettings]
   * @member {string} [sshConfiguration.userAccountSettings.adminUserName]
   * @member {string}
   * [sshConfiguration.userAccountSettings.adminUserSshPublicKey]
   * @member {string} [sshConfiguration.userAccountSettings.adminUserPassword]
   * @member {object} [dataDisks] Settings for the data disk which would be
   * created for the File Server.
   * @member {number} [dataDisks.diskSizeInGB]
   * @member {string} [dataDisks.cachingType] Possible values include: 'none',
   * 'readonly', 'readwrite'
   * @member {number} [dataDisks.diskCount]
   * @member {string} [dataDisks.storageAccountType] Possible values include:
   * 'Standard_LRS', 'Premium_LRS'
   * @member {object} [subnet] Specifies the identifier of the subnet.
   * @member {string} [subnet.id] The ID of the resource
   * @member {object} [mountSettings] Details of the File Server.
   * @member {string} [mountSettings.mountPoint]
   * @member {string} [mountSettings.fileServerPublicIP]
   * @member {string} [mountSettings.fileServerInternalIP]
   * @member {string} [mountSettings.fileServerType] Possible values include:
   * 'nfs', 'glusterfs'
   * @member {date} [provisioningStateTransitionTime] Time when the status was
   * changed.
   * @member {date} [creationTime] Time when the FileServer was created.
   * @member {string} [provisioningState] Specifies the provisioning state of
   * the File Server. Possible values: creating - The File Server is getting
   * created. updating - The File Server creation has been accepted and it is
   * getting updated. deleting - The user has requested that the File Server be
   * deleted, and it is in the process of being deleted. failed - The File
   * Server creation has failed with the specified errorCode. Details about the
   * error code are specified in the message field. succeeded - The File Server
   * creation has succeeded. Possible values include: 'creating', 'updating',
   * 'deleting', 'succeeded', 'failed'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of FileServer
   *
   * @returns {object} metadata of FileServer
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'FileServer',
      type: {
        name: 'Composite',
        className: 'FileServer',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            readOnly: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            readOnly: true,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          vmSize: {
            required: false,
            serializedName: 'properties.vmSize',
            type: {
              name: 'String'
            }
          },
          sshConfiguration: {
            required: false,
            serializedName: 'properties.sshConfiguration',
            type: {
              name: 'Composite',
              className: 'SshConfiguration'
            }
          },
          dataDisks: {
            required: false,
            serializedName: 'properties.dataDisks',
            type: {
              name: 'Composite',
              className: 'DataDisks'
            }
          },
          subnet: {
            required: false,
            serializedName: 'properties.subnet',
            type: {
              name: 'Composite',
              className: 'ResourceId'
            }
          },
          mountSettings: {
            required: false,
            readOnly: true,
            serializedName: 'properties.mountSettings',
            type: {
              name: 'Composite',
              className: 'MountSettings'
            }
          },
          provisioningStateTransitionTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningStateTransitionTime',
            type: {
              name: 'DateTime'
            }
          },
          creationTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationTime',
            type: {
              name: 'DateTime'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'creating', 'updating', 'deleting', 'succeeded', 'failed' ]
            }
          }
        }
      }
    };
  }
}

module.exports = FileServer;
