/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Parameters supplied to the Create operation.
 *
 */
class JobCreateParameters {
  /**
   * Create a JobCreateParameters.
   * @member {string} location The region in which to create the job.
   * @member {object} [tags] The user specified tags associated with the job.
   * @member {string} [experimentName] Describe the experiment information of
   * the job
   * @member {number} [priority] Priority associated with the job. Priority
   * associated with the job. Priority values can range from -1000 to 1000,
   * with -1000 being the lowest priority and 1000 being the highest priority.
   * The default value is 0. Default value: 0 .
   * @member {object} cluster Specifies the Id of the cluster on which this job
   * will run.
   * @member {string} [cluster.id] The ID of the resource
   * @member {object} [mountVolumes] Information on mount volumes to be used by
   * the job. These volumes will be mounted before the job execution and will
   * be unmouted after the job completion. The volumes will be mounted at
   * location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
   * @member {array} [mountVolumes.azureFileShares] References to Azure File
   * Shares that are to be mounted to the cluster nodes.
   * @member {array} [mountVolumes.azureBlobFileSystems] References to Azure
   * Blob FUSE that are to be mounted to the cluster nodes.
   * @member {array} [mountVolumes.fileServers]
   * @member {array} [mountVolumes.unmanagedFileSystems]
   * @member {number} nodeCount Number of compute nodes to run the job on. The
   * job will be gang scheduled on that many compute nodes
   * @member {object} [containerSettings] If provided the job will run in the
   * specified container. If the container was downloaded as part of cluster
   * setup then the same container image will be used. If not provided, the job
   * will run on the VM.
   * @member {object} [containerSettings.imageSourceRegistry]
   * @member {string} [containerSettings.imageSourceRegistry.serverUrl]
   * @member {string} [containerSettings.imageSourceRegistry.image]
   * @member {object} [containerSettings.imageSourceRegistry.credentials]
   * @member {string}
   * [containerSettings.imageSourceRegistry.credentials.username]
   * @member {string}
   * [containerSettings.imageSourceRegistry.credentials.password] One of
   * password or passwordSecretReference must be specified.
   * @member {object}
   * [containerSettings.imageSourceRegistry.credentials.passwordSecretReference]
   * Users can store their secrets in Azure KeyVault and pass it to the Batch
   * AI Service to integrate with KeyVault. One of password or
   * passwordSecretReference must be specified.
   * @member {object}
   * [containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault]
   * @member {string}
   * [containerSettings.imageSourceRegistry.credentials.passwordSecretReference.sourceVault.id]
   * The ID of the resource
   * @member {string}
   * [containerSettings.imageSourceRegistry.credentials.passwordSecretReference.secretUrl]
   * @member {object} [cntkSettings] Specifies the settings for CNTK (aka
   * Microsoft Cognitive Toolkit) job.
   * @member {string} [cntkSettings.languageType] Valid values are
   * 'BrainScript' or 'Python'.
   * @member {string} [cntkSettings.configFilePath] This property can be
   * specified only if the languageType is 'BrainScript'.
   * @member {string} [cntkSettings.pythonScriptFilePath] This property can be
   * specified only if the languageType is 'Python'.
   * @member {string} [cntkSettings.pythonInterpreterPath] This property can be
   * specified only if the languageType is 'Python'.
   * @member {string} [cntkSettings.commandLineArgs]
   * @member {number} [cntkSettings.processCount] The default value for this
   * property is equal to nodeCount property
   * @member {object} [pyTorchSettings] Specifies the settings for pyTorch job.
   * @member {string} [pyTorchSettings.pythonScriptFilePath]
   * @member {string} [pyTorchSettings.pythonInterpreterPath]
   * @member {string} [pyTorchSettings.commandLineArgs]
   * @member {number} [pyTorchSettings.processCount] The default value for this
   * property is equal to nodeCount property.
   * @member {string} [pyTorchSettings.communicationBackend] Valid values are
   * 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
   * @member {object} [tensorFlowSettings] Specifies the settings for Tensor
   * Flow job.
   * @member {string} [tensorFlowSettings.pythonScriptFilePath]
   * @member {string} [tensorFlowSettings.pythonInterpreterPath]
   * @member {string} [tensorFlowSettings.masterCommandLineArgs]
   * @member {string} [tensorFlowSettings.workerCommandLineArgs] This property
   * is optional for single machine training.
   * @member {string} [tensorFlowSettings.parameterServerCommandLineArgs] This
   * property is optional for single machine training.
   * @member {number} [tensorFlowSettings.workerCount] If specified, the value
   * must be less than or equal to (nodeCount * numberOfGPUs per VM). If not
   * specified, the default value is equal to nodeCount. This property can be
   * specified only for distributed TensorFlow training
   * @member {number} [tensorFlowSettings.parameterServerCount] If specified,
   * the value must be less than or equal to nodeCount. If not specified, the
   * default value is equal to 1 for distributed TensorFlow training (This
   * property is not applicable for single machine training). This property can
   * be specified only for distributed TensorFlow training.
   * @member {object} [caffeSettings] Specifies the settings for Caffe job.
   * @member {string} [caffeSettings.configFilePath] This property cannot be
   * specified if pythonScriptFilePath is specified.
   * @member {string} [caffeSettings.pythonScriptFilePath] This property cannot
   * be specified if configFilePath is specified.
   * @member {string} [caffeSettings.pythonInterpreterPath] This property can
   * be specified only if the pythonScriptFilePath is specified.
   * @member {string} [caffeSettings.commandLineArgs]
   * @member {number} [caffeSettings.processCount] The default value for this
   * property is equal to nodeCount property
   * @member {object} [caffe2Settings] Specifies the settings for Caffe2 job.
   * @member {string} [caffe2Settings.pythonScriptFilePath]
   * @member {string} [caffe2Settings.pythonInterpreterPath]
   * @member {string} [caffe2Settings.commandLineArgs]
   * @member {object} [chainerSettings] Specifies the settings for Chainer job.
   * @member {string} [chainerSettings.pythonScriptFilePath]
   * @member {string} [chainerSettings.pythonInterpreterPath]
   * @member {string} [chainerSettings.commandLineArgs]
   * @member {number} [chainerSettings.processCount] The default value for this
   * property is equal to nodeCount property
   * @member {object} [customToolkitSettings] Specifies the settings for custom
   * tool kit job.
   * @member {string} [customToolkitSettings.commandLine]
   * @member {object} [jobPreparation] Specifies the command line to be
   * executed before tool kit is launched. The specified actions will run on
   * all the nodes that are part of the job
   * @member {string} [jobPreparation.commandLine] If containerSettings is
   * specified on the job, this commandLine will be executed in the same
   * container as job. Otherwise it will be executed on the node.
   * @member {string} stdOutErrPathPrefix The path where the Batch AI service
   * will upload stdout and stderror of the job.
   * @member {array} [inputDirectories] Specifies the list of input directories
   * for the Job.
   * @member {array} [outputDirectories] Specifies the list of output
   * directories.
   * @member {array} [environmentVariables] Additional environment variables to
   * set on the job. Batch AI will setup these additional environment variables
   * for the job.
   * @member {array} [secrets] Additional environment variables with secret
   * values to set on the job. Batch AI will setup these additional environment
   * variables for the job. Server will never report values of these variables
   * back.
   * @member {object} [constraints] Constraints associated with the Job.
   * @member {moment.duration} [constraints.maxWallClockTime] Default Value = 1
   * week.
   */
  constructor() {
  }

  /**
   * Defines the metadata of JobCreateParameters
   *
   * @returns {object} metadata of JobCreateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'JobCreateParameters',
      type: {
        name: 'Composite',
        className: 'JobCreateParameters',
        modelProperties: {
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          experimentName: {
            required: false,
            serializedName: 'properties.experimentName',
            type: {
              name: 'String'
            }
          },
          priority: {
            required: false,
            serializedName: 'properties.priority',
            defaultValue: 0,
            type: {
              name: 'Number'
            }
          },
          cluster: {
            required: true,
            serializedName: 'properties.cluster',
            type: {
              name: 'Composite',
              className: 'ResourceId'
            }
          },
          mountVolumes: {
            required: false,
            serializedName: 'properties.mountVolumes',
            type: {
              name: 'Composite',
              className: 'MountVolumes'
            }
          },
          nodeCount: {
            required: true,
            serializedName: 'properties.nodeCount',
            type: {
              name: 'Number'
            }
          },
          containerSettings: {
            required: false,
            serializedName: 'properties.containerSettings',
            type: {
              name: 'Composite',
              className: 'ContainerSettings'
            }
          },
          cntkSettings: {
            required: false,
            serializedName: 'properties.cntkSettings',
            type: {
              name: 'Composite',
              className: 'CNTKsettings'
            }
          },
          pyTorchSettings: {
            required: false,
            serializedName: 'properties.pyTorchSettings',
            type: {
              name: 'Composite',
              className: 'PyTorchSettings'
            }
          },
          tensorFlowSettings: {
            required: false,
            serializedName: 'properties.tensorFlowSettings',
            type: {
              name: 'Composite',
              className: 'TensorFlowSettings'
            }
          },
          caffeSettings: {
            required: false,
            serializedName: 'properties.caffeSettings',
            type: {
              name: 'Composite',
              className: 'CaffeSettings'
            }
          },
          caffe2Settings: {
            required: false,
            serializedName: 'properties.caffe2Settings',
            type: {
              name: 'Composite',
              className: 'Caffe2Settings'
            }
          },
          chainerSettings: {
            required: false,
            serializedName: 'properties.chainerSettings',
            type: {
              name: 'Composite',
              className: 'ChainerSettings'
            }
          },
          customToolkitSettings: {
            required: false,
            serializedName: 'properties.customToolkitSettings',
            type: {
              name: 'Composite',
              className: 'CustomToolkitSettings'
            }
          },
          jobPreparation: {
            required: false,
            serializedName: 'properties.jobPreparation',
            type: {
              name: 'Composite',
              className: 'JobPreparation'
            }
          },
          stdOutErrPathPrefix: {
            required: true,
            serializedName: 'properties.stdOutErrPathPrefix',
            type: {
              name: 'String'
            }
          },
          inputDirectories: {
            required: false,
            serializedName: 'properties.inputDirectories',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'InputDirectoryElementType',
                  type: {
                    name: 'Composite',
                    className: 'InputDirectory'
                  }
              }
            }
          },
          outputDirectories: {
            required: false,
            serializedName: 'properties.outputDirectories',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'OutputDirectoryElementType',
                  type: {
                    name: 'Composite',
                    className: 'OutputDirectory'
                  }
              }
            }
          },
          environmentVariables: {
            required: false,
            serializedName: 'properties.environmentVariables',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentVariableElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentVariable'
                  }
              }
            }
          },
          secrets: {
            required: false,
            serializedName: 'properties.secrets',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentVariableWithSecretValueElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentVariableWithSecretValue'
                  }
              }
            }
          },
          constraints: {
            required: false,
            serializedName: 'properties.constraints',
            type: {
              name: 'Composite',
              className: 'JobBasePropertiesConstraints'
            }
          }
        }
      }
    };
  }
}

module.exports = JobCreateParameters;
