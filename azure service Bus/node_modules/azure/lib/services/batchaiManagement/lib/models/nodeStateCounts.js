/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Counts of various compute node states on the cluster.
 *
 */
class NodeStateCounts {
  /**
   * Create a NodeStateCounts.
   * @member {number} idleNodeCount Number of compute nodes in idle state.
   * @member {number} runningNodeCount Number of compute nodes which are
   * running jobs.
   * @member {number} preparingNodeCount Number of compute nodes which are
   * being prepared.
   * @member {number} unusableNodeCount Number of compute nodes which are
   * unusable.
   * @member {number} leavingNodeCount Number of compute nodes which are
   * leaving the cluster.
   */
  constructor() {
  }

  /**
   * Defines the metadata of NodeStateCounts
   *
   * @returns {object} metadata of NodeStateCounts
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NodeStateCounts',
      type: {
        name: 'Composite',
        className: 'NodeStateCounts',
        modelProperties: {
          idleNodeCount: {
            required: true,
            serializedName: 'idleNodeCount',
            type: {
              name: 'Number'
            }
          },
          runningNodeCount: {
            required: true,
            serializedName: 'runningNodeCount',
            type: {
              name: 'Number'
            }
          },
          preparingNodeCount: {
            required: true,
            serializedName: 'preparingNodeCount',
            type: {
              name: 'Number'
            }
          },
          unusableNodeCount: {
            required: true,
            serializedName: 'unusableNodeCount',
            type: {
              name: 'Number'
            }
          },
          leavingNodeCount: {
            required: true,
            serializedName: 'leavingNodeCount',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = NodeStateCounts;
