/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Use this to prepare the VM. NOTE: The volumes specified in mountVolumes are
 * mounted first and then the setupTask is run. Therefore the setup task can
 * use local mountPaths in its execution.
 *
 */
class NodeSetup {
  /**
   * Create a NodeSetup.
   * @member {object} [setupTask] Specifies a setup task which can be used to
   * customize the compute nodes of the cluster. The NodeSetup task runs
   * everytime a VM is rebooted. For that reason the task code needs to be
   * idempotent. Generally it is used to either download static data that is
   * required for all jobs that run on the cluster VMs or to download/install
   * software.
   * @member {string} [setupTask.commandLine]
   * @member {array} [setupTask.environmentVariables]
   * @member {array} [setupTask.secrets] Server will never report values of
   * these variables back.
   * @member {boolean} [setupTask.runElevated] Note. Non-elevated tasks are run
   * under an account added into sudoer list and can perform sudo when
   * required.
   * @member {string} [setupTask.stdOutErrPathPrefix] The prefix of a path
   * where the Batch AI service will upload the stdout and stderr of the setup
   * task.
   * @member {string} [setupTask.stdOutErrPathSuffix] Batch AI creates the
   * setup task output directories under an unique path to avoid conflicts
   * between different clusters. You can concatinate stdOutErrPathPrefix and
   * stdOutErrPathSuffix to get the full path to the output directory.
   * @member {object} [mountVolumes] Information on shared volumes to be used
   * by jobs. Specified mount volumes will be available to all jobs executing
   * on the cluster. The volumes will be mounted at location specified by
   * $AZ_BATCHAI_MOUNT_ROOT environment variable.
   * @member {array} [mountVolumes.azureFileShares] References to Azure File
   * Shares that are to be mounted to the cluster nodes.
   * @member {array} [mountVolumes.azureBlobFileSystems] References to Azure
   * Blob FUSE that are to be mounted to the cluster nodes.
   * @member {array} [mountVolumes.fileServers]
   * @member {array} [mountVolumes.unmanagedFileSystems]
   * @member {object} [performanceCountersSettings] Specifies settings for
   * performance counters collecting and uploading.
   * @member {object} [performanceCountersSettings.appInsightsReference] If
   * provided, Batch AI will upload node performance counters to the
   * corresponding Azure Application Insights account.
   * @member {object}
   * [performanceCountersSettings.appInsightsReference.component]
   * @member {string}
   * [performanceCountersSettings.appInsightsReference.component.id] The ID of
   * the resource
   * @member {string}
   * [performanceCountersSettings.appInsightsReference.instrumentationKey]
   * @member {object}
   * [performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference]
   * Specifies KeyVault Store and Secret which contains Azure Application
   * Insights instrumentation key. One of instumentationKey or
   * instrumentationKeySecretReference must be specified.
   * @member {object}
   * [performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference.sourceVault]
   * @member {string}
   * [performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference.sourceVault.id]
   * The ID of the resource
   * @member {string}
   * [performanceCountersSettings.appInsightsReference.instrumentationKeySecretReference.secretUrl]
   */
  constructor() {
  }

  /**
   * Defines the metadata of NodeSetup
   *
   * @returns {object} metadata of NodeSetup
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NodeSetup',
      type: {
        name: 'Composite',
        className: 'NodeSetup',
        modelProperties: {
          setupTask: {
            required: false,
            serializedName: 'setupTask',
            type: {
              name: 'Composite',
              className: 'SetupTask'
            }
          },
          mountVolumes: {
            required: false,
            serializedName: 'mountVolumes',
            type: {
              name: 'Composite',
              className: 'MountVolumes'
            }
          },
          performanceCountersSettings: {
            required: false,
            serializedName: 'performanceCountersSettings',
            type: {
              name: 'Composite',
              className: 'PerformanceCountersSettings'
            }
          }
        }
      }
    };
  }
}

module.exports = NodeSetup;
