/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Properties of the vault.
 *
 */
class VaultProperties {
  /**
   * Create a VaultProperties.
   * @member {string} [provisioningState] Provisioning State.
   * @member {object} [upgradeDetails]
   * @member {string} [upgradeDetails.operationId] ID of the vault upgrade
   * operation.
   * @member {date} [upgradeDetails.startTimeUtc] UTC time at which the upgrade
   * operation has started.
   * @member {date} [upgradeDetails.lastUpdatedTimeUtc] UTC time at which the
   * upgrade operation status was last updated.
   * @member {date} [upgradeDetails.endTimeUtc] UTC time at which the upgrade
   * operation has ended.
   * @member {string} [upgradeDetails.status] Status of the vault upgrade
   * operation. Possible values include: 'Unknown', 'InProgress', 'Upgraded',
   * 'Failed'
   * @member {string} [upgradeDetails.message] Message to the user containing
   * information about the upgrade operation.
   * @member {string} [upgradeDetails.triggerType] The way the vault
   * upgradation was triggered. Possible values include: 'UserTriggered',
   * 'ForcedUpgrade'
   * @member {string} [upgradeDetails.upgradedResourceId] Resource ID of the
   * upgraded vault.
   * @member {string} [upgradeDetails.previousResourceId] Resource ID of the
   * vault before the upgrade.
   */
  constructor() {
  }

  /**
   * Defines the metadata of VaultProperties
   *
   * @returns {object} metadata of VaultProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VaultProperties',
      type: {
        name: 'Composite',
        className: 'VaultProperties',
        modelProperties: {
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'provisioningState',
            type: {
              name: 'String'
            }
          },
          upgradeDetails: {
            required: false,
            serializedName: 'upgradeDetails',
            type: {
              name: 'Composite',
              className: 'UpgradeDetails'
            }
          }
        }
      }
    };
  }
}

module.exports = VaultProperties;
