/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The X12 agreement content.
 *
 */
class X12AgreementContent {
  /**
   * Create a X12AgreementContent.
   * @member {object} receiveAgreement The X12 one-way receive agreement.
   * @member {object} [receiveAgreement.senderBusinessIdentity] The sender
   * business identity
   * @member {string} [receiveAgreement.senderBusinessIdentity.qualifier] The
   * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
   * @member {string} [receiveAgreement.senderBusinessIdentity.value] The user
   * defined business identity value.
   * @member {object} [receiveAgreement.receiverBusinessIdentity] The receiver
   * business identity
   * @member {string} [receiveAgreement.receiverBusinessIdentity.qualifier] The
   * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
   * @member {string} [receiveAgreement.receiverBusinessIdentity.value] The
   * user defined business identity value.
   * @member {object} [receiveAgreement.protocolSettings] The X12 protocol
   * settings.
   * @member {object} [receiveAgreement.protocolSettings.validationSettings]
   * The X12 validation settings.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.validationSettings.validateCharacterSet]
   * The value indicating whether to validate character set in the message.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
   * The value indicating whether to check for duplicate interchange control
   * number.
   * @member {number}
   * [receiveAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
   * The validity period of interchange control number.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
   * The value indicating whether to check for duplicate group control number.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
   * The value indicating whether to check for duplicate transaction set
   * control number.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.validationSettings.validateEdiTypes]
   * The value indicating whether to Whether to validate EDI types.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.validationSettings.validateXsdTypes]
   * The value indicating whether to Whether to validate XSD types.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
   * The value indicating whether to allow leading and trailing spaces and
   * zeroes.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
   * The value indicating whether to trim leading and trailing spaces and
   * zeroes.
   * @member {string}
   * [receiveAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
   * The trailing separator policy. Possible values include: 'NotSpecified',
   * 'NotAllowed', 'Optional', 'Mandatory'
   * @member {object} [receiveAgreement.protocolSettings.framingSettings] The
   * X12 framing settings.
   * @member {number}
   * [receiveAgreement.protocolSettings.framingSettings.dataElementSeparator]
   * The data element separator.
   * @member {number}
   * [receiveAgreement.protocolSettings.framingSettings.componentSeparator] The
   * component separator.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.framingSettings.replaceSeparatorsInPayload]
   * The value indicating whether to replace separators in payload.
   * @member {number}
   * [receiveAgreement.protocolSettings.framingSettings.replaceCharacter] The
   * replacement character.
   * @member {number}
   * [receiveAgreement.protocolSettings.framingSettings.segmentTerminator] The
   * segment terminator.
   * @member {string}
   * [receiveAgreement.protocolSettings.framingSettings.characterSet] The X12
   * character set. Possible values include: 'NotSpecified', 'Basic',
   * 'Extended', 'UTF8'
   * @member {string}
   * [receiveAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
   * The segment terminator suffix. Possible values include: 'NotSpecified',
   * 'None', 'CR', 'LF', 'CRLF'
   * @member {object} [receiveAgreement.protocolSettings.envelopeSettings] The
   * X12 envelope settings.
   * @member {number}
   * [receiveAgreement.protocolSettings.envelopeSettings.controlStandardsId]
   * The controls standards id.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.envelopeSettings.useControlStandardsIdAsRepetitionCharacter]
   * The value indicating whether to use control standards id as repetition
   * character.
   * @member {string}
   * [receiveAgreement.protocolSettings.envelopeSettings.senderApplicationId]
   * The sender application id.
   * @member {string}
   * [receiveAgreement.protocolSettings.envelopeSettings.receiverApplicationId]
   * The receiver application id.
   * @member {string}
   * [receiveAgreement.protocolSettings.envelopeSettings.controlVersionNumber]
   * The control version number.
   * @member {number}
   * [receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
   * The interchange  control number lower bound.
   * @member {number}
   * [receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
   * The interchange  control number upper bound.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
   * The value indicating whether to rollover interchange control number.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
   * The value indicating whether to enable default group headers.
   * @member {string}
   * [receiveAgreement.protocolSettings.envelopeSettings.functionalGroupId] The
   * functional group id.
   * @member {number}
   * [receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
   * The group control number lower bound.
   * @member {number}
   * [receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
   * The group control number upper bound.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
   * The value indicating whether to rollover group control number.
   * @member {string}
   * [receiveAgreement.protocolSettings.envelopeSettings.groupHeaderAgencyCode]
   * The group header agency code.
   * @member {string}
   * [receiveAgreement.protocolSettings.envelopeSettings.groupHeaderVersion]
   * The group header version.
   * @member {number}
   * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
   * The transaction set control number lower bound.
   * @member {number}
   * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
   * The transaction set control number upper bound.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
   * The value indicating whether to rollover transaction set control number.
   * @member {string}
   * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
   * The transaction set control number prefix.
   * @member {string}
   * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
   * The transaction set control number suffix.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
   * The value indicating whether to overwrite existing transaction set control
   * number.
   * @member {string}
   * [receiveAgreement.protocolSettings.envelopeSettings.groupHeaderDateFormat]
   * The group header date format. Possible values include: 'NotSpecified',
   * 'CCYYMMDD', 'YYMMDD'
   * @member {string}
   * [receiveAgreement.protocolSettings.envelopeSettings.groupHeaderTimeFormat]
   * The group header time format. Possible values include: 'NotSpecified',
   * 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
   * @member {string}
   * [receiveAgreement.protocolSettings.envelopeSettings.usageIndicator] The
   * usage indicator. Possible values include: 'NotSpecified', 'Test',
   * 'Information', 'Production'
   * @member {object}
   * [receiveAgreement.protocolSettings.acknowledgementSettings] The X12
   * acknowledgment settings.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
   * The value indicating whether technical acknowledgement is needed.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
   * The value indicating whether to batch the technical acknowledgements.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
   * The value indicating whether functional acknowledgement is needed.
   * @member {string}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.functionalAcknowledgementVersion]
   * The functional acknowledgement version.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
   * The value indicating whether to batch functional acknowledgements.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.needImplementationAcknowledgement]
   * The value indicating whether implementation acknowledgement is needed.
   * @member {string}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.implementationAcknowledgementVersion]
   * The implementation acknowledgement version.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.batchImplementationAcknowledgements]
   * The value indicating whether to batch implementation acknowledgements.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
   * The value indicating whether a loop is needed for valid messages.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
   * The value indicating whether to send synchronous acknowledgement.
   * @member {string}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
   * The acknowledgement control number prefix.
   * @member {string}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
   * The acknowledgement control number suffix.
   * @member {number}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
   * The acknowledgement control number lower bound.
   * @member {number}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
   * The acknowledgement control number upper bound.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
   * The value indicating whether to rollover acknowledgement control number.
   * @member {object} [receiveAgreement.protocolSettings.messageFilter] The X12
   * message filter.
   * @member {string}
   * [receiveAgreement.protocolSettings.messageFilter.messageFilterType] The
   * message filter type. Possible values include: 'NotSpecified', 'Include',
   * 'Exclude'
   * @member {object} [receiveAgreement.protocolSettings.securitySettings] The
   * X12 security settings.
   * @member {string}
   * [receiveAgreement.protocolSettings.securitySettings.authorizationQualifier]
   * The authorization qualifier.
   * @member {string}
   * [receiveAgreement.protocolSettings.securitySettings.authorizationValue]
   * The authorization value.
   * @member {string}
   * [receiveAgreement.protocolSettings.securitySettings.securityQualifier] The
   * security qualifier.
   * @member {string}
   * [receiveAgreement.protocolSettings.securitySettings.passwordValue] The
   * password value.
   * @member {object} [receiveAgreement.protocolSettings.processingSettings]
   * The X12 processing settings.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.processingSettings.maskSecurityInfo]
   * The value indicating whether to mask security information.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.processingSettings.convertImpliedDecimal]
   * The value indicating whether to convert numerical type to implied decimal.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.processingSettings.preserveInterchange]
   * The value indicating whether to preserve interchange.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
   * The value indicating whether to suspend interchange on error.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
   * The value indicating whether to create empty xml tags for trailing
   * separators.
   * @member {boolean}
   * [receiveAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
   * The value indicating whether to use dot as decimal separator.
   * @member {array} [receiveAgreement.protocolSettings.envelopeOverrides] The
   * X12 envelope override settings.
   * @member {array} [receiveAgreement.protocolSettings.validationOverrides]
   * The X12 validation override settings.
   * @member {array} [receiveAgreement.protocolSettings.messageFilterList] The
   * X12 message filter list.
   * @member {array} [receiveAgreement.protocolSettings.schemaReferences] The
   * X12 schema references.
   * @member {array} [receiveAgreement.protocolSettings.x12DelimiterOverrides]
   * The X12 delimiter override settings.
   * @member {object} sendAgreement The X12 one-way send agreement.
   * @member {object} [sendAgreement.senderBusinessIdentity] The sender
   * business identity
   * @member {string} [sendAgreement.senderBusinessIdentity.qualifier] The
   * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
   * @member {string} [sendAgreement.senderBusinessIdentity.value] The user
   * defined business identity value.
   * @member {object} [sendAgreement.receiverBusinessIdentity] The receiver
   * business identity
   * @member {string} [sendAgreement.receiverBusinessIdentity.qualifier] The
   * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
   * @member {string} [sendAgreement.receiverBusinessIdentity.value] The user
   * defined business identity value.
   * @member {object} [sendAgreement.protocolSettings] The X12 protocol
   * settings.
   * @member {object} [sendAgreement.protocolSettings.validationSettings] The
   * X12 validation settings.
   * @member {boolean}
   * [sendAgreement.protocolSettings.validationSettings.validateCharacterSet]
   * The value indicating whether to validate character set in the message.
   * @member {boolean}
   * [sendAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
   * The value indicating whether to check for duplicate interchange control
   * number.
   * @member {number}
   * [sendAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
   * The validity period of interchange control number.
   * @member {boolean}
   * [sendAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
   * The value indicating whether to check for duplicate group control number.
   * @member {boolean}
   * [sendAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
   * The value indicating whether to check for duplicate transaction set
   * control number.
   * @member {boolean}
   * [sendAgreement.protocolSettings.validationSettings.validateEdiTypes] The
   * value indicating whether to Whether to validate EDI types.
   * @member {boolean}
   * [sendAgreement.protocolSettings.validationSettings.validateXsdTypes] The
   * value indicating whether to Whether to validate XSD types.
   * @member {boolean}
   * [sendAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
   * The value indicating whether to allow leading and trailing spaces and
   * zeroes.
   * @member {boolean}
   * [sendAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
   * The value indicating whether to trim leading and trailing spaces and
   * zeroes.
   * @member {string}
   * [sendAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
   * The trailing separator policy. Possible values include: 'NotSpecified',
   * 'NotAllowed', 'Optional', 'Mandatory'
   * @member {object} [sendAgreement.protocolSettings.framingSettings] The X12
   * framing settings.
   * @member {number}
   * [sendAgreement.protocolSettings.framingSettings.dataElementSeparator] The
   * data element separator.
   * @member {number}
   * [sendAgreement.protocolSettings.framingSettings.componentSeparator] The
   * component separator.
   * @member {boolean}
   * [sendAgreement.protocolSettings.framingSettings.replaceSeparatorsInPayload]
   * The value indicating whether to replace separators in payload.
   * @member {number}
   * [sendAgreement.protocolSettings.framingSettings.replaceCharacter] The
   * replacement character.
   * @member {number}
   * [sendAgreement.protocolSettings.framingSettings.segmentTerminator] The
   * segment terminator.
   * @member {string}
   * [sendAgreement.protocolSettings.framingSettings.characterSet] The X12
   * character set. Possible values include: 'NotSpecified', 'Basic',
   * 'Extended', 'UTF8'
   * @member {string}
   * [sendAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
   * The segment terminator suffix. Possible values include: 'NotSpecified',
   * 'None', 'CR', 'LF', 'CRLF'
   * @member {object} [sendAgreement.protocolSettings.envelopeSettings] The X12
   * envelope settings.
   * @member {number}
   * [sendAgreement.protocolSettings.envelopeSettings.controlStandardsId] The
   * controls standards id.
   * @member {boolean}
   * [sendAgreement.protocolSettings.envelopeSettings.useControlStandardsIdAsRepetitionCharacter]
   * The value indicating whether to use control standards id as repetition
   * character.
   * @member {string}
   * [sendAgreement.protocolSettings.envelopeSettings.senderApplicationId] The
   * sender application id.
   * @member {string}
   * [sendAgreement.protocolSettings.envelopeSettings.receiverApplicationId]
   * The receiver application id.
   * @member {string}
   * [sendAgreement.protocolSettings.envelopeSettings.controlVersionNumber] The
   * control version number.
   * @member {number}
   * [sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
   * The interchange  control number lower bound.
   * @member {number}
   * [sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
   * The interchange  control number upper bound.
   * @member {boolean}
   * [sendAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
   * The value indicating whether to rollover interchange control number.
   * @member {boolean}
   * [sendAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
   * The value indicating whether to enable default group headers.
   * @member {string}
   * [sendAgreement.protocolSettings.envelopeSettings.functionalGroupId] The
   * functional group id.
   * @member {number}
   * [sendAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
   * The group control number lower bound.
   * @member {number}
   * [sendAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
   * The group control number upper bound.
   * @member {boolean}
   * [sendAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
   * The value indicating whether to rollover group control number.
   * @member {string}
   * [sendAgreement.protocolSettings.envelopeSettings.groupHeaderAgencyCode]
   * The group header agency code.
   * @member {string}
   * [sendAgreement.protocolSettings.envelopeSettings.groupHeaderVersion] The
   * group header version.
   * @member {number}
   * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
   * The transaction set control number lower bound.
   * @member {number}
   * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
   * The transaction set control number upper bound.
   * @member {boolean}
   * [sendAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
   * The value indicating whether to rollover transaction set control number.
   * @member {string}
   * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
   * The transaction set control number prefix.
   * @member {string}
   * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
   * The transaction set control number suffix.
   * @member {boolean}
   * [sendAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
   * The value indicating whether to overwrite existing transaction set control
   * number.
   * @member {string}
   * [sendAgreement.protocolSettings.envelopeSettings.groupHeaderDateFormat]
   * The group header date format. Possible values include: 'NotSpecified',
   * 'CCYYMMDD', 'YYMMDD'
   * @member {string}
   * [sendAgreement.protocolSettings.envelopeSettings.groupHeaderTimeFormat]
   * The group header time format. Possible values include: 'NotSpecified',
   * 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
   * @member {string}
   * [sendAgreement.protocolSettings.envelopeSettings.usageIndicator] The usage
   * indicator. Possible values include: 'NotSpecified', 'Test', 'Information',
   * 'Production'
   * @member {object} [sendAgreement.protocolSettings.acknowledgementSettings]
   * The X12 acknowledgment settings.
   * @member {boolean}
   * [sendAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
   * The value indicating whether technical acknowledgement is needed.
   * @member {boolean}
   * [sendAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
   * The value indicating whether to batch the technical acknowledgements.
   * @member {boolean}
   * [sendAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
   * The value indicating whether functional acknowledgement is needed.
   * @member {string}
   * [sendAgreement.protocolSettings.acknowledgementSettings.functionalAcknowledgementVersion]
   * The functional acknowledgement version.
   * @member {boolean}
   * [sendAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
   * The value indicating whether to batch functional acknowledgements.
   * @member {boolean}
   * [sendAgreement.protocolSettings.acknowledgementSettings.needImplementationAcknowledgement]
   * The value indicating whether implementation acknowledgement is needed.
   * @member {string}
   * [sendAgreement.protocolSettings.acknowledgementSettings.implementationAcknowledgementVersion]
   * The implementation acknowledgement version.
   * @member {boolean}
   * [sendAgreement.protocolSettings.acknowledgementSettings.batchImplementationAcknowledgements]
   * The value indicating whether to batch implementation acknowledgements.
   * @member {boolean}
   * [sendAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
   * The value indicating whether a loop is needed for valid messages.
   * @member {boolean}
   * [sendAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
   * The value indicating whether to send synchronous acknowledgement.
   * @member {string}
   * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
   * The acknowledgement control number prefix.
   * @member {string}
   * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
   * The acknowledgement control number suffix.
   * @member {number}
   * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
   * The acknowledgement control number lower bound.
   * @member {number}
   * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
   * The acknowledgement control number upper bound.
   * @member {boolean}
   * [sendAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
   * The value indicating whether to rollover acknowledgement control number.
   * @member {object} [sendAgreement.protocolSettings.messageFilter] The X12
   * message filter.
   * @member {string}
   * [sendAgreement.protocolSettings.messageFilter.messageFilterType] The
   * message filter type. Possible values include: 'NotSpecified', 'Include',
   * 'Exclude'
   * @member {object} [sendAgreement.protocolSettings.securitySettings] The X12
   * security settings.
   * @member {string}
   * [sendAgreement.protocolSettings.securitySettings.authorizationQualifier]
   * The authorization qualifier.
   * @member {string}
   * [sendAgreement.protocolSettings.securitySettings.authorizationValue] The
   * authorization value.
   * @member {string}
   * [sendAgreement.protocolSettings.securitySettings.securityQualifier] The
   * security qualifier.
   * @member {string}
   * [sendAgreement.protocolSettings.securitySettings.passwordValue] The
   * password value.
   * @member {object} [sendAgreement.protocolSettings.processingSettings] The
   * X12 processing settings.
   * @member {boolean}
   * [sendAgreement.protocolSettings.processingSettings.maskSecurityInfo] The
   * value indicating whether to mask security information.
   * @member {boolean}
   * [sendAgreement.protocolSettings.processingSettings.convertImpliedDecimal]
   * The value indicating whether to convert numerical type to implied decimal.
   * @member {boolean}
   * [sendAgreement.protocolSettings.processingSettings.preserveInterchange]
   * The value indicating whether to preserve interchange.
   * @member {boolean}
   * [sendAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
   * The value indicating whether to suspend interchange on error.
   * @member {boolean}
   * [sendAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
   * The value indicating whether to create empty xml tags for trailing
   * separators.
   * @member {boolean}
   * [sendAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
   * The value indicating whether to use dot as decimal separator.
   * @member {array} [sendAgreement.protocolSettings.envelopeOverrides] The X12
   * envelope override settings.
   * @member {array} [sendAgreement.protocolSettings.validationOverrides] The
   * X12 validation override settings.
   * @member {array} [sendAgreement.protocolSettings.messageFilterList] The X12
   * message filter list.
   * @member {array} [sendAgreement.protocolSettings.schemaReferences] The X12
   * schema references.
   * @member {array} [sendAgreement.protocolSettings.x12DelimiterOverrides] The
   * X12 delimiter override settings.
   */
  constructor() {
  }

  /**
   * Defines the metadata of X12AgreementContent
   *
   * @returns {object} metadata of X12AgreementContent
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'X12AgreementContent',
      type: {
        name: 'Composite',
        className: 'X12AgreementContent',
        modelProperties: {
          receiveAgreement: {
            required: true,
            serializedName: 'receiveAgreement',
            type: {
              name: 'Composite',
              className: 'X12OneWayAgreement'
            }
          },
          sendAgreement: {
            required: true,
            serializedName: 'sendAgreement',
            type: {
              name: 'Composite',
              className: 'X12OneWayAgreement'
            }
          }
        }
      }
    };
  }
}

module.exports = X12AgreementContent;
