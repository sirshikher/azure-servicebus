/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The Edifact agreement protocol settings.
 *
 */
class EdifactProtocolSettings {
  /**
   * Create a EdifactProtocolSettings.
   * @member {object} validationSettings The EDIFACT validation settings.
   * @member {boolean} [validationSettings.validateCharacterSet] The value
   * indicating whether to validate character set in the message.
   * @member {boolean}
   * [validationSettings.checkDuplicateInterchangeControlNumber] The value
   * indicating whether to check for duplicate interchange control number.
   * @member {number} [validationSettings.interchangeControlNumberValidityDays]
   * The validity period of interchange control number.
   * @member {boolean} [validationSettings.checkDuplicateGroupControlNumber]
   * The value indicating whether to check for duplicate group control number.
   * @member {boolean}
   * [validationSettings.checkDuplicateTransactionSetControlNumber] The value
   * indicating whether to check for duplicate transaction set control number.
   * @member {boolean} [validationSettings.validateEdiTypes] The value
   * indicating whether to Whether to validate EDI types.
   * @member {boolean} [validationSettings.validateXsdTypes] The value
   * indicating whether to Whether to validate XSD types.
   * @member {boolean}
   * [validationSettings.allowLeadingAndTrailingSpacesAndZeroes] The value
   * indicating whether to allow leading and trailing spaces and zeroes.
   * @member {boolean}
   * [validationSettings.trimLeadingAndTrailingSpacesAndZeroes] The value
   * indicating whether to trim leading and trailing spaces and zeroes.
   * @member {string} [validationSettings.trailingSeparatorPolicy] The trailing
   * separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
   * 'Optional', 'Mandatory'
   * @member {object} framingSettings The EDIFACT framing settings.
   * @member {string} [framingSettings.serviceCodeListDirectoryVersion] The
   * service code list directory version.
   * @member {string} [framingSettings.characterEncoding] The character
   * encoding.
   * @member {number} [framingSettings.protocolVersion] The protocol version.
   * @member {number} [framingSettings.dataElementSeparator] The data element
   * separator.
   * @member {number} [framingSettings.componentSeparator] The component
   * separator.
   * @member {number} [framingSettings.segmentTerminator] The segment
   * terminator.
   * @member {number} [framingSettings.releaseIndicator] The release indicator.
   * @member {number} [framingSettings.repetitionSeparator] The repetition
   * separator.
   * @member {string} [framingSettings.characterSet] The EDIFACT frame setting
   * characterSet. Possible values include: 'NotSpecified', 'UNOB', 'UNOA',
   * 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ', 'UNOK',
   * 'UNOX', 'UNOY', 'KECA'
   * @member {string} [framingSettings.decimalPointIndicator] The EDIFACT frame
   * setting decimal indicator. Possible values include: 'NotSpecified',
   * 'Comma', 'Decimal'
   * @member {string} [framingSettings.segmentTerminatorSuffix] The EDIFACT
   * frame setting segment terminator suffix. Possible values include:
   * 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
   * @member {object} envelopeSettings The EDIFACT envelope settings.
   * @member {string} [envelopeSettings.groupAssociationAssignedCode] The group
   * association assigned code.
   * @member {string} [envelopeSettings.communicationAgreementId] The
   * communication agreement id.
   * @member {boolean} [envelopeSettings.applyDelimiterStringAdvice] The value
   * indicating whether to apply delimiter string advice.
   * @member {boolean} [envelopeSettings.createGroupingSegments] The value
   * indicating whether to create grouping segments.
   * @member {boolean} [envelopeSettings.enableDefaultGroupHeaders] The value
   * indicating whether to enable default group headers.
   * @member {string} [envelopeSettings.recipientReferencePasswordValue] The
   * recipient reference password value.
   * @member {string} [envelopeSettings.recipientReferencePasswordQualifier]
   * The recipient reference password qualifier.
   * @member {string} [envelopeSettings.applicationReferenceId] The application
   * reference id.
   * @member {string} [envelopeSettings.processingPriorityCode] The processing
   * priority code.
   * @member {number} [envelopeSettings.interchangeControlNumberLowerBound] The
   * interchange control number lower bound.
   * @member {number} [envelopeSettings.interchangeControlNumberUpperBound] The
   * interchange control number upper bound.
   * @member {boolean} [envelopeSettings.rolloverInterchangeControlNumber] The
   * value indicating whether to rollover interchange control number.
   * @member {string} [envelopeSettings.interchangeControlNumberPrefix] The
   * interchange control number prefix.
   * @member {string} [envelopeSettings.interchangeControlNumberSuffix] The
   * interchange control number suffix.
   * @member {string} [envelopeSettings.senderReverseRoutingAddress] The sender
   * reverse routing address.
   * @member {string} [envelopeSettings.receiverReverseRoutingAddress] The
   * receiver reverse routing address.
   * @member {string} [envelopeSettings.functionalGroupId] The functional group
   * id.
   * @member {string} [envelopeSettings.groupControllingAgencyCode] The group
   * controlling agency code.
   * @member {string} [envelopeSettings.groupMessageVersion] The group message
   * version.
   * @member {string} [envelopeSettings.groupMessageRelease] The group message
   * release.
   * @member {number} [envelopeSettings.groupControlNumberLowerBound] The group
   * control number lower bound.
   * @member {number} [envelopeSettings.groupControlNumberUpperBound] The group
   * control number upper bound.
   * @member {boolean} [envelopeSettings.rolloverGroupControlNumber] The value
   * indicating whether to rollover group control number.
   * @member {string} [envelopeSettings.groupControlNumberPrefix] The group
   * control number prefix.
   * @member {string} [envelopeSettings.groupControlNumberSuffix] The group
   * control number suffix.
   * @member {string} [envelopeSettings.groupApplicationReceiverQualifier] The
   * group application receiver qualifier.
   * @member {string} [envelopeSettings.groupApplicationReceiverId] The group
   * application receiver id.
   * @member {string} [envelopeSettings.groupApplicationSenderQualifier] The
   * group application sender qualifier.
   * @member {string} [envelopeSettings.groupApplicationSenderId] The group
   * application sender id.
   * @member {string} [envelopeSettings.groupApplicationPassword] The group
   * application password.
   * @member {boolean}
   * [envelopeSettings.overwriteExistingTransactionSetControlNumber] The value
   * indicating whether to overwrite existing transaction set control number.
   * @member {string} [envelopeSettings.transactionSetControlNumberPrefix] The
   * transaction set control number prefix.
   * @member {string} [envelopeSettings.transactionSetControlNumberSuffix] The
   * transaction set control number suffix.
   * @member {number} [envelopeSettings.transactionSetControlNumberLowerBound]
   * The transaction set control number lower bound.
   * @member {number} [envelopeSettings.transactionSetControlNumberUpperBound]
   * The transaction set control number upper bound.
   * @member {boolean} [envelopeSettings.rolloverTransactionSetControlNumber]
   * The value indicating whether to rollover transaction set control number.
   * @member {boolean} [envelopeSettings.isTestInterchange] The value
   * indicating whether the message is a test interchange.
   * @member {string} [envelopeSettings.senderInternalIdentification] The
   * sender internal identification.
   * @member {string} [envelopeSettings.senderInternalSubIdentification] The
   * sender internal sub identification.
   * @member {string} [envelopeSettings.receiverInternalIdentification] The
   * receiver internal identification.
   * @member {string} [envelopeSettings.receiverInternalSubIdentification] The
   * receiver internal sub identification.
   * @member {object} acknowledgementSettings The EDIFACT acknowledgement
   * settings.
   * @member {boolean} [acknowledgementSettings.needTechnicalAcknowledgement]
   * The value indicating whether technical acknowledgement is needed.
   * @member {boolean} [acknowledgementSettings.batchTechnicalAcknowledgements]
   * The value indicating whether to batch the technical acknowledgements.
   * @member {boolean} [acknowledgementSettings.needFunctionalAcknowledgement]
   * The value indicating whether functional acknowledgement is needed.
   * @member {boolean}
   * [acknowledgementSettings.batchFunctionalAcknowledgements] The value
   * indicating whether to batch functional acknowledgements.
   * @member {boolean} [acknowledgementSettings.needLoopForValidMessages] The
   * value indicating whether a loop is needed for valid messages.
   * @member {boolean} [acknowledgementSettings.sendSynchronousAcknowledgement]
   * The value indicating whether to send synchronous acknowledgement.
   * @member {string}
   * [acknowledgementSettings.acknowledgementControlNumberPrefix] The
   * acknowledgement control number prefix.
   * @member {string}
   * [acknowledgementSettings.acknowledgementControlNumberSuffix] The
   * acknowledgement control number suffix.
   * @member {number}
   * [acknowledgementSettings.acknowledgementControlNumberLowerBound] The
   * acknowledgement control number lower bound.
   * @member {number}
   * [acknowledgementSettings.acknowledgementControlNumberUpperBound] The
   * acknowledgement control number upper bound.
   * @member {boolean}
   * [acknowledgementSettings.rolloverAcknowledgementControlNumber] The value
   * indicating whether to rollover acknowledgement control number.
   * @member {object} messageFilter The EDIFACT message filter.
   * @member {string} [messageFilter.messageFilterType] The message filter
   * type. Possible values include: 'NotSpecified', 'Include', 'Exclude'
   * @member {object} processingSettings The EDIFACT processing Settings.
   * @member {boolean} [processingSettings.maskSecurityInfo] The value
   * indicating whether to mask security information.
   * @member {boolean} [processingSettings.preserveInterchange] The value
   * indicating whether to preserve interchange.
   * @member {boolean} [processingSettings.suspendInterchangeOnError] The value
   * indicating whether to suspend interchange on error.
   * @member {boolean}
   * [processingSettings.createEmptyXmlTagsForTrailingSeparators] The value
   * indicating whether to create empty xml tags for trailing separators.
   * @member {boolean} [processingSettings.useDotAsDecimalSeparator] The value
   * indicating whether to use dot as decimal separator.
   * @member {array} [envelopeOverrides] The EDIFACT envelope override
   * settings.
   * @member {array} [messageFilterList] The EDIFACT message filter list.
   * @member {array} schemaReferences The EDIFACT schema references.
   * @member {array} [validationOverrides] The EDIFACT validation override
   * settings.
   * @member {array} [edifactDelimiterOverrides] The EDIFACT delimiter override
   * settings.
   */
  constructor() {
  }

  /**
   * Defines the metadata of EdifactProtocolSettings
   *
   * @returns {object} metadata of EdifactProtocolSettings
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'EdifactProtocolSettings',
      type: {
        name: 'Composite',
        className: 'EdifactProtocolSettings',
        modelProperties: {
          validationSettings: {
            required: true,
            serializedName: 'validationSettings',
            type: {
              name: 'Composite',
              className: 'EdifactValidationSettings'
            }
          },
          framingSettings: {
            required: true,
            serializedName: 'framingSettings',
            type: {
              name: 'Composite',
              className: 'EdifactFramingSettings'
            }
          },
          envelopeSettings: {
            required: true,
            serializedName: 'envelopeSettings',
            type: {
              name: 'Composite',
              className: 'EdifactEnvelopeSettings'
            }
          },
          acknowledgementSettings: {
            required: true,
            serializedName: 'acknowledgementSettings',
            type: {
              name: 'Composite',
              className: 'EdifactAcknowledgementSettings'
            }
          },
          messageFilter: {
            required: true,
            serializedName: 'messageFilter',
            type: {
              name: 'Composite',
              className: 'EdifactMessageFilter'
            }
          },
          processingSettings: {
            required: true,
            serializedName: 'processingSettings',
            type: {
              name: 'Composite',
              className: 'EdifactProcessingSettings'
            }
          },
          envelopeOverrides: {
            required: false,
            serializedName: 'envelopeOverrides',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EdifactEnvelopeOverrideElementType',
                  type: {
                    name: 'Composite',
                    className: 'EdifactEnvelopeOverride'
                  }
              }
            }
          },
          messageFilterList: {
            required: false,
            serializedName: 'messageFilterList',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EdifactMessageIdentifierElementType',
                  type: {
                    name: 'Composite',
                    className: 'EdifactMessageIdentifier'
                  }
              }
            }
          },
          schemaReferences: {
            required: true,
            serializedName: 'schemaReferences',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EdifactSchemaReferenceElementType',
                  type: {
                    name: 'Composite',
                    className: 'EdifactSchemaReference'
                  }
              }
            }
          },
          validationOverrides: {
            required: false,
            serializedName: 'validationOverrides',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EdifactValidationOverrideElementType',
                  type: {
                    name: 'Composite',
                    className: 'EdifactValidationOverride'
                  }
              }
            }
          },
          edifactDelimiterOverrides: {
            required: false,
            serializedName: 'edifactDelimiterOverrides',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EdifactDelimiterOverrideElementType',
                  type: {
                    name: 'Composite',
                    className: 'EdifactDelimiterOverride'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = EdifactProtocolSettings;
