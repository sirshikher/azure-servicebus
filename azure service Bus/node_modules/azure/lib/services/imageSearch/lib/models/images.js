/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Defines an image answer
 *
 * @extends models['SearchResultsAnswer']
 */
class Images extends models['SearchResultsAnswer'] {
  /**
   * Create a Images.
   * @member {number} [nextOffset] Used as part of deduping. Tells client the
   * next offset that client should use in the next pagination request
   * @member {array} value A list of image objects that are relevant to the
   * query. If there are no results, the List is empty.
   * @member {array} [queryExpansions] A list of expanded queries that narrows
   * the original query. For example, if the query was Microsoft Surface, the
   * expanded queries might be: Microsoft Surface Pro 3, Microsoft Surface RT,
   * Microsoft Surface Phone, and Microsoft Surface Hub.
   * @member {array} [pivotSuggestions] A list of segments in the original
   * query. For example, if the query was Red Flowers, Bing might segment the
   * query into Red and Flowers. The Flowers pivot may contain query
   * suggestions such as Red Peonies and Red Daisies, and the Red pivot may
   * contain query suggestions such as Green Flowers and Yellow Flowers.
   * @member {array} [similarTerms] A list of terms that are similar in meaning
   * to the user's query term.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Images
   *
   * @returns {object} metadata of Images
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Images',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: '_type',
          clientName: '_type'
        },
        uberParent: 'ResponseBase',
        className: 'Images',
        modelProperties: {
          _type: {
            required: true,
            serializedName: '_type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          readLink: {
            required: false,
            readOnly: true,
            serializedName: 'readLink',
            type: {
              name: 'String'
            }
          },
          webSearchUrl: {
            required: false,
            readOnly: true,
            serializedName: 'webSearchUrl',
            type: {
              name: 'String'
            }
          },
          totalEstimatedMatches: {
            required: false,
            readOnly: true,
            serializedName: 'totalEstimatedMatches',
            type: {
              name: 'Number'
            }
          },
          nextOffset: {
            required: false,
            readOnly: true,
            serializedName: 'nextOffset',
            type: {
              name: 'Number'
            }
          },
          value: {
            required: true,
            serializedName: 'value',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ImageObjectElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: '_type',
                      clientName: '_type'
                    },
                    uberParent: 'ResponseBase',
                    className: 'ImageObject'
                  }
              }
            }
          },
          queryExpansions: {
            required: false,
            readOnly: true,
            serializedName: 'queryExpansions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'QueryElementType',
                  type: {
                    name: 'Composite',
                    className: 'Query'
                  }
              }
            }
          },
          pivotSuggestions: {
            required: false,
            readOnly: true,
            serializedName: 'pivotSuggestions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PivotSuggestionsElementType',
                  type: {
                    name: 'Composite',
                    className: 'PivotSuggestions'
                  }
              }
            }
          },
          similarTerms: {
            required: false,
            readOnly: true,
            serializedName: 'similarTerms',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'QueryElementType',
                  type: {
                    name: 'Composite',
                    className: 'Query'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Images;
