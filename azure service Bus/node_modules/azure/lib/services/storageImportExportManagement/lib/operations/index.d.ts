/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Jobs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageImportExportManagementClient.
 */
export interface Jobs {


    /**
     * Gets all the active and completed import/export jobs in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] An integer value that specifies how many jobs
     * at most should be returned. The value cannot exceed 100.
     *
     * @param {string} [options.filter] Can be used to restrict the results to
     * certain conditions. The following possible values can be used with $filter:
     * 1) $filter=type eq '{type}'; 2) $filter=trackingnumber eq
     * '{trackingnumber}'; 3) $filter=state eq '{state}'; 4) Logical and
     * combination of the above, for example: $filter=type eq 'Import' and state eq
     * 'Transferring'. Valid values for type are Import and Export. Valid values
     * for state are Creating, Shipping, Received, Transferring, Packaging, Closed,
     * and Completed.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobListResult>>;

    /**
     * Gets all the active and completed import/export jobs in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] An integer value that specifies how many jobs
     * at most should be returned. The value cannot exceed 100.
     *
     * @param {string} [options.filter] Can be used to restrict the results to
     * certain conditions. The following possible values can be used with $filter:
     * 1) $filter=type eq '{type}'; 2) $filter=trackingnumber eq
     * '{trackingnumber}'; 3) $filter=state eq '{state}'; 4) Logical and
     * combination of the above, for example: $filter=type eq 'Import' and state eq
     * 'Transferring'. Valid values for type are Import and Export. Valid values
     * for state are Creating, Shipping, Received, Transferring, Packaging, Closed,
     * and Completed.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobListResult>;
    list(callback: ServiceCallback<models.JobListResult>): void;
    list(options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobListResult>): void;


    /**
     * Returns all active and completed import/export jobs in a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] An integer value that specifies how many jobs
     * at most should be returned. The value cannot exceed 100.
     *
     * @param {string} [options.filter] Can be used to restrict the results to
     * certain conditions. The following possible values can be used with $filter:
     * 1) $filter=type eq '{type}'; 2) $filter=trackingnumber eq
     * '{trackingnumber}'; 3) $filter=state eq '{state}'; 4) Logical and
     * combination of the above, for example: $filter=type eq 'Import' and state eq
     * 'Transferring'. Valid values for type are Import and Export. Valid values
     * for state are Creating, Shipping, Received, Transferring, Packaging, Closed,
     * and Completed.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobListResult>>;

    /**
     * Returns all active and completed import/export jobs in a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] An integer value that specifies how many jobs
     * at most should be returned. The value cannot exceed 100.
     *
     * @param {string} [options.filter] Can be used to restrict the results to
     * certain conditions. The following possible values can be used with $filter:
     * 1) $filter=type eq '{type}'; 2) $filter=trackingnumber eq
     * '{trackingnumber}'; 3) $filter=state eq '{state}'; 4) Logical and
     * combination of the above, for example: $filter=type eq 'Import' and state eq
     * 'Transferring'. Valid values for type are Import and Export. Valid values
     * for state are Creating, Shipping, Received, Transferring, Packaging, Closed,
     * and Completed.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.JobListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobListResult>): void;


    /**
     * Gets information about an existing import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * Gets information about an existing import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    get(resourceGroupName: string, jobName: string, callback: ServiceCallback<models.Job>): void;
    get(resourceGroupName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * Updates specific properties of the import/export job. You can call this
     * operation to notify the Import/Export service that the hard drives
     * comprising the import or export job have been shipped to the Microsoft data
     * center. It can also be used to cancel an existing job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {object} jobProperties Import/export job properties that need to be
     * updated.
     *
     * @param {object} [jobProperties.tags]
     *
     * @param {boolean} [jobProperties.cancelRequested] If specified, the value
     * must be true. The service will attempt to cancel the job.
     *
     * @param {string} [jobProperties.state] If specified, the value must be
     * Shipping, which tells the Import/Export service that the package for the job
     * has been shipped. The ReturnAddress and DeliveryPackage properties must have
     * been set either in this request or in a previous request, otherwise the
     * request will fail. Possible values include: 'Shipping'
     *
     * @param {object} [jobProperties.returnAddress] Specifies the return address
     * information for the job.
     *
     * @param {string} jobProperties.returnAddress.recipientName The name of the
     * recipient who will receive the hard drives when they are returned.
     *
     * @param {string} jobProperties.returnAddress.streetAddress1 The first line of
     * the street address to use when returning the drives.
     *
     * @param {string} [jobProperties.returnAddress.streetAddress2] The second line
     * of the street address to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.city The city name to use when
     * returning the drives.
     *
     * @param {string} [jobProperties.returnAddress.stateOrProvince] The state or
     * province to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.postalCode The postal code to
     * use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.countryOrRegion The country or
     * region to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.phone Phone number of the
     * recipient of the returned drives.
     *
     * @param {string} jobProperties.returnAddress.email Email address of the
     * recipient of the returned drives.
     *
     * @param {object} [jobProperties.returnShipping] Specifies the return carrier
     * and customer's account with the carrier.
     *
     * @param {string} jobProperties.returnShipping.carrierName The carrier's name.
     *
     * @param {string} jobProperties.returnShipping.carrierAccountNumber The
     * customer's account number with the carrier.
     *
     * @param {object} [jobProperties.deliveryPackage] Contains information about
     * the package being shipped by the customer to the Microsoft data center.
     *
     * @param {string} jobProperties.deliveryPackage.carrierName The name of the
     * carrier that is used to ship the import or export drives.
     *
     * @param {string} jobProperties.deliveryPackage.trackingNumber The tracking
     * number of the package.
     *
     * @param {number} jobProperties.deliveryPackage.driveCount The number of
     * drives included in the package.
     *
     * @param {string} jobProperties.deliveryPackage.shipDate The date the package
     * is shipped.
     *
     * @param {string} [jobProperties.logLevel] Indicates whether error logging or
     * verbose logging is enabled.
     *
     * @param {boolean} [jobProperties.backupDriveManifest] Indicates whether the
     * manifest files on the drives should be copied to block blobs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, jobName: string, jobProperties: models.MutableJob, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * Updates specific properties of the import/export job. You can call this
     * operation to notify the Import/Export service that the hard drives
     * comprising the import or export job have been shipped to the Microsoft data
     * center. It can also be used to cancel an existing job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {object} jobProperties Import/export job properties that need to be
     * updated.
     *
     * @param {object} [jobProperties.tags]
     *
     * @param {boolean} [jobProperties.cancelRequested] If specified, the value
     * must be true. The service will attempt to cancel the job.
     *
     * @param {string} [jobProperties.state] If specified, the value must be
     * Shipping, which tells the Import/Export service that the package for the job
     * has been shipped. The ReturnAddress and DeliveryPackage properties must have
     * been set either in this request or in a previous request, otherwise the
     * request will fail. Possible values include: 'Shipping'
     *
     * @param {object} [jobProperties.returnAddress] Specifies the return address
     * information for the job.
     *
     * @param {string} jobProperties.returnAddress.recipientName The name of the
     * recipient who will receive the hard drives when they are returned.
     *
     * @param {string} jobProperties.returnAddress.streetAddress1 The first line of
     * the street address to use when returning the drives.
     *
     * @param {string} [jobProperties.returnAddress.streetAddress2] The second line
     * of the street address to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.city The city name to use when
     * returning the drives.
     *
     * @param {string} [jobProperties.returnAddress.stateOrProvince] The state or
     * province to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.postalCode The postal code to
     * use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.countryOrRegion The country or
     * region to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.phone Phone number of the
     * recipient of the returned drives.
     *
     * @param {string} jobProperties.returnAddress.email Email address of the
     * recipient of the returned drives.
     *
     * @param {object} [jobProperties.returnShipping] Specifies the return carrier
     * and customer's account with the carrier.
     *
     * @param {string} jobProperties.returnShipping.carrierName The carrier's name.
     *
     * @param {string} jobProperties.returnShipping.carrierAccountNumber The
     * customer's account number with the carrier.
     *
     * @param {object} [jobProperties.deliveryPackage] Contains information about
     * the package being shipped by the customer to the Microsoft data center.
     *
     * @param {string} jobProperties.deliveryPackage.carrierName The name of the
     * carrier that is used to ship the import or export drives.
     *
     * @param {string} jobProperties.deliveryPackage.trackingNumber The tracking
     * number of the package.
     *
     * @param {number} jobProperties.deliveryPackage.driveCount The number of
     * drives included in the package.
     *
     * @param {string} jobProperties.deliveryPackage.shipDate The date the package
     * is shipped.
     *
     * @param {string} [jobProperties.logLevel] Indicates whether error logging or
     * verbose logging is enabled.
     *
     * @param {boolean} [jobProperties.backupDriveManifest] Indicates whether the
     * manifest files on the drives should be copied to block blobs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, jobName: string, jobProperties: models.MutableJob, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    update(resourceGroupName: string, jobName: string, jobProperties: models.MutableJob, callback: ServiceCallback<models.Job>): void;
    update(resourceGroupName: string, jobName: string, jobProperties: models.MutableJob, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * Creates a new import/export job or updates an existing import/export job in
     * the specified subscription.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {object} jobProperties Properties of the import/export job that need
     * to be specified during creation.
     *
     * @param {string} jobProperties.storageAccountId The resource identifier of
     * the storage account where data will be imported to or exported from.
     *
     * @param {string} [jobProperties.containerSas] The container shared access
     * signature (SAS) to be used to import or export data to or from the storage
     * account.
     *
     * @param {string} jobProperties.jobType The type of job: Import or Export.
     * Possible values include: 'Import', 'Export'
     *
     * @param {object} jobProperties.returnAddress Specifies the return address
     * information for the job.
     *
     * @param {string} jobProperties.returnAddress.recipientName The name of the
     * recipient who will receive the hard drives when they are returned.
     *
     * @param {string} jobProperties.returnAddress.streetAddress1 The first line of
     * the street address to use when returning the drives.
     *
     * @param {string} [jobProperties.returnAddress.streetAddress2] The second line
     * of the street address to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.city The city name to use when
     * returning the drives.
     *
     * @param {string} [jobProperties.returnAddress.stateOrProvince] The state or
     * province to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.postalCode The postal code to
     * use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.countryOrRegion The country or
     * region to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.phone Phone number of the
     * recipient of the returned drives.
     *
     * @param {string} jobProperties.returnAddress.email Email address of the
     * recipient of the returned drives.
     *
     * @param {object} jobProperties.returnShipping Specifies the return carrier
     * and customer's account with the carrier.
     *
     * @param {string} jobProperties.returnShipping.carrierName The carrier's name.
     *
     * @param {string} jobProperties.returnShipping.carrierAccountNumber The
     * customer's account number with the carrier.
     *
     * @param {object} [jobProperties.deliveryPackage] Contains information about
     * the package being shipped by the customer to the Microsoft data center.
     *
     * @param {string} jobProperties.deliveryPackage.carrierName The name of the
     * carrier that is used to ship the import or export drives.
     *
     * @param {string} jobProperties.deliveryPackage.trackingNumber The tracking
     * number of the package.
     *
     * @param {number} jobProperties.deliveryPackage.driveCount The number of
     * drives included in the package.
     *
     * @param {string} jobProperties.deliveryPackage.shipDate The date the package
     * is shipped.
     *
     * @param {string} jobProperties.diagnosticsPath The virtual blob directory to
     * which the copy logs and backups of drive manifest files (if enabled) will be
     * stored.
     *
     * @param {string} [jobProperties.logLevel] Default value is Error. Indicates
     * whether error logging or verbose logging will be enabled. Possible values
     * include: 'Error', 'Verbose'
     *
     * @param {boolean} [jobProperties.backupDriveManifest] Default value is false.
     * Indicates whether the manifest files on the drives should be copied to block
     * blobs.
     *
     * @param {boolean} [jobProperties.cancelRequested] Indicates whether a request
     * has been submitted to cancel the job.
     *
     * @param {array} [jobProperties.driveList] List of up to ten drives that
     * comprise the job. The drive list is a required element for an import job; it
     * is not specified for export jobs.
     *
     * @param {object} [jobProperties.exportProperty] A property containing
     * information about the blobs to be exported for an export job. This property
     * is included for export jobs only.
     *
     * @param {array} [jobProperties.exportProperty.blobPath] A collection of
     * blob-path strings.
     *
     * @param {array} [jobProperties.exportProperty.blobPathPrefix] A collection of
     * blob-prefix strings.
     *
     * @param {string} [jobProperties.exportProperty.blobListblobPath] The relative
     * URI to the block blob that contains the list of blob paths or blob path
     * prefixes as defined above, beginning with the container name. If the blob is
     * in the root container, the URI must begin with $root.
     *
     * @param {string} jobProperties.location Specifies the Azure location where
     * the job is created.
     *
     * @param {object} [jobProperties.tags] Specifies the tags that are assigned to
     * the job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, jobName: string, jobProperties: models.Job, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * Creates a new import/export job or updates an existing import/export job in
     * the specified subscription.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {object} jobProperties Properties of the import/export job that need
     * to be specified during creation.
     *
     * @param {string} jobProperties.storageAccountId The resource identifier of
     * the storage account where data will be imported to or exported from.
     *
     * @param {string} [jobProperties.containerSas] The container shared access
     * signature (SAS) to be used to import or export data to or from the storage
     * account.
     *
     * @param {string} jobProperties.jobType The type of job: Import or Export.
     * Possible values include: 'Import', 'Export'
     *
     * @param {object} jobProperties.returnAddress Specifies the return address
     * information for the job.
     *
     * @param {string} jobProperties.returnAddress.recipientName The name of the
     * recipient who will receive the hard drives when they are returned.
     *
     * @param {string} jobProperties.returnAddress.streetAddress1 The first line of
     * the street address to use when returning the drives.
     *
     * @param {string} [jobProperties.returnAddress.streetAddress2] The second line
     * of the street address to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.city The city name to use when
     * returning the drives.
     *
     * @param {string} [jobProperties.returnAddress.stateOrProvince] The state or
     * province to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.postalCode The postal code to
     * use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.countryOrRegion The country or
     * region to use when returning the drives.
     *
     * @param {string} jobProperties.returnAddress.phone Phone number of the
     * recipient of the returned drives.
     *
     * @param {string} jobProperties.returnAddress.email Email address of the
     * recipient of the returned drives.
     *
     * @param {object} jobProperties.returnShipping Specifies the return carrier
     * and customer's account with the carrier.
     *
     * @param {string} jobProperties.returnShipping.carrierName The carrier's name.
     *
     * @param {string} jobProperties.returnShipping.carrierAccountNumber The
     * customer's account number with the carrier.
     *
     * @param {object} [jobProperties.deliveryPackage] Contains information about
     * the package being shipped by the customer to the Microsoft data center.
     *
     * @param {string} jobProperties.deliveryPackage.carrierName The name of the
     * carrier that is used to ship the import or export drives.
     *
     * @param {string} jobProperties.deliveryPackage.trackingNumber The tracking
     * number of the package.
     *
     * @param {number} jobProperties.deliveryPackage.driveCount The number of
     * drives included in the package.
     *
     * @param {string} jobProperties.deliveryPackage.shipDate The date the package
     * is shipped.
     *
     * @param {string} jobProperties.diagnosticsPath The virtual blob directory to
     * which the copy logs and backups of drive manifest files (if enabled) will be
     * stored.
     *
     * @param {string} [jobProperties.logLevel] Default value is Error. Indicates
     * whether error logging or verbose logging will be enabled. Possible values
     * include: 'Error', 'Verbose'
     *
     * @param {boolean} [jobProperties.backupDriveManifest] Default value is false.
     * Indicates whether the manifest files on the drives should be copied to block
     * blobs.
     *
     * @param {boolean} [jobProperties.cancelRequested] Indicates whether a request
     * has been submitted to cancel the job.
     *
     * @param {array} [jobProperties.driveList] List of up to ten drives that
     * comprise the job. The drive list is a required element for an import job; it
     * is not specified for export jobs.
     *
     * @param {object} [jobProperties.exportProperty] A property containing
     * information about the blobs to be exported for an export job. This property
     * is included for export jobs only.
     *
     * @param {array} [jobProperties.exportProperty.blobPath] A collection of
     * blob-path strings.
     *
     * @param {array} [jobProperties.exportProperty.blobPathPrefix] A collection of
     * blob-prefix strings.
     *
     * @param {string} [jobProperties.exportProperty.blobListblobPath] The relative
     * URI to the block blob that contains the list of blob paths or blob path
     * prefixes as defined above, beginning with the container name. If the blob is
     * in the root container, the URI must begin with $root.
     *
     * @param {string} jobProperties.location Specifies the Azure location where
     * the job is created.
     *
     * @param {object} [jobProperties.tags] Specifies the tags that are assigned to
     * the job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, jobName: string, jobProperties: models.Job, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    createOrUpdate(resourceGroupName: string, jobName: string, jobProperties: models.Job, callback: ServiceCallback<models.Job>): void;
    createOrUpdate(resourceGroupName: string, jobName: string, jobProperties: models.Job, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * Deletes an existing import/export job. Only import/export jobs in the
     * Creating or Completed states can be deleted.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing import/export job. Only import/export jobs in the
     * Creating or Completed states can be deleted.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, jobName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Moves the specified import/export jobs from the resource group to a target
     * resource group. The target resource group may be in a different
     * subscription.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} moveJobsParameters Parameters to be provided to move a job
     * from one resource group to another.
     *
     * @param {string} moveJobsParameters.targetResourceGroup Specifies the target
     * resource group ID to move the jobs to.
     *
     * @param {array} moveJobsParameters.resources Specifies the list of jobs to
     * move to the target resource group. The jobs must be from the current
     * resource group from the request URL.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    moveWithHttpOperationResponse(resourceGroupName: string, moveJobsParameters: models.MoveJobParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Moves the specified import/export jobs from the resource group to a target
     * resource group. The target resource group may be in a different
     * subscription.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} moveJobsParameters Parameters to be provided to move a job
     * from one resource group to another.
     *
     * @param {string} moveJobsParameters.targetResourceGroup Specifies the target
     * resource group ID to move the jobs to.
     *
     * @param {array} moveJobsParameters.resources Specifies the list of jobs to
     * move to the target resource group. The jobs must be from the current
     * resource group from the request URL.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    move(resourceGroupName: string, moveJobsParameters: models.MoveJobParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    move(resourceGroupName: string, moveJobsParameters: models.MoveJobParameters, callback: ServiceCallback<void>): void;
    move(resourceGroupName: string, moveJobsParameters: models.MoveJobParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the BitLocker keys for all drives in the specified import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BitLockerKeysListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBitLockerKeysWithHttpOperationResponse(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BitLockerKeysListResult>>;

    /**
     * Lists the BitLocker keys for all drives in the specified import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BitLockerKeysListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BitLockerKeysListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BitLockerKeysListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBitLockerKeys(resourceGroupName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BitLockerKeysListResult>;
    listBitLockerKeys(resourceGroupName: string, jobName: string, callback: ServiceCallback<models.BitLockerKeysListResult>): void;
    listBitLockerKeys(resourceGroupName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BitLockerKeysListResult>): void;


    /**
     * Gets all the active and completed import/export jobs in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobListResult>>;

    /**
     * Gets all the active and completed import/export jobs in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.JobListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobListResult>): void;


    /**
     * Returns all active and completed import/export jobs in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobListResult>>;

    /**
     * Returns all active and completed import/export jobs in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.JobListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobListResult>): void;
}
