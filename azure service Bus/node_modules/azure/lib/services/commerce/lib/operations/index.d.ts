/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * UsageAggregates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the UsageManagementClient.
 */
export interface UsageAggregates {


    /**
     * Query aggregated Azure subscription consumption data for a date range.
     *
     * @param {date} reportedStartTime The start of the time range to retrieve data
     * for.
     *
     * @param {date} reportedEndTime The end of the time range to retrieve data
     * for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.showDetails] `True` returns usage data in
     * instance-level detail, `false` causes server-side aggregation with fewer
     * details. For example, if you have 3 website instances, by default you will
     * get 3 line items for website consumption. If you specify showDetails =
     * false, the data will be aggregated as a single line item for website
     * consumption within the time period (for the given subscriptionId, meterId,
     * usageStartTime and usageEndTime).
     *
     * @param {string} [options.aggregationGranularity] `Daily` (default) returns
     * the data in daily granularity, `Hourly` returns the data in hourly
     * granularity. Possible values include: 'Daily', 'Hourly'
     *
     * @param {string} [options.continuationToken] Used when a continuation token
     * string is provided in the response body of the previous call, enabling
     * paging through a large result set. If not present, the data is retrieved
     * from the beginning of the day/hour (based on the granularity) passed in.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsageAggregationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(reportedStartTime: Date|string, reportedEndTime: Date|string, options?: { showDetails? : boolean, aggregationGranularity? : string, continuationToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsageAggregationListResult>>;

    /**
     * Query aggregated Azure subscription consumption data for a date range.
     *
     * @param {date} reportedStartTime The start of the time range to retrieve data
     * for.
     *
     * @param {date} reportedEndTime The end of the time range to retrieve data
     * for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.showDetails] `True` returns usage data in
     * instance-level detail, `false` causes server-side aggregation with fewer
     * details. For example, if you have 3 website instances, by default you will
     * get 3 line items for website consumption. If you specify showDetails =
     * false, the data will be aggregated as a single line item for website
     * consumption within the time period (for the given subscriptionId, meterId,
     * usageStartTime and usageEndTime).
     *
     * @param {string} [options.aggregationGranularity] `Daily` (default) returns
     * the data in daily granularity, `Hourly` returns the data in hourly
     * granularity. Possible values include: 'Daily', 'Hourly'
     *
     * @param {string} [options.continuationToken] Used when a continuation token
     * string is provided in the response body of the previous call, enabling
     * paging through a large result set. If not present, the data is retrieved
     * from the beginning of the day/hour (based on the granularity) passed in.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsageAggregationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsageAggregationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsageAggregationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(reportedStartTime: Date|string, reportedEndTime: Date|string, options?: { showDetails? : boolean, aggregationGranularity? : string, continuationToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UsageAggregationListResult>;
    list(reportedStartTime: Date|string, reportedEndTime: Date|string, callback: ServiceCallback<models.UsageAggregationListResult>): void;
    list(reportedStartTime: Date|string, reportedEndTime: Date|string, options: { showDetails? : boolean, aggregationGranularity? : string, continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageAggregationListResult>): void;


    /**
     * Query aggregated Azure subscription consumption data for a date range.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsageAggregationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsageAggregationListResult>>;

    /**
     * Query aggregated Azure subscription consumption data for a date range.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsageAggregationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsageAggregationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsageAggregationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UsageAggregationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.UsageAggregationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageAggregationListResult>): void;
}

/**
 * @class
 * RateCard
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the UsageManagementClient.
 */
export interface RateCard {


    /**
     * Enables you to query for the resource/meter metadata and related prices used
     * in a given subscription by Offer ID, Currency, Locale and Region. The
     * metadata associated with the billing meters, including but not limited to
     * service names, types, resources, units of measure, and regions, is subject
     * to change at any time and without notice. If you intend to use this billing
     * data in an automated fashion, please use the billing meter GUID to uniquely
     * identify each billable item. If the billing meter GUID is scheduled to
     * change due to a new billing model, you will be notified in advance of the
     * change.
     *
     * @param {string} filter The filter to apply on the operation. It ONLY
     * supports the 'eq' and 'and' logical operators at this time. All the 4 query
     * parameters 'OfferDurableId',  'Currency', 'Locale', 'Region' are required to
     * be a part of the $filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceRateCardInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceRateCardInfo>>;

    /**
     * Enables you to query for the resource/meter metadata and related prices used
     * in a given subscription by Offer ID, Currency, Locale and Region. The
     * metadata associated with the billing meters, including but not limited to
     * service names, types, resources, units of measure, and regions, is subject
     * to change at any time and without notice. If you intend to use this billing
     * data in an automated fashion, please use the billing meter GUID to uniquely
     * identify each billable item. If the billing meter GUID is scheduled to
     * change due to a new billing model, you will be notified in advance of the
     * change.
     *
     * @param {string} filter The filter to apply on the operation. It ONLY
     * supports the 'eq' and 'and' logical operators at this time. All the 4 query
     * parameters 'OfferDurableId',  'Currency', 'Locale', 'Region' are required to
     * be a part of the $filter.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceRateCardInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceRateCardInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceRateCardInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceRateCardInfo>;
    get(filter: string, callback: ServiceCallback<models.ResourceRateCardInfo>): void;
    get(filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceRateCardInfo>): void;
}
