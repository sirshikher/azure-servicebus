/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * **Lists the metric values for a resource**.<br>The **$filter** is used to
 * reduce the set of metric data returned. Some common properties for this
 * expression will be: name.value, aggregationType, startTime, endTime,
 * timeGrain. The filter expression uses these properties with comparison
 * operators (eg. eq, gt, lt) and multiple expressions can be combined with
 * parentheses and 'and/or' operators.<br>Some example filter expressions
 * are:<br>- $filter=(name.value eq 'RunsSucceeded') and aggregationType eq
 * 'Total' and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain
 * eq duration'PT1M',<br>- $filter=(name.value eq 'RunsSucceeded') and
 * (aggregationType eq 'Total' or aggregationType eq 'Average') and startTime
 * eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq
 * duration'PT1H',<br>- $filter=(name.value eq 'ActionsCompleted' or name.value
 * eq 'RunsSucceeded') and (aggregationType eq 'Total' or aggregationType eq
 * 'Average') and startTime eq 2016-02-20 and endTime eq 2016-02-21 and
 * timeGrain eq duration'PT1M'.<br><br> >**NOTE**: When a metrics query comes
 * in with multiple metrics, but with no aggregation types defined, the service
 * will pick the Primary aggregation type of the first metrics to be used as
 * the default aggregation type for all the metrics.
 *
 * @param {string} resourceUri The identifier of the resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.filter] Reduces the set of data collected. The
 * syntax allowed depends on the operation. See the operation's description for
 * details.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link MetricCollection} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(resourceUri, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  let apiVersion = '2016-09-01';
  // Validate
  try {
    if (resourceUri === null || resourceUri === undefined || typeof resourceUri.valueOf() !== 'string') {
      throw new Error('resourceUri cannot be null or undefined and it must be of type string.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + '{resourceUri}/providers/microsoft.insights/metrics';
  requestUrl = requestUrl.replace('{resourceUri}', resourceUri);
  let queryParameters = [];
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['MetricCollection']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @class
 * Metrics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the InsightsClient.
 * Initializes a new instance of the Metrics class.
 * @constructor
 *
 * @param {InsightsClient} client Reference to the service client.
 */
class Metrics {
  constructor(client) {
    this.client = client;
    this._list = _list;
  }

  /**
   * **Lists the metric values for a resource**.<br>The **$filter** is used to
   * reduce the set of metric data returned. Some common properties for this
   * expression will be: name.value, aggregationType, startTime, endTime,
   * timeGrain. The filter expression uses these properties with comparison
   * operators (eg. eq, gt, lt) and multiple expressions can be combined with
   * parentheses and 'and/or' operators.<br>Some example filter expressions
   * are:<br>- $filter=(name.value eq 'RunsSucceeded') and aggregationType eq
   * 'Total' and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain
   * eq duration'PT1M',<br>- $filter=(name.value eq 'RunsSucceeded') and
   * (aggregationType eq 'Total' or aggregationType eq 'Average') and startTime
   * eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq
   * duration'PT1H',<br>- $filter=(name.value eq 'ActionsCompleted' or name.value
   * eq 'RunsSucceeded') and (aggregationType eq 'Total' or aggregationType eq
   * 'Average') and startTime eq 2016-02-20 and endTime eq 2016-02-21 and
   * timeGrain eq duration'PT1M'.<br><br> >**NOTE**: When a metrics query comes
   * in with multiple metrics, but with no aggregation types defined, the service
   * will pick the Primary aggregation type of the first metrics to be used as
   * the default aggregation type for all the metrics.
   *
   * @param {string} resourceUri The identifier of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] Reduces the set of data collected. The
   * syntax allowed depends on the operation. See the operation's description for
   * details.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<MetricCollection>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(resourceUri, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(resourceUri, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * **Lists the metric values for a resource**.<br>The **$filter** is used to
   * reduce the set of metric data returned. Some common properties for this
   * expression will be: name.value, aggregationType, startTime, endTime,
   * timeGrain. The filter expression uses these properties with comparison
   * operators (eg. eq, gt, lt) and multiple expressions can be combined with
   * parentheses and 'and/or' operators.<br>Some example filter expressions
   * are:<br>- $filter=(name.value eq 'RunsSucceeded') and aggregationType eq
   * 'Total' and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain
   * eq duration'PT1M',<br>- $filter=(name.value eq 'RunsSucceeded') and
   * (aggregationType eq 'Total' or aggregationType eq 'Average') and startTime
   * eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq
   * duration'PT1H',<br>- $filter=(name.value eq 'ActionsCompleted' or name.value
   * eq 'RunsSucceeded') and (aggregationType eq 'Total' or aggregationType eq
   * 'Average') and startTime eq 2016-02-20 and endTime eq 2016-02-21 and
   * timeGrain eq duration'PT1M'.<br><br> >**NOTE**: When a metrics query comes
   * in with multiple metrics, but with no aggregation types defined, the service
   * will pick the Primary aggregation type of the first metrics to be used as
   * the default aggregation type for all the metrics.
   *
   * @param {string} resourceUri The identifier of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] Reduces the set of data collected. The
   * syntax allowed depends on the operation. See the operation's description for
   * details.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {MetricCollection} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link MetricCollection} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceUri, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(resourceUri, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(resourceUri, options, optionalCallback);
    }
  }

}

module.exports = Metrics;
