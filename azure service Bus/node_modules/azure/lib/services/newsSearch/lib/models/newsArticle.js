/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Defines a news article.
 *
 * @extends models['Article']
 */
class NewsArticle extends models['Article'] {
  /**
   * Create a NewsArticle.
   * @member {string} [category] The news category that the article belongs to.
   * For example, Sports. If the news category cannot be determined, the
   * article does not include this field.
   * @member {boolean} [headline] A Boolean value that indicates whether the
   * news article is a headline. If true, the article is a headline. The
   * article includes this field only for news categories requests that do not
   * specify the category query parameter.
   * @member {array} [clusteredArticles] A list of related news articles.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of NewsArticle
   *
   * @returns {object} metadata of NewsArticle
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NewsArticle',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: '_type',
          clientName: '_type'
        },
        uberParent: 'ResponseBase',
        className: 'NewsArticle',
        modelProperties: {
          _type: {
            required: true,
            serializedName: '_type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          webSearchUrl: {
            required: false,
            readOnly: true,
            serializedName: 'webSearchUrl',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          url: {
            required: false,
            readOnly: true,
            serializedName: 'url',
            type: {
              name: 'String'
            }
          },
          image: {
            required: false,
            readOnly: true,
            serializedName: 'image',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: '_type',
                clientName: '_type'
              },
              uberParent: 'ResponseBase',
              className: 'ImageObject'
            }
          },
          description: {
            required: false,
            readOnly: true,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          alternateName: {
            required: false,
            readOnly: true,
            serializedName: 'alternateName',
            type: {
              name: 'String'
            }
          },
          bingId: {
            required: false,
            readOnly: true,
            serializedName: 'bingId',
            type: {
              name: 'String'
            }
          },
          thumbnailUrl: {
            required: false,
            readOnly: true,
            serializedName: 'thumbnailUrl',
            type: {
              name: 'String'
            }
          },
          provider: {
            required: false,
            readOnly: true,
            serializedName: 'provider',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ThingElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: '_type',
                      clientName: '_type'
                    },
                    uberParent: 'ResponseBase',
                    className: 'Thing'
                  }
              }
            }
          },
          datePublished: {
            required: false,
            readOnly: true,
            serializedName: 'datePublished',
            type: {
              name: 'String'
            }
          },
          video: {
            required: false,
            readOnly: true,
            serializedName: 'video',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: '_type',
                clientName: '_type'
              },
              uberParent: 'ResponseBase',
              className: 'VideoObject'
            }
          },
          wordCount: {
            required: false,
            readOnly: true,
            serializedName: 'wordCount',
            type: {
              name: 'Number'
            }
          },
          category: {
            required: false,
            readOnly: true,
            serializedName: 'category',
            type: {
              name: 'String'
            }
          },
          headline: {
            required: false,
            readOnly: true,
            serializedName: 'headline',
            type: {
              name: 'Boolean'
            }
          },
          clusteredArticles: {
            required: false,
            readOnly: true,
            serializedName: 'clusteredArticles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NewsArticleElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: '_type',
                      clientName: '_type'
                    },
                    uberParent: 'ResponseBase',
                    className: 'NewsArticle'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = NewsArticle;
