// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __awaiter } from "tslib";
import { HttpHeaders } from "@azure/core-http";
import { generateKey } from "./crypto";
export class SasServiceClientCredentials {
    /**
     * Creates a new sasServiceClientCredentials object.
     *
     * @constructor
     * @param {string} sharedAccessKeyName The SAS key name to use.
     * @param {string} sharedAccessKey The SAS key value to use
     */
    constructor(sharedAccessKeyName, sharedAccessKey) {
        this.keyName = sharedAccessKeyName;
        this.keyValue = sharedAccessKey;
    }
    _generateSignature(targetUri, expirationDate) {
        return __awaiter(this, void 0, void 0, function* () {
            const stringToSign = `${targetUri}\n${expirationDate}`;
            const result = yield generateKey(this.keyValue, stringToSign);
            return result;
        });
    }
    /**
     * Signs a request with the Authentication header.
     *
     * @param {WebResource} webResource The WebResource to be signed.
     * @returns {Promise<WebResource>} The signed request object.
     */
    signRequest(webResource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!webResource.headers)
                webResource.headers = new HttpHeaders();
            const targetUri = encodeURIComponent(webResource.url.toLowerCase()).toLowerCase();
            const date = new Date();
            date.setMinutes(date.getMinutes() + 5);
            const expirationDate = Math.round(date.getTime() / 1000);
            const signature = yield this._generateSignature(targetUri, expirationDate);
            webResource.headers.set("authorization", `SharedAccessSignature sig=${signature}&se=${expirationDate}&skn=${this.keyName}&sr=${targetUri}`);
            webResource.withCredentials = true;
            return webResource;
        });
    }
}
//# sourceMappingURL=sasServiceClientCredentials.js.map