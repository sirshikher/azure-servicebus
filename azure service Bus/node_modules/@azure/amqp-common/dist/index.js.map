{"version":3,"file":"index.js","sources":["../src/util/constants.ts","../src/util/utils.ts","../src/errors.ts","../src/log.ts","../src/util/checkNetworkConnection.ts","../src/retry.ts","../src/requestResponseLink.ts","../src/dataTransformer.ts","../src/auth/token.ts","../src/auth/sas.ts","../src/auth/iotSas.ts","../src/auth/aad.ts","../src/connectionConfig/connectionConfig.ts","../src/connectionConfig/eventhubConnectionConfig.ts","../src/connectionConfig/iothubConnectionConfig.ts","../src/cbs.ts","../src/messageHeader.ts","../src/messageProperties.ts","../src/ConnectionContextBase.ts","../src/index.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nexport const associatedLinkName = \"associated-link-name\";\nexport const partitionKey = \"x-opt-partition-key\";\nexport const sequenceNumber = \"x-opt-sequence-number\";\nexport const enqueueSequenceNumber = \"x-opt-enqueue-sequence-number\";\nexport const enqueuedTime = \"x-opt-enqueued-time\";\nexport const scheduledEnqueueTime = \"x-opt-scheduled-enqueue-time\";\nexport const offset = \"x-opt-offset\";\nexport const lockedUntil = \"x-opt-locked-until\";\nexport const partitionIdName = \"x-opt-partition-id\";\nexport const publisher = \"x-opt-publisher-name\";\nexport const viaPartitionKey = \"x-opt-via-partition-key\";\nexport const deadLetterSource = \"x-opt-deadletter-source\";\nexport const enqueuedTimeAnnotation = `amqp.annotation.${enqueuedTime}`;\nexport const offsetAnnotation = `amqp.annotation.${offset}`;\nexport const sequenceNumberAnnotation = `amqp.annotation.${sequenceNumber}`;\nexport const guidSize = 16;\nexport const message = \"message\";\nexport const error = \"error\";\nexport const statusCode = \"status-code\";\nexport const statusDescription = \"status-description\";\nexport const errorCondition = \"error-condition\";\nexport const management = \"$management\";\nexport const partition = \"partition\";\nexport const partitionId = \"partitionId\";\nexport const readOperation = \"READ\";\nexport const TLS = \"tls\";\nexport const establishConnection = \"establishConnection\";\nexport const defaultConsumerGroup = \"$default\";\nexport const eventHub = \"eventhub\";\nexport const cbsEndpoint = \"$cbs\";\nexport const cbsReplyTo = \"cbs\";\nexport const operationPutToken = \"put-token\";\nexport const aadEventHubsAudience = \"https://eventhubs.azure.net/\";\nexport const aadServiceBusAudience = \"https://servicebus.azure.net/\";\nexport const maxUserAgentLength = 512;\nexport const vendorString = \"com.microsoft\";\nexport const attachEpoch = `${vendorString}:epoch`;\nexport const receiverIdentifierName = `${vendorString}:receiver-name`;\nexport const enableReceiverRuntimeMetricName = `${vendorString}:enable-receiver-runtime-metric`;\nexport const timespan = `${vendorString}:timespan`;\nexport const uri = `${vendorString}:uri`;\nexport const dateTimeOffset = `${vendorString}:datetime-offset`;\nexport const sessionFilterName = `${vendorString}:session-filter`;\nexport const receiverError = \"receiver_error\";\nexport const senderError = \"sender_error\";\nexport const sessionError = \"session_error\";\nexport const connectionError = \"connection_error\";\nexport const defaultOperationTimeoutInSeconds = 60;\nexport const defaultConnectionIdleTimeoutInMs = 60000;\nexport const managementRequestKey = \"managementRequest\";\nexport const negotiateCbsKey = \"negotiateCbs\";\nexport const negotiateClaim = \"negotiateClaim\";\nexport const ensureContainerAndBlob = \"ensureContainerAndBlob\";\nexport const defaultPrefetchCount = 1000;\nexport const reconnectLimit = 100;\nexport const maxMessageIdLength = 128;\nexport const maxPartitionKeyLength = 128;\nexport const maxSessionIdLength = 128;\nexport const pathDelimiter = \"/\";\nexport const ruleNameMaximumLength = 50;\nexport const maximumSqlFilterStatementLength = 1024;\nexport const maximumSqlRuleActionStatementLength = 1024;\nexport const maxDeadLetterReasonLength = 4096;\n// https://stackoverflow.com/questions/11526504/minimum-and-maximum-date for js\n// However we are setting this to the TimeSpan.MaxValue of C#.\nexport const maxDurationValue = 922337203685477;\nexport const minDurationValue = -922337203685477;\n// https://github.com/Azure/azure-amqp/blob/master/Microsoft.Azure.Amqp/Amqp/AmqpConstants.cs#L47\nexport const maxAbsoluteExpiryTime = new Date(\"9999-12-31T07:59:59.000Z\").getTime();\nexport const aadTokenValidityMarginSeconds = 5;\nexport const connectionReconnectDelay = 300;\nexport const defaultRetryAttempts = 3;\nexport const defaultConnectionRetryAttempts = 150;\nexport const defaultDelayBetweenOperationRetriesInSeconds = 5;\nexport const defaultDelayBetweenRetriesInSeconds = 15;\nexport const receiverSettleMode = \"receiver-settle-mode\";\nexport const dispositionStatus = \"disposition-status\";\nexport const fromSequenceNumber = \"from-sequence-number\";\nexport const messageCount = \"message-count\";\nexport const lockTokens = \"lock-tokens\";\nexport const messageIdMapKey = \"message-id\";\nexport const sequenceNumberMapKey = \"sequence-number\";\nexport const lockTokenMapKey = \"lock-token\";\nexport const sessionIdMapKey = \"session-id\";\nexport const sequenceNumbers = \"sequence-numbers\";\nexport const deadLetterReason = \"deadletter-reason\";\nexport const deadLetterDescription = \"deadletter-description\";\nexport const propertiesToModify = \"properties-to-modify\";\nexport const deadLetterName = \"com.microsoft:dead-letter\";\nexport const trackingId = \"com.microsoft:tracking-id\";\nexport const serverTimeout = \"com.microsoft:server-timeout\";\nexport const operations = {\n  putToken: \"put-token\",\n  read: \"READ\",\n  cancelScheduledMessage: \"com.microsoft:cancel-scheduled-message\",\n  scheduleMessage: \"com.microsoft:schedule-message\",\n  renewLock: \"com.microsoft:renew-lock\",\n  peekMessage: \"com.microsoft:peek-message\",\n  receiveBySequenceNumber: \"com.microsoft:receive-by-sequence-number\",\n  updateDisposition: \"com.microsoft:update-disposition\",\n  renewSessionLock: \"com.microsoft:renew-session-lock\",\n  setSessionState: \"com.microsoft:set-session-state\",\n  getSessionState: \"com.microsoft:get-session-state\",\n  enumerateSessions: \"com.microsoft:get-message-sessions\",\n  addRule: \"com.microsoft:add-rule\",\n  removeRule: \"com.microsoft:remove-rule\",\n  enumerateRules: \"com.microsoft:enumerate-rules\"\n};\nexport const descriptorCodes = {\n  ruleDescriptionList: 1335734829060,\n  sqlFilterList: 83483426822,\n  correlationFilterList: 83483426825,\n  sqlRuleActionList: 1335734829062,\n  trueFilterList: 83483426823,\n  falseFilterList: 83483426824\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport AsyncLock from \"async-lock\";\nexport { AsyncLock };\n/**\n * Describes the options that can be provided to create an async lock.\n * @interface AsyncLockOptions\n */\nexport interface AsyncLockOptions {\n  /**\n   * @property {number} [timeout] The max timeout. Default is: 0 (never timeout).\n   */\n  timeout?: number;\n  /**\n   * @property {number} [maxPending] Maximum pending tasks. Default is: 1000.\n   */\n  maxPending?: number;\n  /**\n   * @property {boolean} [domainReentrant] Whether lock can reenter in the same domain.\n   * Default is: false.\n   */\n  domainReentrant?: boolean;\n  /**\n   * @property {any} [Promise] Your implementation of the promise. Default is: global promise.\n   */\n  Promise?: any;\n}\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport const isNode =\n  !!process &&\n  !!process.version &&\n  !!process.versions &&\n  !!process.versions.node;\n\n/**\n * Describes the servicebus connection string model.\n * @interface ServiceBusConnectionStringModel\n */\nexport interface ServiceBusConnectionStringModel {\n  Endpoint: string;\n  SharedAccessKeyName: string;\n  SharedAccessKey: string;\n  EntityPath?: string;\n  [x: string]: any;\n}\n\n/**\n * Describes the eventhub connection string model.\n * @interface EventHubConnectionStringModel\n */\nexport interface EventHubConnectionStringModel {\n  Endpoint: string;\n  SharedAccessKeyName: string;\n  SharedAccessKey: string;\n  EntityPath?: string;\n  [x: string]: any;\n}\n\n/**\n * Describes the stroage connection string model.\n * @interface StorageConnectionStringModel\n */\nexport interface StorageConnectionStringModel {\n  DefaultEndpointsProtocol: string;\n  AccountName: string;\n  AccountKey: string;\n  EndpointSuffix: string;\n  [x: string]: any;\n}\n\n/**\n * Describes the iothub connection string model.\n * @interface IotHubConnectionStringModel\n */\nexport interface IotHubConnectionStringModel {\n  HostName: string;\n  SharedAccessKeyName: string;\n  SharedAccessKey: string;\n  DeviceId?: string;\n}\n\n/**\n * Defines an object with possible properties defined in T.\n * @type ParsedOutput<T>\n */\nexport type ParsedOutput<T> = { [P in keyof T]: T[P] };\n\n/**\n * Parses the connection string and returns an object of type T.\n *\n * Connection strings have the following syntax:\n *\n * ConnectionString ::= Part { \";\" Part } [ \";\" ] [ WhiteSpace ]\n * Part             ::= [ PartLiteral [ \"=\" PartLiteral ] ]\n * PartLiteral      ::= [ WhiteSpace ] Literal [ WhiteSpace ]\n * Literal          ::= ? any sequence of characters except ; or = or WhiteSpace ?\n * WhiteSpace       ::= ? all whitespace characters including \\r and \\n ?\n *\n * @param {string} connectionString The connection string to be parsed.\n * @returns {ParsedOutput<T>} ParsedOutput<T>.\n */\nexport function parseConnectionString<T>(\n  connectionString: string\n): ParsedOutput<T> {\n  const output: { [k: string]: string } = {};\n  const parts = connectionString.trim().split(\";\");\n\n  for (let part of parts) {\n    part = part.trim();\n\n    if (part === \"\") {\n      // parts can be empty\n      continue;\n    }\n\n    const splitIndex = part.indexOf(\"=\");\n    if (splitIndex === -1) {\n      throw new Error(\n        \"Connection string malformed: each part of the connection string must have an `=` assignment.\"\n      );\n    }\n\n    const key = part.substring(0, splitIndex).trim();\n    if (key === \"\") {\n      throw new Error(\n        \"Connection string malformed: missing key for assignment\"\n      );\n    }\n\n    const value = part.substring(splitIndex + 1).trim();\n\n    output[key] = value;\n  }\n\n  return output as any;\n}\n\n/**\n * Gets a new instance of the async lock with desired settings.\n * @param {AsyncLockOptions} [options] The async lock options.\n * @returns {AsyncLock} AsyncLock\n */\nexport function getNewAsyncLock(options?: AsyncLockOptions): AsyncLock {\n  return new AsyncLock(options);\n}\n\n/**\n * @constant {AsyncLock} defaultLock The async lock instance with default settings.\n */\nexport const defaultLock: AsyncLock = new AsyncLock({ maxPending: 10000 });\n\n/**\n * Describes a Timeout class that can wait for the specified amount of time and then resolve/reject\n * the promise with the given value.\n * @class Timout\n */\nexport class Timeout {\n  // Node and browsers return different types from setTimeout\n  // Any is the easiest way to avoid type errors in either platform\n  private _timer?: any;\n\n  set<T>(t: number, value?: T): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      this.clear();\n      const callback = value ? () => reject(new Error(`${value}`)) : resolve;\n      this._timer = setTimeout(callback, t);\n    });\n  }\n\n  clear(): void {\n    if (this._timer) {\n      clearTimeout(this._timer);\n    }\n  }\n\n  wrap<T>(promise: Promise<T>, t: number, value?: T): Promise<T> {\n    const wrappedPromise = this._promiseFinally(promise, () => this.clear());\n    const timer = this.set(t, value);\n    return Promise.race([wrappedPromise, timer]);\n  }\n\n  private _promiseFinally<T>(promise: Promise<T>, fn: Function): Promise<T> {\n    const success = (result: T) => {\n      fn();\n      return result;\n    };\n    const error = (e: Error) => {\n      fn();\n      return Promise.reject(e);\n    };\n    return Promise.resolve(promise).then(success, error);\n  }\n\n  static set<T>(t: number, value?: T): Promise<T> {\n    return new Timeout().set(t, value);\n  }\n\n  static wrap<T>(promise: Promise<T>, t: number, value?: T): Promise<T> {\n    return new Timeout().wrap(promise, t, value);\n  }\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param {number} t - The number of milliseconds to be delayed.\n * @param {T} value - The value to be resolved with after a timeout of t milliseconds.\n * @returns {Promise<T>} - Resolved promise\n */\nexport function delay<T>(t: number, value?: T): Promise<T> {\n  return new Promise(resolve => setTimeout(() => resolve(value), t));\n}\n\n/**\n * Generates a random number between the given interval\n * @param {number} min Min number of the range (inclusive).\n * @param {number} max Max number of the range (inclusive).\n */\nexport function randomNumberFromInterval(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Type declaration for a Function type where T is the input to the function and V is the output\n * of the function.\n */\nexport type Func<T, V> = (a: T) => V;\n\n/*\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param {Array} promiseFactories An array of promise factories(A function that return a promise)\n *\n * @param {any} [kickstart] Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n *\n * @return A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(\n  promiseFactories: Array<any>,\n  kickstart?: any\n): Promise<any> {\n  let result = Promise.resolve(kickstart);\n  promiseFactories.forEach(promiseFactory => {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n\n/**\n * Determines whether the given connection string is an iothub connection string.\n * @param {string} connectionString The connection string.\n * @return {boolean} boolean.\n */\nexport function isIotHubConnectionString(connectionString: string): boolean {\n  connectionString = String(connectionString);\n\n  let result: boolean = false;\n  const model: any = parseConnectionString<any>(connectionString);\n  if (\n    model &&\n    model.HostName &&\n    model.SharedAccessKey &&\n    model.SharedAccessKeyName\n  ) {\n    result = true;\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { AmqpResponseStatusCode, isAmqpError, AmqpError } from \"rhea-promise\";\nimport { isNode } from \"../src/util/utils\";\n\n/**\n * Maps the conditions to the numeric AMQP Response status codes.\n * @enum {ConditionStatusMapper}\n */\nexport enum ConditionStatusMapper {\n  \"com.microsoft:timeout\" = AmqpResponseStatusCode.RequestTimeout,\n  \"amqp:not-found\" = AmqpResponseStatusCode.NotFound,\n  \"amqp:not-implemented\" = AmqpResponseStatusCode.NotImplemented,\n  \"com.microsoft:entity-already-exists\" = AmqpResponseStatusCode.Conflict,\n  \"com.microsoft:message-lock-lost\" = AmqpResponseStatusCode.Gone,\n  \"com.microsoft:session-lock-lost\" = AmqpResponseStatusCode.Gone,\n  \"com.microsoft:no-matching-subscription\" = AmqpResponseStatusCode.InternalServerError,\n  \"amqp:link:message-size-exceeded\" = AmqpResponseStatusCode.Forbidden,\n  \"com.microsoft:server-busy\" = AmqpResponseStatusCode.ServiceUnavailable,\n  \"com.microsoft:argument-error\" = AmqpResponseStatusCode.BadRequest,\n  \"com.microsoft:argument-out-of-range\" = AmqpResponseStatusCode.BadRequest,\n  \"com.microsoft:store-lock-lost\" = AmqpResponseStatusCode.Gone,\n  \"com.microsoft:session-cannot-be-locked\" = AmqpResponseStatusCode.Gone,\n  \"com.microsoft:partition-not-owned\" = AmqpResponseStatusCode.Gone,\n  \"com.microsoft:entity-disabled\" = AmqpResponseStatusCode.BadRequest,\n  \"com.microsoft:publisher-revoked\" = AmqpResponseStatusCode.Unauthorized,\n  \"amqp:link:stolen\" = AmqpResponseStatusCode.Gone,\n  \"amqp:not-allowed\" = AmqpResponseStatusCode.BadRequest,\n  \"amqp:unauthorized-access\" = AmqpResponseStatusCode.Unauthorized,\n  \"amqp:resource-limit-exceeded\" = AmqpResponseStatusCode.Forbidden\n}\n\n/**\n * Maps the amqp error conditions to the Error names.\n * @enum {ConditionErrorNameMapper}\n */\nexport enum ConditionErrorNameMapper {\n  /**\n   * Error is thrown when the address is already in use.\n   */\n  \"com.microsoft:address-already-in-use\" = \"AddressAlreadyInUseError\",\n  /**\n   * Error is thrown when the store lock is lost.\n   */\n  \"com.microsoft:store-lock-lost\" = \"StoreLockLostError\",\n  /**\n   * Error is thrown when a matching subscription is not found.\n   */\n  \"com.microsoft:no-matching-subscription\" = \"NoMatchingSubscriptionError\",\n  /**\n   * Error is thrown when an attempt is made to access a parition that is not owned by the\n   * requesting entity.\n   */\n  \"com.microsoft:partition-not-owned\" = \"PartitionNotOwnedError\",\n  /**\n   * Error is thrown when access to publisher has been revoked.\n   */\n  \"com.microsoft:publisher-revoked\" = \"PublisherRevokedError\",\n  /**\n   * Error is thrown when an attempt is made to create an entity that already exists.\n   */\n  \"com.microsoft:entity-already-exists\" = \"MessagingEntityAlreadyExistsError\",\n  /**\n   * Error is thrown when trying to access/connect to a disabled messaging entity.\n   */\n  \"com.microsoft:entity-disabled\" = \"MessagingEntityDisabledError\",\n  /**\n   * Error is thrown when the lock on the message is lost.\n   */\n  \"com.microsoft:message-lock-lost\" = \"MessageLockLostError\",\n  /**\n   * Error is thrown when the lock on the Azure ServiceBus session is lost.\n   */\n  \"com.microsoft:session-lock-lost\" = \"SessionLockLostError\",\n  /**\n   * Error is thrown when the Azure ServiceBus session cannot be locked.\n   */\n  \"com.microsoft:session-cannot-be-locked\" = \"SessionCannotBeLockedError\",\n  /**\n   * Error is thrown when an internal server error occured. You may have found a bug?\n   */\n  \"amqp:internal-error\" = \"InternalServerError\", // Retryable\n  /**\n   * Error for signaling general communication errors related to messaging operations.\n   */\n  \"amqp:not-found\" = \"ServiceCommunicationError\",\n  /**\n   * Error is thrown when the message is not found.\n   */\n  \"com.microsoft:message-not-found\" = \"MessageNotFoundError\",\n  /**\n   * Error is thrown when relay is not found.\n   */\n  \"com.microsoft:relay-not-found\" = \"RelayNotFoundError\",\n  /**\n   * Error is thrown when a feature is not implemented yet but the placeholder is present.\n   */\n  \"amqp:not-implemented\" = \"NotImplementedError\",\n  /**\n   * Error is thrown when an operation is attempted but is not allowed.\n   */\n  \"amqp:not-allowed\" = \"InvalidOperationError\",\n  /**\n   * Error is thrown the the Azure EventHub/ServiceBus quota has been exceeded.\n   * Quotas are reset periodically, this operation will have to wait until then.\n   * The messaging entity has reached its maximum allowable size.\n   * This can happen if the maximum number of receivers (which is 5) has already\n   * been opened on a per-consumer group level.\n   */\n  \"amqp:resource-limit-exceeded\" = \"QuotaExceededError\",\n  /**\n   * Error is thrown when the connection parameters are wrong and the server refused the connection.\n   */\n  \"amqp:unauthorized-access\" = \"UnauthorizedError\",\n  /**\n   * Error is thrown when the connection parameters are wrong and the server refused the connection.\n   */\n  \"com.microsoft:auth-failed\" = \"UnauthorizedError\",\n  /**\n   * Error is thrown when the service is unavailable. The operation should be retried.\n   */\n  \"com.microsoft:timeout\" = \"ServiceUnavailableError\", // Retryable\n  /**\n   * Error is thrown when no new messages are received for the specified time.\n   */\n  \"com.microsoft:message-wait-timeout\" = \"MessageWaitTimeout\",\n  /**\n   * Error is thrown when timeout happens for the said operation.\n   */\n  \"amqp:operation-timeout\" = \"OperationTimeoutError\",\n  /**\n   * Error is thrown when an argument has a value that is out of the admissible range.\n   */\n  \"com.microsoft:argument-out-of-range\" = \"ArgumentOutOfRangeError\",\n  /**\n   * Error is thrown when a condition that should have been met in order to execute an operation was not.\n   */\n  \"amqp:precondition-failed\" = \"PreconditionFailedError\",\n  /**\n   * Error is thrown when a condition that should have been met in order to execute an operation was not.\n   */\n  \"com.microsoft:precondition-failed\" = \"PreconditionFailedError\",\n  /**\n   * Error is thrown when data could not be decoded.\n   */\n  \"amqp:decode-error\" = \"DecodeError\",\n  /**\n   * Error is thrown when an invalid field was passed in a frame body, and the operation could not proceed.\n   */\n  \"amqp:invalid-field\" = \"InvalidFieldError\",\n  /**\n   * Error is thrown when the client attempted to work with a server entity to which it\n   * has no access because another client is working with it.\n   */\n  \"amqp:resource-locked\" = \"ResourceLockedError\",\n  /**\n   * Error is thrown when a server entity the client is working with has been deleted.\n   */\n  \"amqp:resource-deleted\" = \"ResourceDeletedError\",\n  /**\n   * Error is thrown when the peer sent a frame that is not permitted in the current state.\n   */\n  \"amqp:illegal-state\" = \"IllegalStateError\",\n  /**\n   * Error is thrown when the peer cannot send a frame because the smallest encoding of\n   * the performative with the currently valid values would be too large to fit within\n   * a frame of the agreed maximum frame size.\n   */\n  \"amqp:frame-size-too-small\" = \"FrameSizeTooSmallError\",\n  /**\n   * Error is thrown when an operator intervened to detach for some reason.\n   */\n  \"amqp:link:detach-forced\" = \"DetachForcedError\", // Retryable\n  /**\n   * Error is thrown when the peer sent more message transfers than currently allowed on the link.\n   */\n  \"amqp:link:transfer-limit-exceeded\" = \"TransferLimitExceededError\", // Retryable\n  /**\n   * Error is thrown when the message sent is too large: the maximum size is 256Kb.\n   */\n  \"amqp:link:message-size-exceeded\" = \"MessageTooLargeError\",\n  /**\n   * Error is thrown when the address provided cannot be resolved to a terminus at the current container.\n   */\n  \"amqp:link:redirect\" = \"LinkRedirectError\",\n  /**\n   * Error is thrown when two or more instances connect to the same partition\n   * with different epoch values.\n   */\n  \"amqp:link:stolen\" = \"ReceiverDisconnectedError\",\n  /**\n   * Error is thrown when the peer violated incoming window for the session.\n   */\n  \"amqp:session:window-violation\" = \"SessionWindowViolationError\",\n  /**\n   * Error is thrown when input was received for a link that was detached with an error.\n   */\n  \"amqp:session:errant-link\" = \"ErrantLinkError\",\n  /**\n   * Error is thrown when an attach was received using a handle that is already in use for an attached link.\n   */\n  \"amqp:session:handle-in-use\" = \"HandleInUseError\",\n  /**\n   * Error is thrown when a frame (other than attach) was received referencing a handle which is not\n   * currently in use of an attached link.\n   */\n  \"amqp:session:unattached-handle\" = \"UnattachedHandleError\",\n  /**\n   * Error is thrown when an operator intervened to close the connection for some reason.\n   */\n  \"amqp:connection:forced\" = \"ConnectionForcedError\", // Retryable\n  /**\n   * Error is thrown when a valid frame header cannot be formed from the incoming byte stream.\n   */\n  \"amqp:connection:framing-error\" = \"FramingError\",\n  /**\n   * Error is thrown when the container is no longer available on the current connection.\n   */\n  \"amqp:connection:redirect\" = \"ConnectionRedirectError\",\n  /**\n   * Error is thrown when the server is busy. Callers should wait a while and retry the operation.\n   */\n  \"com.microsoft:server-busy\" = \"ServerBusyError\", // Retryable\n  /**\n   * Error is thrown when an incorrect argument was received.\n   */\n  \"com.microsoft:argument-error\" = \"ArgumentError\",\n  /**\n   * Error is thrown when server cancels the operation due to an internal issue.\n   */\n  \"com.microsoft:operation-cancelled\" = \"OperationCancelledError\", // Retryable\n  /**\n   * Error is thrown when the client sender does not have enough link credits to send the message.\n   */\n  \"client.sender:not-enough-link-credit\" = \"SenderBusyError\", // Retryable\n  /**\n   * Error is thrown when a low level system error is thrown by node.js.\n   * {@link https://nodejs.org/dist/latest-v8.x/docs/api/all.html#errors_class_system_error}\n   */\n  \"system:error\" = \"SystemError\"\n}\n\n/**\n * Maps the Error names to the amqp error conditions.\n * @enum {ErrorNameConditionMapper}\n */\nexport enum ErrorNameConditionMapper {\n  /**\n   * Error is thrown when the address is already in use.\n   */\n  AddressAlreadyInUseError = \"com.microsoft:address-already-in-use\",\n  /**\n   * Error is thrown when the store lock is lost.\n   */\n  StoreLockLostError = \"com.microsoft:store-lock-lost\",\n  /**\n   * Error is thrown when a matching subscription is not found.\n   */\n  NoMatchingSubscriptionError = \"com.microsoft:no-matching-subscription\",\n  /**\n   * Error is thrown when an attempt is made to access a parition that is not owned by the\n   * requesting entity.\n   */\n  PartitionNotOwnedError = \"com.microsoft:partition-not-owned\",\n  /**\n   * Error is thrown when access to publisher has been revoked.\n   */\n  PublisherRevokedError = \"com.microsoft:publisher-revoked\",\n  /**\n   * Error is thrown when an attempt is made to create an entity that already exists.\n   */\n  MessagingEntityAlreadyExistsError = \"com.microsoft:entity-already-exists\",\n  /**\n   * Error is thrown when trying to access/connect to a disabled messaging entity.\n   */\n  MessagingEntityDisabledError = \"com.microsoft:entity-disabled\",\n  /**\n   * Error is thrown when the lock on the message is lost.\n   */\n  MessageLockLostError = \"com.microsoft:message-lock-lost\",\n  /**\n   * Error is thrown when the lock on the Azure ServiceBus session is lost.\n   */\n  SessionLockLostError = \"com.microsoft:session-lock-lost\",\n  /**\n   * Error is thrown when the Azure ServiceBus session cannot be locked.\n   */\n  SessionCannotBeLockedError = \"com.microsoft:session-cannot-be-locked\",\n  /**\n   * Error is thrown when an internal server error occured. You may have found a bug?\n   */\n  InternalServerError = \"amqp:internal-error\", // Retryable\n  /**\n   * Error for signaling general communication errors related to messaging operations.\n   */\n  ServiceCommunicationError = \"amqp:not-found\",\n  /**\n   * Error is thrown when message is not found.\n   */\n  MessageNotFoundError = \"com.microsoft:message-not-found\",\n  /**\n   * Error is thrown when relay is not found.\n   */\n  RelayNotFoundError = \"com.microsoft:relay-not-found\",\n  /**\n   * Error is thrown when a feature is not implemented yet but the placeholder is present.\n   */\n  NotImplementedError = \"amqp:not-implemented\",\n  /**\n   * Error is thrown when an operation is attempted but is not allowed.\n   */\n  InvalidOperationError = \"amqp:not-allowed\",\n  /**\n   * Error is thrown the the Azure EventHub/ServiceBus quota has been exceeded.\n   * Quotas are reset periodically, this operation will have to wait until then.\n   * The messaging entity has reached its maximum allowable size.\n   * This can happen if the maximum number of receivers (which is 5) has already\n   * been opened on a per-consumer group level.\n   */\n  QuotaExceededError = \"amqp:resource-limit-exceeded\",\n  /**\n   * Error is thrown when the connection parameters are wrong and the server refused the connection.\n   */\n  UnauthorizedError = \"amqp:unauthorized-access\",\n  /**\n   * Error is thrown when the service is unavailable. The operation should be retried.\n   */\n  ServiceUnavailableError = \"com.microsoft:timeout\", // Retryable\n  /**\n   * Error is thrown when no new messages are received for the specified time.\n   */\n  MessageWaitTimeout = \"com.microsoft:message-wait-timeout\",\n  /**\n   * Error is thrown when timeout happens for the said operation.\n   */\n  OperationTimeoutError = \"amqp:operation-timeout\",\n  /**\n   * Error is thrown when an argument has a value that is out of the admissible range.\n   */\n  ArgumentOutOfRangeError = \"com.microsoft:argument-out-of-range\",\n  /**\n   * Error is thrown when a condition that should have been met in order to execute an operation was not.\n   */\n  PreconditionFailedError = \"amqp:precondition-failed\",\n  /**\n   * Error is thrown when data could not be decoded.\n   */\n  DecodeError = \"amqp:decode-error\",\n  /**\n   * Error is thrown when an invalid field was passed in a frame body, and the operation could not proceed.\n   */\n  InvalidFieldError = \"amqp:invalid-field\",\n  /**\n   * Error is thrown when the client attempted to work with a server entity to which it\n   * has no access because another client is working with it.\n   */\n  ResourceLockedError = \"amqp:resource-locked\",\n  /**\n   * Error is thrown when a server entity the client is working with has been deleted.\n   */\n  ResourceDeletedError = \"amqp:resource-deleted\",\n  /**\n   * Error is thrown when the peer sent a frame that is not permitted in the current state.\n   */\n  IllegalStateError = \"amqp:illegal-state\",\n  /**\n   * Error is thrown when the peer cannot send a frame because the smallest encoding of\n   * the performative with the currently valid values would be too large to fit within\n   * a frame of the agreed maximum frame size.\n   */\n  FrameSizeTooSmallError = \"amqp:frame-size-too-small\",\n  /**\n   * Error is thrown when an operator intervened to detach for some reason.\n   */\n  DetachForcedError = \"amqp:link:detach-forced\", // Retryable\n  /**\n   * Error is thrown when the peer sent more message transfers than currently allowed on the link.\n   */\n  TransferLimitExceededError = \"amqp:link:transfer-limit-exceeded\", // Retryable\n  /**\n   * Error is thrown when the message sent is too large: the maximum size is 256Kb.\n   */\n  MessageTooLargeError = \"amqp:link:message-size-exceeded\",\n  /**\n   * Error is thrown when the address provided cannot be resolved to a terminus at the current container.\n   */\n  LinkRedirectError = \"amqp:link:redirect\",\n  /**\n   * Error is thrown when two or more instances connect to the same partition\n   * with different epoch values.\n   */\n  ReceiverDisconnectedError = \"amqp:link:stolen\",\n  /**\n   * Error is thrown when the peer violated incoming window for the session.\n   */\n  SessionWindowViolationError = \"amqp:session:window-violation\",\n  /**\n   * Error is thrown when input was received for a link that was detached with an error.\n   */\n  ErrantLinkError = \"amqp:session:errant-link\",\n  /**\n   * Error is thrown when an attach was received using a handle that is already in use for an attached link.\n   */\n  HandleInUseError = \"amqp:session:handle-in-use\",\n  /**\n   * Error is thrown when a frame (other than attach) was received referencing a handle which is not\n   * currently in use of an attached link.\n   */\n  UnattachedHandleError = \"amqp:session:unattached-handle\",\n  /**\n   * Error is thrown when an operator intervened to close the connection for some reason.\n   */\n  ConnectionForcedError = \"amqp:connection:forced\", // Retryable\n  /**\n   * Error is thrown when a valid frame header cannot be formed from the incoming byte stream.\n   */\n  FramingError = \"amqp:connection:framing-error\",\n  /**\n   * Error is thrown when the container is no longer available on the current connection.\n   */\n  ConnectionRedirectError = \"amqp:connection:redirect\",\n  /**\n   * Error is thrown when the server is busy. Callers should wait a while and retry the operation.\n   */\n  ServerBusyError = \"com.microsoft:server-busy\", // Retryable\n  /**\n   * Error is thrown when an incorrect argument was received.\n   */\n  ArgumentError = \"com.microsoft:argument-error\",\n  /**\n   * Error is thrown when server cancels the operation due to an internal issue.\n   */\n  OperationCancelledError = \"com.microsoft:operation-cancelled\", // Retryable\n  /**\n   * Error is thrown when the client sender does not have enough link credits to send the message.\n   */\n  SenderBusyError = \"client.sender:not-enough-link-credit\", // Retryable\n  /**\n   * Error is thrown when a low level system error is thrown by node.js.\n   * {@link https://nodejs.org/api/errors.html#errors_class_systemerror}\n   */\n  SystemError = \"system:error\"\n}\n\n/**\n * Describes the base class for Messaging Error.\n * @class {MessagingError}\n * @extends Error\n */\nexport class MessagingError extends Error {\n  /**\n   * @property {string} [condition] The error condition.\n   */\n  condition?: string;\n  /**\n   * @property {string} name The error name. Default value: \"MessagingError\".\n   */\n  name: string = \"MessagingError\";\n  /**\n   * @property {boolean} translated Has the error been translated. Default: true.\n   */\n  translated: boolean = true;\n  /**\n   *\n   * @property {boolean} retryable Describes whether the error is retryable. Default: true.\n   */\n  retryable: boolean = true;\n  /**\n   * @property {any} [info] Any additional error information given by the service.\n   */\n  info?: any;\n  /**\n   * @param {string} message The error message that provides more information about the error.\n   */\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Provides a list of retryable AMQP errors.\n * \"InternalServerError\", \"ServerBusyError\", \"ServiceUnavailableError\", \"OperationCancelledError\",\n * \"SenderBusyError\", \"MessagingError\", \"DetachForcedError\", \"ConnectionForcedError\",\n * \"TransferLimitExceededError\"\n */\nexport const retryableErrors: string[] = [\n  \"InternalServerError\",\n  \"ServerBusyError\",\n  \"ServiceUnavailableError\",\n  \"OperationCancelledError\",\n  \"SenderBusyError\",\n  \"MessagingError\",\n  \"DetachForcedError\",\n  \"ConnectionForcedError\",\n  \"TransferLimitExceededError\"\n];\n\n/**\n * Maps some SytemErrors to amqp error conditions\n * @enum SystemErrorConditionMapper\n */\nexport enum SystemErrorConditionMapper {\n  ENOTFOUND = \"amqp:not-found\",\n  EBUSY = \"com.microsoft:server-busy\",\n  ECONNREFUSED = \"amqp:connection:forced\",\n  ETIMEDOUT = \"com.microsoft:timeout\",\n  ECONNRESET = \"com.microsoft:timeout\",\n  ENETDOWN = \"com.microsoft:timeout\",\n  EHOSTDOWN = \"com.microsoft:timeout\",\n  ENETRESET = \"com.microsoft:timeout\",\n  ENETUNREACH = \"com.microsoft:timeout\",\n  ENONET = \"com.microsoft:timeout\"\n}\n\nexport function isSystemError(err: any): boolean {\n  let result: boolean = false;\n  if (\n    err.code &&\n    typeof err.code === \"string\" &&\n    (err.syscall && typeof err.syscall === \"string\") &&\n    (err.errno && (typeof err.errno === \"string\" || typeof err.errno === \"number\"))\n  ) {\n    result = true;\n  }\n  return result;\n}\n\n/**\n * @internal\n * Since browser doesnt differentiate between the various kinds of service communication errors,\n * this utility is used to look at the error target to identify such category of errors.\n * For more information refer to - https://html.spec.whatwg.org/multipage/comms.html#feedback-from-the-protocol\n * @param err object that may contain error information\n */\nfunction isBrowserWebsocketError(err: any): boolean {\n  let result: boolean = false;\n  if (\n    !isNode &&\n    window &&\n    err.type === \"error\" &&\n    err.target instanceof (window as any).WebSocket\n  ) {\n    result = true;\n  }\n  return result;\n}\n\n/**\n * Translates the AQMP error received at the protocol layer or a generic Error into a MessagingError.\n *\n * @param {AmqpError} err The amqp error that was received.\n * @returns {MessagingError} MessagingError object.\n */\nexport function translate(err: AmqpError | Error): MessagingError {\n  if ((err as MessagingError).translated) {\n    // already translated\n    return err as MessagingError;\n  }\n\n  let error: MessagingError = err as MessagingError;\n\n  // Built-in errors like TypeError and RangeError should not be retryable as these indicate issues\n  // with user input and not an issue with the Messaging process.\n  if (err instanceof TypeError || err instanceof RangeError) {\n    error.retryable = false;\n    return error;\n  }\n\n  if (isAmqpError(err)) {\n    // translate\n    const condition = (err as AmqpError).condition;\n    const description = (err as AmqpError).description as string;\n    error = new MessagingError(description);\n    if ((err as any).stack) error.stack = (err as any).stack;\n    error.info = (err as AmqpError).info;\n    error.condition = condition;\n    if (condition) {\n      error.name = (<any>ConditionErrorNameMapper)[condition];\n    }\n    if (!error.name) error.name = \"MessagingError\";\n    if (\n      description &&\n      (description.includes(\"status-code: 404\") ||\n        description.match(/The messaging entity .* could not be found.*/i) !== null)\n    ) {\n      error.name = \"MessagingEntityNotFoundError\";\n    }\n    if (retryableErrors.indexOf(error.name) === -1) {\n      // not found\n      error.retryable = false;\n    }\n  } else if (isSystemError(err)) {\n    // translate\n    const condition = (err as any).code;\n    const description = (err as Error).message;\n    error = new MessagingError(description);\n    if ((err as any).stack) error.stack = (err as any).stack;\n    if (condition) {\n      const amqpErrorCondition = (<any>SystemErrorConditionMapper)[condition];\n      error.name = (<any>ConditionErrorNameMapper)[amqpErrorCondition];\n    }\n    if (!error.name) error.name = \"SystemError\";\n    if (retryableErrors.indexOf(error.name) === -1) {\n      // not found\n      error.retryable = false;\n    }\n  } else if (isBrowserWebsocketError(err)) {\n    // Translate browser communication errors during opening handshake to generic SeviceCommunicationError\n    error = new MessagingError(\"Websocket connection failed.\");\n    error.name = ConditionErrorNameMapper[ErrorNameConditionMapper.ServiceCommunicationError];\n    error.retryable = false;\n  } else {\n    // Translate a generic error into MessagingError.\n    error = new MessagingError((err as Error).message);\n    error.stack = (err as Error).stack;\n  }\n  return error;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport debugModule from \"debug\";\n/**\n * @ignore\n * log statements for cbs\n */\nexport const cbs = debugModule(\"azure:amqp-common:cbs\");\n/**\n * @ignore\n * log statements for error\n */\nexport const error = debugModule(\"azure:amqp-common:error\");\n/**\n * @ignore\n * log statements for datatransformer\n */\nexport const transformer = debugModule(\"azure:amqp-common:datatransformer\");\n/**\n * @ignore\n * log statements for messageHeader\n */\nexport const msgHeader = debugModule(\"azure:amqp-common:messageHeader\");\n/**\n * @ignore\n * log statements for messageProperties\n */\nexport const msgProperties = debugModule(\"azure:amqp-common:messageProperties\");\n/**\n * @ignore\n * log statements for retry\n */\nexport const retry = debugModule(\"azure:amqp-common:retry\");\n/**\n * @ignore\n * log statements for reqreslink\n */\nexport const reqres = debugModule(\"azure:amqp-common:reqreslink\");\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { resolve, CONNREFUSED, TIMEOUT } from \"dns\";\nimport * as log from \"../log\";\n\n/**\n * Checks whether a network connection is detected.\n * @ignore\n * @internal\n */\nexport function checkNetworkConnection(host: string): Promise<boolean> {\n  return new Promise((res) => {\n    log.retry(\"Calling dns.resolve to determine network connection status.\");\n    resolve(host, function(err: any): void {\n      if (err) {\n        log.retry(\n          \"Error thrown from dns.resolve in network connection check: '%s', %O\",\n          err.code || err.name,\n          err\n        );\n        // List of possible DNS error codes: https://nodejs.org/dist/latest-v12.x/docs/api/dns.html#dns_error_codes\n        // Only when dns.resolve returns an error we expect to see when the network is down, resolve as 'false'.\n        if (err.code === CONNREFUSED || err.code === TIMEOUT) {\n          return res(false);\n        }\n      } else {\n        log.retry(\"Successfully resolved host via dns.resolve in network connection check.\");\n      }\n\n      return res(true);\n    });\n  });\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { translate, MessagingError } from \"./errors\";\nimport { delay } from \"./util/utils\";\nimport * as log from \"./log\";\nimport { defaultRetryAttempts, defaultDelayBetweenRetriesInSeconds } from \"./util/constants\";\nimport { checkNetworkConnection } from \"./util/checkNetworkConnection\";\n\n/**\n * Determines whether the object is a Delivery object.\n * @ignore\n */\nfunction isDelivery(obj: any): boolean {\n  let result: boolean = false;\n  if (\n    obj &&\n    typeof obj.id === \"number\" &&\n    typeof obj.settled === \"boolean\" &&\n    typeof obj.remote_settled === \"boolean\" &&\n    typeof obj.format === \"number\"\n  ) {\n    result = true;\n  }\n  return result;\n}\n\n/**\n * Describes the retry operation type.\n * @enum RetryOperationType\n */\nexport enum RetryOperationType {\n  cbsAuth = \"cbsAuth\",\n  connection = \"connection\",\n  management = \"management\",\n  receiverLink = \"receiverLink\",\n  senderLink = \"senderLink\",\n  sendMessage = \"sendMessage\",\n  session = \"session\"\n}\n\n/**\n * Describes the parameters that need to be configured for the retry operation.\n * @interface RetryConfig\n */\nexport interface RetryConfig<T> {\n  /**\n   * @property {Promise<T>} operation The operation that needs to be retried.\n   */\n  operation: () => Promise<T>;\n  /**\n   * @property {string} connectionId The connection identifier. Used in logging information.\n   * Extremely useful when multiple connections are logged in the same file.\n   */\n  connectionId: string;\n  /**\n   * @property {RetryOperationType} operationType The name/type of operation to be performed.\n   * Extremely useful in providing better debug logs.\n   */\n  operationType: RetryOperationType;\n  /**\n   * @property {number} [times] Number of times the operation needs to be retried in case\n   * of error. Default: 3.\n   */\n  times?: number;\n  /**\n   * @property {number} [delayInSeconds] Amount of time to wait in seconds before making the\n   * next attempt. Default: 15.\n   */\n  delayInSeconds?: number;\n  /**\n   * @property {string} connectionHost The host \"<yournamespace>.servicebus.windows.net\".\n   * Used to check network connectivity.\n   */\n  connectionHost?: string;\n}\n\n/**\n * Validates the retry config.\n * @ignore\n */\nfunction validateRetryConfig<T>(config: RetryConfig<T>): void {\n  if (!config.operation) {\n    throw new TypeError(\"Missing 'operation' in retry configuration\");\n  }\n\n  if (!config.connectionId) {\n    throw new TypeError(\"Missing 'connectionId' in retry configuration\");\n  }\n\n  if (!config.operationType) {\n    throw new TypeError(\"Missing 'operationType' in retry configuration\");\n  }\n}\n\n/**\n * It will attempt to linearly retry an operation specified number of times with a specified\n * delay in between each retry. The retries will only happen if the error is retryable.\n *\n * @param {RetryConfig<T>} config Parameters to configure retry operation.\n *\n * @return {Promise<T>} Promise<T>.\n */\nexport async function retry<T>(config: RetryConfig<T>): Promise<T> {\n  validateRetryConfig(config);\n  if (config.times == undefined) config.times = defaultRetryAttempts;\n  if (config.delayInSeconds == undefined) {\n    config.delayInSeconds = defaultDelayBetweenRetriesInSeconds;\n  }\n  let lastError: MessagingError | undefined;\n  let result: any;\n  let success = false;\n  for (let i = 0; i < config.times; i++) {\n    const j = i + 1;\n    log.retry(\n      \"[%s] Retry for '%s', attempt number: %d\",\n      config.connectionId,\n      config.operationType,\n      j\n    );\n    try {\n      result = await config.operation();\n      success = true;\n      log.retry(\n        \"[%s] Success for '%s', after attempt number: %d.\",\n        config.connectionId,\n        config.operationType,\n        j\n      );\n      if (result && !isDelivery(result)) {\n        log.retry(\n          \"[%s] Success result for '%s': %O\",\n          config.connectionId,\n          config.operationType,\n          result\n        );\n      }\n      break;\n    } catch (err) {\n      if (!err.translated) {\n        err = translate(err);\n      }\n\n      if (!err.retryable && err.name === \"ServiceCommunicationError\" && config.connectionHost) {\n        const isConnected = await checkNetworkConnection(config.connectionHost);\n        if (!isConnected) {\n          err.name = \"ConnectionLostError\";\n          err.retryable = true;\n        }\n      }\n      lastError = err;\n      log.error(\n        \"[%s] Error occured for '%s' in attempt number %d: %O\",\n        config.connectionId,\n        config.operationType,\n        j,\n        err\n      );\n      if (lastError && lastError.retryable) {\n        log.error(\n          \"[%s] Sleeping for %d seconds for '%s'.\",\n          config.connectionId,\n          config.delayInSeconds,\n          config.operationType\n        );\n        await delay(config.delayInSeconds * 1000);\n        continue;\n      } else {\n        break;\n      }\n    }\n  }\n  if (success) {\n    return result;\n  } else {\n    throw lastError;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport * as Constants from \"./util/constants\";\nimport { retry, RetryConfig, RetryOperationType } from \"./retry\";\nimport {\n  Session,\n  Connection,\n  Sender,\n  Receiver,\n  Message as AmqpMessage,\n  EventContext,\n  AmqpError,\n  SenderOptions,\n  ReceiverOptions,\n  ReceiverEvents,\n  ReqResLink,\n  generate_uuid\n} from \"rhea-promise\";\nimport { translate, ConditionStatusMapper } from \"./errors\";\nimport * as log from \"./log\";\n\n/**\n * Describes the options that can be specified while sending a request.\n * @interface SendRequestOptions\n */\nexport interface SendRequestOptions {\n  /**\n   * @property {number} [timeoutInSeconds] Max time to wait for the operation to complete.\n   * Default: `10 seconds`.\n   */\n  timeoutInSeconds?: number;\n  /**\n   * @property {number} [times] Number of times the operation needs to be retried in case\n   * of error. Default: 3.\n   */\n  times?: number;\n  /**\n   * @property {number} [delayInSeconds] Amount of time to wait in seconds before making the\n   * next attempt. Default: 15.\n   */\n  delayInSeconds?: number;\n}\n\n/**\n * Describes an amqp request(sender)-response(receiver) link that is created over an amqp session.\n * @class RequestResponseLink\n */\nexport class RequestResponseLink implements ReqResLink {\n  /**\n   * @constructor\n   * @param {Session} session The amqp session.\n   * @param {Sender} sender The amqp sender link.\n   * @param {Receiver} receiver The amqp receiver link.\n   */\n  constructor(\n    public session: Session,\n    public sender: Sender,\n    public receiver: Receiver\n  ) {\n    this.session = session;\n    this.sender = sender;\n    this.receiver = receiver;\n  }\n\n  /**\n   * Provides the underlying amqp connection object.\n   * @returns {Connection} Connection.\n   */\n  get connection(): Connection {\n    return this.session.connection;\n  }\n\n  /**\n   * Indicates whether the session and the sender and receiver links are all open or closed.\n   * @returns {boolean} boolean - `true` - `open`, `false` - `closed`.\n   */\n  isOpen(): boolean {\n    return (\n      this.session.isOpen() && this.sender.isOpen() && this.receiver.isOpen()\n    );\n  }\n\n  /**\n   * Sends the given request message and returns the received response. If the operation is not\n   * completed in the provided timeout in seconds `default: 10`, then the request will be retried\n   * linearly for the provided number of times `default: 3` with the provided delay in seconds\n   * `default: 15` between each attempt.\n   *\n   * @param {Message} request The AMQP (request) message.\n   * @param {SendRequestOptions} [options] Options that can be provided while sending a request.\n   * @returns {Promise<Message>} Promise<Message> The AMQP (response) message.\n   */\n  sendRequest(\n    request: AmqpMessage,\n    options?: SendRequestOptions\n  ): Promise<AmqpMessage> {\n    if (!options) options = {};\n\n    if (!options.timeoutInSeconds) {\n      options.timeoutInSeconds = Constants.defaultOperationTimeoutInSeconds;\n    }\n\n    let count: number = 0;\n\n    const sendRequestPromise = () =>\n      new Promise<AmqpMessage>((resolve: any, reject: any) => {\n        let waitTimer: any;\n        let timeOver: boolean = false;\n        type NormalizedInfo = {\n          statusCode: number;\n          statusDescription: string;\n          errorCondition: string;\n        };\n\n        count++;\n        if (count !== 1) {\n          // Generate a new message_id every time after the first attempt\n          request.message_id = generate_uuid();\n        } else if (!request.message_id) {\n          // Set the message_id in the first attempt only if it is not set\n          request.message_id = generate_uuid();\n        }\n\n        // Handle different variations of property names in responses emitted by EventHubs and ServiceBus.\n        const getCodeDescriptionAndError = (props: any): NormalizedInfo => {\n          if (!props) props = {};\n          return {\n            statusCode: (props[Constants.statusCode] ||\n              props.statusCode) as number,\n            statusDescription: (props[Constants.statusDescription] ||\n              props.statusDescription) as string,\n            errorCondition: (props[Constants.errorCondition] ||\n              props.errorCondition) as string\n          };\n        };\n\n        const messageCallback = (context: EventContext) => {\n          // remove the event listener as this will be registered next time when someone makes a request.\n          this.receiver.removeListener(ReceiverEvents.message, messageCallback);\n          const info = getCodeDescriptionAndError(\n            context.message!.application_properties\n          );\n          const responseCorrelationId = context.message!.correlation_id;\n          log.reqres(\n            \"[%s] %s response: \",\n            this.connection.id,\n            request.to || \"$management\",\n            context.message\n          );\n          if (info.statusCode > 199 && info.statusCode < 300) {\n            if (\n              request.message_id === responseCorrelationId ||\n              request.correlation_id === responseCorrelationId\n            ) {\n              if (!timeOver) {\n                clearTimeout(waitTimer);\n              }\n              log.reqres(\n                \"[%s] request-messageId | '%s' == '%s' | response-correlationId.\",\n                this.connection.id,\n                request.message_id,\n                responseCorrelationId\n              );\n              return resolve(context.message);\n            } else {\n              log.error(\n                \"[%s] request-messageId | '%s' != '%s' | response-correlationId. \" +\n                  \"Hence dropping this response and waiting for the next one.\",\n                this.connection.id,\n                request.message_id,\n                responseCorrelationId\n              );\n            }\n          } else {\n            const condition =\n              info.errorCondition ||\n              ConditionStatusMapper[info.statusCode] ||\n              \"amqp:internal-error\";\n            const e: AmqpError = {\n              condition: condition,\n              description: info.statusDescription\n            };\n            const error = translate(e);\n            log.error(error);\n            return reject(error);\n          }\n        };\n\n        const actionAfterTimeout = () => {\n          timeOver = true;\n          this.receiver.removeListener(ReceiverEvents.message, messageCallback);\n          const address = this.receiver.address || \"address\";\n          const desc: string =\n            `The request with message_id \"${\n              request.message_id\n            }\" to \"${address}\" ` +\n            `endpoint timed out. Please try again later.`;\n          const e: AmqpError = {\n            condition: ConditionStatusMapper[408],\n            description: desc\n          };\n          return reject(translate(e));\n        };\n\n        this.receiver.on(ReceiverEvents.message, messageCallback);\n        waitTimer = setTimeout(\n          actionAfterTimeout,\n          options!.timeoutInSeconds! * 1000\n        );\n        log.reqres(\n          \"[%s] %s request sent: %O\",\n          this.connection.id,\n          request.to || \"$managment\",\n          request\n        );\n        this.sender.send(request);\n      });\n    const config: RetryConfig<AmqpMessage> = {\n      operation: sendRequestPromise,\n      connectionId: this.connection.id,\n      operationType:\n        request.to && request.to === Constants.cbsEndpoint\n          ? RetryOperationType.cbsAuth\n          : RetryOperationType.management,\n      delayInSeconds: options.delayInSeconds,\n      times: options.times\n    };\n    return retry<AmqpMessage>(config);\n  }\n\n  /**\n   * Closes the sender, receiver link and the underlying session.\n   * @returns {Promise<void>} Promise<void>\n   */\n  async close(): Promise<void> {\n    await this.sender.close();\n    await this.receiver.close();\n    await this.session.close();\n  }\n\n  /**\n   * Removes the sender, receiver link and it's underlying session.\n   * @returns {void} void\n   */\n  remove(): void {\n    this.sender.remove();\n    this.receiver.remove();\n    this.session.remove();\n  }\n\n  /**\n   * Creates an amqp request/response link.\n   *\n   * @param {Connection} connection The amqp connection.\n   * @param {SenderOptions} senderOptions Options that must be provided to create the sender link.\n   * @param {ReceiverOptions} receiverOptions Options that must be provided to create the receiver link.\n   * @returns {Promise<RequestResponseLink>} Promise<RequestResponseLink>\n   */\n  static async create(\n    connection: Connection,\n    senderOptions: SenderOptions,\n    receiverOptions: ReceiverOptions\n  ): Promise<RequestResponseLink> {\n    const session = await connection.createSession();\n    const sender = await session.createSender(senderOptions);\n    const receiver = await session.createReceiver(receiverOptions);\n    log.reqres(\n      \"[%s] Successfully created the sender and receiver links on the same session.\",\n      connection.id\n    );\n    return new RequestResponseLink(session, sender, receiver);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { message } from \"rhea-promise\";\nimport * as log from \"./log\";\nimport isBuffer from \"is-buffer\";\nimport { Buffer } from \"buffer\";\n\n/**\n * Describes the transformations that can be performed to encode/decode the data before sending it\n * on (or receiving it from) the wire.\n * @interface DataTransformer\n */\nexport interface DataTransformer {\n  /**\n   * @property {Function} encode A function that takes the body property from an EventData object\n   * and returns an encoded body (some form of AMQP type).\n   */\n  encode: (body: any) => any;\n  /**\n   * @property {Function} decode A function that takes the body property from an AMQP message\n   * and returns the decoded message body. If it cannot decode the body then it returns the body\n   * as-is.\n   */\n  decode: (body: any) => any;\n}\n\n/**\n * The default data transformer that will be used by the Azure SDK.\n */\nexport class DefaultDataTransformer implements DataTransformer {\n  /**\n   * A function that takes the body property from an EventData object\n   * and returns an encoded body (some form of AMQP type).\n   *\n   * @param {*} body The AMQP message body\n   * @return {DataSection} encodedBody - The encoded AMQP message body as an AMQP Data type\n   * (data section in rhea terms). Section object with following properties:\n   * - typecode: 117 (0x75)\n   * - content: The given AMQP message body as a Buffer.\n   * - multiple: true | undefined.\n   */\n  encode(body: any): any {\n    let result: any;\n    log.transformer(\n      \"[encode] The given message body that needs to be encoded is: \",\n      body\n    );\n    if (isBuffer(body)) {\n      result = message.data_section(body);\n    } else {\n      // string, undefined, null, boolean, array, object, number should end up here\n      // coercing undefined to null as that will ensure that null value will be given to the\n      // customer on receive.\n      if (body === undefined) body = null; // tslint:disable-line\n      try {\n        const bodyStr = JSON.stringify(body);\n        result = message.data_section(Buffer.from(bodyStr, \"utf8\"));\n      } catch (err) {\n        const msg =\n          `An error occurred while executing JSON.stringify() on the given body ` +\n          body +\n          `${err ? err.stack : JSON.stringify(err)}`;\n        log.error(\"[encode] \" + msg);\n        throw new Error(msg);\n      }\n    }\n    log.transformer(\"[encode] The encoded message body is: %O.\", result);\n    return result;\n  }\n\n  /**\n   * @property {Function} [decode] A function that takes the body property from an AMQP message\n   * (an AMQP Data type (data section in rhea terms)) and returns the decoded message body.\n   * If it cannot decode the body then it returns the body\n   * as-is.\n   * @param {DataSection} body The AMQP message body\n   * @return {*} decoded body or the given body as-is.\n   */\n  decode(body: any): any {\n    let processedBody: any = body;\n    try {\n      log.transformer(\n        \"[decode] Received message body for decoding is: %O\",\n        body\n      );\n      if (body.content && isBuffer(body.content)) {\n        // This indicates that we are getting the AMQP described type. Let us try decoding it.\n        processedBody = body.content;\n      }\n      try {\n        // Trying to stringify and JSON.parse() anything else will fail flat and we shall return\n        // the original type back\n        const bodyStr: string = processedBody.toString(\"utf8\");\n        processedBody = JSON.parse(bodyStr);\n      } catch (err) {\n        log.error(\n          \"[decode] An error occurred while trying JSON.parse() on the received body. \" +\n            \"The error is %O\",\n          err\n        );\n      }\n    } catch (err) {\n      log.error(\n        \"[decode] An error occurred while decoding the received message body. The error is: %O\",\n        err\n      );\n    }\n    log.transformer(\"[decode] The decoded message body is: %O\", processedBody);\n    return processedBody;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * Describes the type of supported tokens.\n * @enum TokenType\n */\nexport enum TokenType {\n  /**\n   * The \"jwt\" token type. Used with AADTokenProvider.\n   */\n  CbsTokenTypeJwt = \"jwt\",\n  /**\n   * The sas token type. Used with SasTokenProvider.\n   */\n  CbsTokenTypeSas = \"servicebus.windows.net:sastoken\"\n}\n\n/**\n * Provides information about the token.\n * @interface TokenInfo\n */\nexport interface TokenInfo {\n  /**\n   * @property {string} tokenType - The type of token - \"jwt\" or \"servicebus.windows.net:sastoken\".\n   */\n  tokenType: TokenType;\n  /**\n   * @property {string} token - The access token.\n   */\n  token: string;\n  /**\n   * @property {number} expiry - The token expiration time in seconds.\n   */\n  expiry: number;\n}\n\n/**\n * Describes the base token provider.\n * @interface TokenProvider\n */\nexport interface TokenProvider {\n  /**\n   * @property {number} tokenRenewalMarginInSeconds - The number of seconds within which it is good to renew the token. Default = 900 seconds (15 minutes).\n   */\n  tokenRenewalMarginInSeconds: number;\n  /**\n   * @property {number} tokenValidTimeInSeconds - The number of seconds for which the token is valid. Default = 3600 seconds (1 hour).\n   */\n  tokenValidTimeInSeconds: number;\n  /**\n   * Gets the token for the desired audience.\n   * @param {string} [audience] - The audience for which the token is desired.\n   * @returns {Promise<TokenInfo>}\n   */\n  getToken(audience?: string): Promise<TokenInfo>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport {\n  parseConnectionString,\n  ServiceBusConnectionStringModel\n} from \"../util/utils\";\nimport { TokenInfo, TokenProvider, TokenType } from \"./token\";\nimport { Buffer } from \"buffer\";\nimport isBuffer from \"is-buffer\";\nimport jssha from \"jssha\";\n\n/**\n * @class SasTokenProvider\n * Defines the SasTokenProvider.\n */\nexport class SasTokenProvider implements TokenProvider {\n  /**\n   * @property {string} namespace - The namespace of the EventHub/ServiceBus instance.\n   */\n  namespace: string;\n\n  /**\n   * @property {string} keyName - The name of the EventHub/ServiceBus key.\n   */\n  keyName: string;\n\n  /**\n   * @property {string} key - The secret value associated with the above EventHub/ServiceBus key.\n   */\n  key: string;\n  /**\n   * @property {number} tokenRenewalMarginInSeconds - The number of seconds within which it\n   * is good to renew the token. Default = 900 seconds (15 minutes).\n   */\n  tokenRenewalMarginInSeconds: number;\n  /**\n   * @property {number} tokenValidTimeInSeconds - The number of seconds for which the token\n   * is valid. Default = 3600 seconds (1 hour).\n   */\n  tokenValidTimeInSeconds: number;\n\n  /**\n   * Initializes a new instance of SasTokenProvider\n   * @constructor\n   * @param {string} namespace - The namespace of the EventHub/ServiceBus instance.\n   * @param {string} keyName - The name of the EventHub/ServiceBus key.\n   * @param {string} key - The secret value associated with the above EventHub/ServiceBus key\n   */\n  constructor(\n    namespace: string,\n    keyName: string,\n    key: string,\n    tokenValidTimeInSeconds?: number,\n    tokenRenewalMarginInSeconds?: number\n  ) {\n    this.namespace = namespace;\n    this.keyName = keyName;\n    this.key = key;\n    this.tokenValidTimeInSeconds = tokenValidTimeInSeconds || 3600;\n    this.tokenRenewalMarginInSeconds = tokenRenewalMarginInSeconds || 900;\n    if (this.tokenValidTimeInSeconds <= this.tokenRenewalMarginInSeconds) {\n      throw new Error(\n        \"tokenRenewalMarginInSeconds must be less than tokenValidTimeInSeconds\"\n      );\n    }\n  }\n\n  /**\n   * Gets the sas token for the specified audience\n   * @param {string} [audience] - The audience for which the token is desired. If not\n   * provided then the Endpoint from the connection string will be applied.\n   */\n  async getToken(audience?: string): Promise<TokenInfo> {\n    return this._createToken(\n      Math.floor(Date.now() / 1000) + this.tokenValidTimeInSeconds,\n      audience\n    );\n  }\n\n  /**\n   * @protected\n   * Creates the sas token based on the provided information\n   * @param {string | number} expiry - The time period in unix time after which the token will expire.\n   * @param {string} [audience] - The audience for which the token is desired. If not\n   * provided then the Endpoint from the connection string will be applied.\n   * @param {string | Buffer} [hashInput] The input to be provided to hmac to create the hash.\n   */\n  protected _createToken(\n    expiry: number,\n    audience?: string,\n    hashInput?: string | Buffer\n  ): TokenInfo {\n    if (!audience) audience = this.namespace;\n    audience = encodeURIComponent(audience);\n    const keyName = encodeURIComponent(this.keyName);\n    const stringToSign = audience + \"\\n\" + expiry;\n    hashInput = hashInput || this.key;\n    let shaObj: any;\n    if (isBuffer(hashInput)) {\n      shaObj = new jssha(\"SHA-256\", \"ARRAYBUFFER\");\n      shaObj.setHMACKey(hashInput, \"ARRAYBUFFER\");\n      shaObj.update(Buffer.from(stringToSign));\n    } else {\n      shaObj = new jssha(\"SHA-256\", \"TEXT\");\n      shaObj.setHMACKey(hashInput, \"TEXT\");\n      shaObj.update(stringToSign);\n    }\n    const sig = encodeURIComponent(shaObj.getHMAC(\"B64\"));\n    return {\n      token: `SharedAccessSignature sr=${audience}&sig=${sig}&se=${expiry}&skn=${keyName}`,\n      tokenType: TokenType.CbsTokenTypeSas,\n      expiry: expiry\n    };\n  }\n\n  /**\n   * Creates a token provider from the EventHub/ServiceBus connection string;\n   * @param {string} connectionString - The EventHub/ServiceBus connection string\n   */\n  static fromConnectionString(connectionString: string): SasTokenProvider {\n    const parsed = parseConnectionString<ServiceBusConnectionStringModel>(\n      connectionString\n    );\n    return new SasTokenProvider(\n      parsed.Endpoint,\n      parsed.SharedAccessKeyName,\n      parsed.SharedAccessKey\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { SasTokenProvider } from \"./sas\";\nimport { TokenInfo } from \"./token\";\nimport { Buffer } from \"buffer\";\n\n/**\n * @class IotSasTokenProvider\n * @ignore\n * Defines the SasTokenProvider for IotHub.\n */\nexport class IotSasTokenProvider extends SasTokenProvider {\n  /**\n   * Gets the sas token for the specified audience for IotHub.\n   * @ignore\n   * @param {string} [audience] - The audience for which the token is desired. If not\n   * provided then the Endpoint from the connection string will be applied.\n   */\n  async getToken(audience?: string): Promise<TokenInfo> {\n    return this._createToken(\n      Math.floor(Date.now() / 1000) + this.tokenValidTimeInSeconds,\n      audience,\n      Buffer.from(this.key, \"base64\")\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport {\n  ApplicationTokenCredentials,\n  DeviceTokenCredentials,\n  UserTokenCredentials,\n  MSITokenCredentials\n} from \"@azure/ms-rest-nodeauth\";\nimport { TokenInfo, TokenType, TokenProvider } from \"./token\";\nimport * as Constants from \"../util/constants\";\n\n/**\n * Defines the AAD (Azure ActiveDirectory) TokenProvider.\n * @class AadTokenProvider\n */\nexport class AadTokenProvider implements TokenProvider {\n  /**\n   * @property {(ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials)} credentials - The credentials object after successful authentication with AAD.\n   */\n  credentials:\n    | ApplicationTokenCredentials\n    | UserTokenCredentials\n    | DeviceTokenCredentials\n    | MSITokenCredentials;\n  /**\n   * @property {number} tokenRenewalMarginInSeconds - The number of seconds within which it is\n   * good to renew the token. The constant is set to 270 seconds (4.5 minutes).\n   * This is because ADAL (`adal-node`) will return token from cache if it is not within 5 minutes of token expiration.\n   * On renewing token within last 4.5 minutes of refresh token, ADAL will be forced to get new access token and will be valid for the next 1 hour.\n   * For more context, please see https://github.com/AzureAD/azure-activedirectory-library-for-nodejs/blob/81ff31dd612cae6cd69a9a7452171b7af792be9f/lib/cache-driver.js#L329\n   */\n  readonly tokenRenewalMarginInSeconds: number = 270;\n  /**\n   * @property {number} tokenValidTimeInSeconds - The number of seconds for which the\n   * token is valid. A constant set to 3599 seconds (~1 hour). Adal has a set valid time of\n   * 1 hour (3600 seconds) when it refreshes the access token.\n   */\n  readonly tokenValidTimeInSeconds: number = 3599;\n\n  constructor(\n    credentials:\n      | ApplicationTokenCredentials\n      | UserTokenCredentials\n      | DeviceTokenCredentials\n      | MSITokenCredentials\n  ) {\n    if (!credentials || typeof credentials.getToken !== \"function\" ) {\n      throw new TypeError(\n        \"'credentials' is a required parameter and must be an instance of \" +\n          \"ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials.\"\n      );\n    }\n    this.credentials = credentials;\n  }\n\n  /**\n   * Gets the jwt token for the specified audience\n   * @param {string} [audience] - The audience for which the token is desired. If not\n   * provided then the Endpoint from the connection string will be applied.\n   */\n  async getToken(audience?: string): Promise<TokenInfo> {\n    const self = this;\n    const result = await self.credentials.getToken();\n    let expiresOn = Date.now();\n    if (result.expiresOn && result.expiresOn instanceof Date) {\n      // TODO: Fix issue where expiry time for MSI based credentials' tokens are returned in seconds and not milliseconds\n      expiresOn = result.expiresOn.getTime();\n    }\n    const expiry =\n      Math.floor(expiresOn / 1000) +\n      self.tokenValidTimeInSeconds -\n      Constants.aadTokenValidityMarginSeconds;\n    const tokenObj: TokenInfo = {\n      expiry: expiry,\n      tokenType: TokenType.CbsTokenTypeJwt,\n      token: result.accessToken\n    };\n\n    return tokenObj;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport {\n  parseConnectionString,\n  ServiceBusConnectionStringModel\n} from \"../util/utils\";\nimport { WebSocketImpl } from \"rhea-promise\";\n\n/**\n * Describes the options that can be provided while creating a connection config.\n * @interface ConnectionConfigOptions\n */\nexport interface ConnectionConfigOptions {\n  /**\n   * @property {boolean} [isEntityPathRequired] Indicates whether the entity path is required in the\n   * connection config.\n   */\n  isEntityPathRequired?: boolean;\n}\n\n/**\n * Describes the connection config object that is created after parsing an EventHub or ServiceBus\n * connection string.\n * @interface ConnectionConfig\n */\nexport interface ConnectionConfig {\n  /**\n   * @property {string} endpoint - The service bus endpoint\n   * \"sb://<yournamespace>.servicebus.windows.net/\".\n   */\n  endpoint: string;\n  /**\n   * @property {string} host - The host \"<yournamespace>.servicebus.windows.net\".\n   */\n  host: string;\n  /**\n   * @property {string} connectionString - The connection string.\n   */\n  connectionString: string;\n  /**\n   * @property {string} entityPath - The name/path of the entity (hub/queue/topic name) to which the\n   * connection needs to happen.\n   */\n  entityPath?: string;\n  /**\n   * @property {string} sharedAccessKeyName - The name of the access key.\n   */\n  sharedAccessKeyName: string;\n  /**\n   * @property {string} sharedAccessKey - The secret value of the access key.\n   */\n  sharedAccessKey: string;\n\n  /**\n   * @property {WebSocketImpl} [webSocket] - The WebSocket constructor used to create an AMQP connection\n   * over a WebSocket. In browsers, the built-in WebSocket will be  used by default. In Node, a\n   * TCP socket will be used if a WebSocket constructor is not provided.\n   */\n  webSocket?: WebSocketImpl;\n\n  /**\n   * @property {string} [webSocketEndpointPath] - The path for the endpoint that accepts an AMQP\n   * connection over WebSockets.\n   */\n  webSocketEndpointPath?: string;\n\n  /**\n   * @property {any} [webSocketConstructorOptions] - Options to be passed to the WebSocket constructor\n   */\n  webSocketConstructorOptions?: any;\n}\n\n/**\n * Describes the ConnectionConfig module\n * @module ConnectionConfig\n */\nexport namespace ConnectionConfig {\n  /**\n   * Creates the connection config.\n   * @param {string} connectionString - The connection string for a given service like\n   * EventHub/ServiceBus.\n   * @param {string} [path]           - The name/path of the entity (hub name) to which the\n   * connection needs to happen. This will override the EntityPath in the connectionString\n   * if present.\n   * @returns {ConnectionConfig} ConnectionConfig\n   */\n  export function create(\n    connectionString: string,\n    path?: string\n  ): ConnectionConfig {\n    connectionString = String(connectionString);\n\n    const parsedCS = parseConnectionString<ServiceBusConnectionStringModel>(\n      connectionString\n    );\n    if (!parsedCS.Endpoint) {\n      throw new TypeError(\"Missing Endpoint in Connection String.\");\n    }\n\n    if (!parsedCS.Endpoint.endsWith(\"/\")) parsedCS.Endpoint += \"/\";\n\n    const result: ConnectionConfig = {\n      connectionString: connectionString,\n      endpoint: parsedCS.Endpoint,\n      host:\n        parsedCS && parsedCS.Endpoint\n          ? (parsedCS.Endpoint.match(\"sb://([^/]*)\") || [])[1]\n          : \"\",\n      sharedAccessKeyName: parsedCS.SharedAccessKeyName,\n      sharedAccessKey: parsedCS.SharedAccessKey\n    };\n\n    if (path || parsedCS.EntityPath) {\n      result.entityPath = path || parsedCS.EntityPath;\n    }\n    return result;\n  }\n\n  /**\n   * Validates the properties of connection config.\n   * @param {ConnectionConfig} config The connection config to be validated.\n   * @returns {void} void\n   */\n  export function validate(\n    config: ConnectionConfig,\n    options?: ConnectionConfigOptions\n  ): void {\n    if (!options) options = {};\n\n    if (!config) {\n      throw new TypeError(\"Missing configuration\");\n    }\n\n    if (!config.endpoint) {\n      throw new TypeError(\"Missing 'endpoint' in configuration\");\n    }\n    config.endpoint = String(config.endpoint);\n\n    if (!config.host) {\n      throw new TypeError(\"Missing 'host' in configuration\");\n    }\n    config.host = String(config.host);\n\n    if (options.isEntityPathRequired && !config.entityPath) {\n      throw new TypeError(\"Missing 'entityPath' in configuration\");\n    }\n    config.entityPath = String(config.entityPath);\n\n    if (!config.sharedAccessKeyName) {\n      throw new TypeError(\"Missing 'sharedAccessKeyName' in configuration\");\n    }\n    config.sharedAccessKeyName = String(config.sharedAccessKeyName);\n\n    if (!config.sharedAccessKey) {\n      throw new TypeError(\"Missing 'sharedAccessKey' in configuration\");\n    }\n    config.sharedAccessKey = String(config.sharedAccessKey);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { ConnectionConfig } from \"./connectionConfig\";\n\n/**\n * Describes the connection config object that is created after parsing an EventHub connection\n * string. It also provides some convenience methods for getting the address and audience for\n * different entities.\n * @interface EventHubConnectionConfig\n */\nexport interface EventHubConnectionConfig extends ConnectionConfig {\n  /**\n   * @property {string} entityPath - The name/path of the entity (event hub name) to which the\n   * connection needs to happen.\n   */\n  entityPath: string;\n  /**\n   * Provides the EventHub Sender address in one of the following forms based on the input:\n   * - `\"<hubName>\"`\n   * - `\"<hubName>/Partitions/<partitionId>\"`\n   *\n   * @param partitionId The partitionId in the EventHub to which messages will be sent.\n   */\n  getSenderAddress(partitionId?: string | number): string;\n  /**\n   * Provides the EventHub Sender audience in one of the following forms based on the input:\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>\"`\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>\"`\n   *\n   * @param partitionId The partitionId in the EventHub to which messages will be sent.\n   */\n  getSenderAudience(partitionId?: string | number): string;\n  /**\n   * Provides the EventHub Receiver address:\n   * - `\"<hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`\n   *\n   * @param partitionId The partitionId in the EventHub from which messages will be received.\n   * @param consumergroup The consumergoup in the EventHub from which the messages will\n   * be received. Default: `$default`.\n   */\n  getReceiverAddress(\n    partitionId: string | number,\n    consumergroup?: string\n  ): string;\n  /**\n   * Provides the EventHub Receiver audience.\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`\n   *\n   * @param partitionId The partitionId in the EventHub from which messages will be received.\n   * @param consumergroup The consumergoup in the EventHub from which the messages will\n   * be received. Default: `$default`.\n   */\n  getReceiverAudience(\n    partitionId: string | number,\n    consumergroup?: string\n  ): string;\n  /**\n   * Provides the EventHub Management address.\n   * - `\"<hub-name>/$management\"`\n   */\n  getManagementAddress(): string;\n  /**\n   * Provides the EventHub Management audience.\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<hub-name>/$management\"`\n   */\n  getManagementAudience(): string;\n}\n\n/**\n * Describes the connection config object that is created after parsing an EventHub connection\n * string. It also provides some convenience methods for getting the address and audience for\n * different entities.\n * @module EventHubConnectionConfig\n */\nexport module EventHubConnectionConfig {\n  /**\n   * Creates the connection config.\n   * @param {string} connectionString - The connection string for a given service like\n   * EventHub/ServiceBus.\n   * @param {string} [path]           - The name/path of the entity (hub name) to which the\n   * connection needs to happen. This will override the EntityPath in the connectionString\n   * if present.\n   * @returns {EventHubConnectionConfig} EventHubConnectionConfig\n   */\n  export function create(\n    connectionString: string,\n    path?: string\n  ): EventHubConnectionConfig {\n    const config = ConnectionConfig.create(connectionString, path);\n    if (!config.entityPath) {\n      throw new TypeError(\n        `Either provide \"path\" or the \"connectionString\": \"${connectionString}\", ` +\n          `must contain EntityPath=\"<path-to-the-entity>\".`\n      );\n    }\n    return createFromConnectionConfig(config);\n  }\n\n  /**\n   * Creates an EventHubConnectionConfig from the provided base ConnectionConfig.\n   * @param config The base connection config from which the EventHubConnectionConfig needs to be\n   * created.\n   * @returns EventHubConnectionConfig\n   */\n  export function createFromConnectionConfig(\n    config: ConnectionConfig\n  ): EventHubConnectionConfig {\n    ConnectionConfig.validate(config, { isEntityPathRequired: true });\n\n    (config as EventHubConnectionConfig).getManagementAudience = () => {\n      return `${config.endpoint}${config.entityPath}/$management`;\n    };\n    (config as EventHubConnectionConfig).getManagementAddress = () => {\n      return `${config.entityPath}/$management`;\n    };\n\n    (config as EventHubConnectionConfig).getSenderAudience = (\n      partitionId?: string | number\n    ) => {\n      if (partitionId != undefined) {\n        return `${config.endpoint}${\n          config.entityPath\n        }/Partitions/${partitionId}`;\n      } else {\n        return `${config.endpoint}${config.entityPath}`;\n      }\n    };\n\n    (config as EventHubConnectionConfig).getSenderAddress = (\n      partitionId?: string | number\n    ) => {\n      if (partitionId != undefined) {\n        return `${config.entityPath}/Partitions/${partitionId}`;\n      } else {\n        return `${config.entityPath}`;\n      }\n    };\n\n    (config as EventHubConnectionConfig).getReceiverAudience = (\n      partitionId: string | number,\n      consumergroup?: string\n    ) => {\n      if (!consumergroup) consumergroup = \"$default\";\n      return (\n        `${config.endpoint}${\n          config.entityPath\n        }/ConsumerGroups/${consumergroup}/` + `Partitions/${partitionId}`\n      );\n    };\n\n    (config as EventHubConnectionConfig).getReceiverAddress = (\n      partitionId: string | number,\n      consumergroup?: string\n    ) => {\n      if (!consumergroup) consumergroup = \"$default\";\n      return `${\n        config.entityPath\n      }/ConsumerGroups/${consumergroup}/Partitions/${partitionId}`;\n    };\n    return config as EventHubConnectionConfig;\n  }\n\n  /**\n   * Validates the properties of connection config.\n   * @param {ConnectionConfig} config The connection config to be validated.\n   * @returns {void} void\n   */\n  export function validate(config: EventHubConnectionConfig): void {\n    return ConnectionConfig.validate(config, { isEntityPathRequired: true });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { ConnectionConfig } from \"./connectionConfig\";\nimport { EventHubConnectionConfig } from \"./eventhubConnectionConfig\";\nimport {\n  parseConnectionString,\n  IotHubConnectionStringModel\n} from \"../util/utils\";\n\n/**\n * @interface IotHubConnectionConfig\n * @ignore\n */\nexport interface IotHubConnectionConfig {\n  /**\n   * @property {string} endpoint - The iothub endpoint `\"<iothub-namespace>.azure-devices.net\"`.\n   */\n  hostName: string;\n  /**\n   * @property {string} host - The host `\"<yournamespace>\"`.\n   */\n  host: string;\n  /**\n   * @property {string} connectionString - The IotHub connection string.\n   */\n  connectionString: string;\n  /**\n   * @property {string} entityPath - The name/path of the entity to which the connection needs to happen.\n   */\n  entityPath: string;\n  /**\n   * @property {string} sharedAccessKeyName - The name of the access key.\n   */\n  sharedAccessKeyName: string;\n  /**\n   * @property {string} sharedAccessKey - The secret value of the access key.\n   */\n  sharedAccessKey: string;\n  /**\n   * @property {string} [deviceId] - The unique device identifier.\n   */\n  deviceId?: string;\n}\n\n/**\n * @module IotHubConnectionConfig\n * @ignore\n */\nexport namespace IotHubConnectionConfig {\n  /**\n   * Creates the connection config.\n   * @ignore\n   * @param {string} connectionString - The event hub connection string\n   * @param {string} [path]           - The name/path of the entity (hub name) to which the connection needs to happen\n   */\n  export function create(\n    connectionString: string,\n    path?: string\n  ): IotHubConnectionConfig {\n    connectionString = String(connectionString);\n\n    const parsedCS = parseConnectionString<IotHubConnectionStringModel>(\n      connectionString\n    );\n    if (!path) {\n      path = \"messages/events\";\n    }\n    const result: IotHubConnectionConfig = {\n      connectionString: connectionString,\n      hostName: parsedCS.HostName,\n      host:\n        parsedCS && parsedCS.HostName ? parsedCS.HostName.split(\".\")[0] : \"\",\n      entityPath: path,\n      sharedAccessKeyName: parsedCS.SharedAccessKeyName,\n      sharedAccessKey: parsedCS.SharedAccessKey,\n      deviceId: parsedCS.DeviceId\n    };\n    return result;\n  }\n\n  /**\n   * Validates the properties of connection config.\n   * @ignore\n   * @param {ConnectionConfig} config The connection config to be validated.\n   */\n  export function validate(config: IotHubConnectionConfig): void {\n    if (!config) {\n      throw new TypeError(\"Missing configuration\");\n    }\n\n    if (!config.hostName) {\n      throw new TypeError(\"Missing 'hostName' in configuration\");\n    }\n    config.hostName = String(config.hostName);\n\n    if (!config.entityPath) {\n      throw new TypeError(\"Missing 'entityPath' in configuration\");\n    }\n    config.entityPath = String(config.entityPath);\n\n    if (!config.sharedAccessKeyName) {\n      throw new TypeError(\"Missing 'sharedAccessKeyName' in configuration\");\n    }\n    config.sharedAccessKeyName = String(config.sharedAccessKeyName);\n\n    if (!config.sharedAccessKey) {\n      throw new TypeError(\"Missing 'sharedAccessKey' in configuration\");\n    }\n    config.sharedAccessKey = String(config.sharedAccessKey);\n\n    if (config.deviceId) {\n      config.deviceId = String(config.deviceId);\n    }\n  }\n  /**\n   * Convert iothub connection config to eventhub connection config.\n   * @ignore\n   * @param {IotHubConnectionConfig} iotHubConfig\n   */\n  export function convertToEventHubConnectionConfig(\n    iotHubConfig: IotHubConnectionConfig\n  ): EventHubConnectionConfig {\n    validate(iotHubConfig);\n    const config: ConnectionConfig = {\n      sharedAccessKey: iotHubConfig.sharedAccessKey,\n      sharedAccessKeyName: iotHubConfig.sharedAccessKeyName,\n      entityPath: iotHubConfig.entityPath,\n      host: iotHubConfig.hostName,\n      endpoint: `sb://${iotHubConfig.hostName}/`,\n      connectionString: iotHubConfig.connectionString\n    };\n    return EventHubConnectionConfig.createFromConnectionConfig(config);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { TokenInfo } from \"./auth/token\";\nimport {\n  EventContext,\n  ReceiverOptions,\n  Message as AmqpMessage,\n  SenderEvents,\n  ReceiverEvents,\n  Connection,\n  SenderOptions,\n  generate_uuid\n} from \"rhea-promise\";\nimport * as Constants from \"./util/constants\";\nimport * as log from \"./log\";\nimport { translate } from \"./errors\";\nimport { defaultLock } from \"./util/utils\";\nimport { RequestResponseLink } from \"./requestResponseLink\";\n\n/**\n * Describes the CBS Response.\n * @interface CbsResponse\n */\nexport interface CbsResponse {\n  correlationId: string;\n  statusCode: string;\n  satusDescription: string;\n}\n\n/**\n * @class CbsClient\n * Describes the EventHub/ServiceBus Cbs client that talks to the $cbs endopint over AMQP connection.\n */\nexport class CbsClient {\n  /**\n   * @property {string} endpoint CBS endpoint - \"$cbs\"\n   */\n  readonly endpoint: string = Constants.cbsEndpoint;\n  /**\n   * @property {string} replyTo CBS replyTo - The reciever link name that the service should reply to.\n   */\n  readonly replyTo: string = `${Constants.cbsReplyTo}-${generate_uuid()}`;\n  /**\n   * @property {string} cbsLock The unqiue lock name per $cbs session per connection that is used to\n   * acquire the lock for establishing a cbs session if one does not exist for an aqmp connection.\n   */\n  readonly cbsLock: string = `${Constants.negotiateCbsKey}-${generate_uuid()}`;\n  /**\n   * @property {string} connectionLock The unqiue lock name per connection that is used to\n   * acquire the lock for establishing an amqp connection if one does not exist.\n   */\n  readonly connectionLock: string;\n  /**\n   * @property {Connection} connection The AMQP connection.\n   */\n  connection: Connection;\n\n  /**\n   * CBS sender, receiver on the same session.\n   * @private\n   */\n  private _cbsSenderReceiverLink?: RequestResponseLink;\n\n  /**\n   * @constructor\n   * @param {Connection} connection The AMQP conection.\n   * @param {string} connectionLock A unique string (usually a guid) per connection.\n   */\n  constructor(connection: Connection, connectionLock: string) {\n    this.connection = connection;\n    this.connectionLock = connectionLock;\n  }\n\n  /**\n   * Creates a singleton instance of the CBS session if it hasn't been initialized previously on\n   * the given connection.\n   * @returns {Promise<void>} Promise<void>.\n   */\n  async init(): Promise<void> {\n    try {\n      // Acquire the lock and establish an amqp connection if it does not exist.\n      if (!this.connection.isOpen()) {\n        log.cbs(\"The CBS client is trying to establish an AMQP connection.\");\n        await defaultLock.acquire(this.connectionLock, () => {\n          return this.connection.open();\n        });\n      }\n\n      if (!this._isCbsSenderReceiverLinkOpen()) {\n        const rxOpt: ReceiverOptions = {\n          source: {\n            address: this.endpoint\n          },\n          name: this.replyTo,\n          onSessionError: (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.session!.error!);\n            log.error(\n              \"[%s] An error occurred on the session for request/response links \" +\n                \"for $cbs: %O\",\n              id,\n              ehError\n            );\n          }\n        };\n        const srOpt: SenderOptions = { target: { address: this.endpoint } };\n        log.cbs(\n          \"[%s] Creating sender/receiver links on a session for $cbs endpoint.\",\n          this.connection.id\n        );\n        this._cbsSenderReceiverLink = await RequestResponseLink.create(\n          this.connection,\n          srOpt,\n          rxOpt\n        );\n        this._cbsSenderReceiverLink.sender.on(\n          SenderEvents.senderError,\n          (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.sender!.error!);\n            log.error(\n              \"[%s] An error occurred on the cbs sender link.. %O\",\n              id,\n              ehError\n            );\n          }\n        );\n        this._cbsSenderReceiverLink.receiver.on(\n          ReceiverEvents.receiverError,\n          (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.receiver!.error!);\n            log.error(\n              \"[%s] An error occurred on the cbs receiver link.. %O\",\n              id,\n              ehError\n            );\n          }\n        );\n        log.cbs(\n          \"[%s] Successfully created the cbs sender '%s' and receiver '%s' \" +\n            \"links over cbs session.\",\n          this.connection.id,\n          this._cbsSenderReceiverLink.sender.name,\n          this._cbsSenderReceiverLink.receiver.name\n        );\n      } else {\n        log.cbs(\n          \"[%s] CBS session is already present. Reusing the cbs sender '%s' \" +\n            \"and receiver '%s' links over cbs session.\",\n          this.connection.id,\n          this._cbsSenderReceiverLink!.sender.name,\n          this._cbsSenderReceiverLink!.receiver.name\n        );\n      }\n    } catch (err) {\n      err = translate(err);\n      log.error(\n        \"[%s] An error occured while establishing the cbs links: %O\",\n        this.connection.id,\n        err\n      );\n      throw err;\n    }\n  }\n\n  /**\n   * Negotiates the CBS claim with the EventHub/ServiceBus Service.\n   * @param {string} audience The entity token audience for which the token is requested in one\n   * of the following forms:\n   *\n   * - **ServiceBus**\n   *    - **Sender**\n   *        - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   *        - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   *    - **Receiver**\n   *         - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   *         - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   *    - **ManagementClient**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management\"`.\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management\"`.\n   *\n   * - **EventHubs**\n   *     - **Sender**\n   *          - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>\"`\n   *          - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>\"`.\n   *\n   *     - **Receiver**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`.\n   *\n   *     - **ManagementClient**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management\"`.\n   * @param {TokenInfo} tokenObject The token object that needs to be sent in the put-token request.\n   * @return {Promise<any>} Returns a Promise that resolves when $cbs authentication is successful\n   * and rejects when an error occurs during $cbs authentication.\n   */\n  async negotiateClaim(\n    audience: string,\n    tokenObject: TokenInfo\n  ): Promise<CbsResponse> {\n    try {\n      const request: AmqpMessage = {\n        body: tokenObject.token,\n        message_id: generate_uuid(),\n        reply_to: this.replyTo,\n        to: this.endpoint,\n        application_properties: {\n          operation: Constants.operationPutToken,\n          name: audience,\n          type: tokenObject.tokenType\n        }\n      };\n      const responseMessage = await this._cbsSenderReceiverLink!.sendRequest(\n        request\n      );\n      log.cbs(\n        \"[%s] The CBS response is: %O\",\n        this.connection.id,\n        responseMessage\n      );\n      return this._fromAmqpMessageResponse(responseMessage);\n    } catch (err) {\n      log.error(\n        \"[%s] An error occurred while negotiating the cbs claim: %O\",\n        this.connection.id,\n        err\n      );\n      throw err;\n    }\n  }\n\n  /**\n   * Closes the AMQP cbs session to the EventHub/ServiceBus for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @return {Promise<void>}\n   */\n  async close(): Promise<void> {\n    try {\n      if (this._isCbsSenderReceiverLinkOpen()) {\n        const cbsLink = this._cbsSenderReceiverLink;\n        this._cbsSenderReceiverLink = undefined;\n        await cbsLink!.close();\n        log.cbs(\n          \"[%s] Successfully closed the cbs session.\",\n          this.connection.id\n        );\n      }\n    } catch (err) {\n      const msg = `An error occurred while closing the cbs link: ${err.stack ||\n        JSON.stringify(err)}.`;\n      log.error(\"[%s] %s\", this.connection.id, msg);\n      throw new Error(msg);\n    }\n  }\n\n  /**\n   * Removes the AMQP cbs session to the EventHub/ServiceBus for this client,\n   * @returns {void} void\n   */\n  remove(): void {\n    try {\n      if (this._cbsSenderReceiverLink) {\n        const cbsLink = this._cbsSenderReceiverLink;\n        this._cbsSenderReceiverLink = undefined;\n        cbsLink!.remove();\n        log.cbs(\n          \"[%s] Successfully removed the cbs session.\",\n          this.connection.id\n        );\n      }\n    } catch (err) {\n      const msg = `An error occurred while removing the cbs link: ${err.stack ||\n        JSON.stringify(err)}.`;\n      log.error(\"[%s] %s\", this.connection.id, msg);\n      throw new Error(msg);\n    }\n  }\n\n  /**\n   * Indicates whether the cbs sender receiver link is open or closed.\n   * @private\n   * @return {boolean} `true` open, `false` closed.\n   */\n  private _isCbsSenderReceiverLinkOpen(): boolean {\n    return (\n      this._cbsSenderReceiverLink! && this._cbsSenderReceiverLink!.isOpen()\n    );\n  }\n\n  private _fromAmqpMessageResponse(msg: AmqpMessage): CbsResponse {\n    const cbsResponse = {\n      correlationId: msg.correlation_id! as string,\n      statusCode: msg.application_properties\n        ? msg.application_properties[\"status-code\"]\n        : \"\",\n      satusDescription: msg.application_properties\n        ? msg.application_properties[\"status-description\"]\n        : \"\"\n    };\n    log.cbs(\n      \"[%s] The deserialized CBS response is: %o\",\n      this.connection.id,\n      cbsResponse\n    );\n    return cbsResponse;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { MessageHeader as AmqpMessageHeader } from \"rhea-promise\";\nimport * as log from \"./log\";\n\n/**\n * Describes the defined set of standard header properties of the message.\n * @interface MessageHeader\n */\nexport interface MessageHeader {\n  /**\n   * @property {boolean} [firstAcquirer] If this value is true, then this message has not been\n   * acquired by any other link. Ifthis value is false, then this message MAY have previously\n   * been acquired by another link or links.\n   */\n  firstAcquirer?: boolean;\n  /**\n   * @property {number} [deliveryCount] The number of prior unsuccessful delivery attempts.\n   */\n  deliveryCount?: number;\n  /**\n   * @property {number} [ttl] time to live in ms.\n   */\n  ttl?: number;\n  /**\n   * @property {boolean} [durable] Specifies durability requirements.\n   */\n  durable?: boolean;\n  /**\n   * @property {number} [priority] The relative message priority. Higher numbers indicate higher\n   * priority messages.\n   */\n  priority?: number;\n}\n\n/**\n * Describes the operations that can be performed on the message header.\n * @module MessageHeader\n */\nexport namespace MessageHeader {\n  /**\n   * Converts MessageHeader to AmqpMessageHeader.\n   *\n   * @param {MessageHeader} props Message header.\n   * @returns {AmqpMessageHeader} AmqpMessageHeader\n   */\n  export function toAmqpMessageHeader(props: MessageHeader): AmqpMessageHeader {\n    const amqpHeader: AmqpMessageHeader = {};\n    if (props.deliveryCount != undefined) {\n      amqpHeader.delivery_count = props.deliveryCount;\n    }\n    if (props.durable != undefined) amqpHeader.durable = props.durable;\n    if (props.firstAcquirer != undefined) {\n      amqpHeader.first_acquirer = props.firstAcquirer;\n    }\n    if (props.priority != undefined) {\n      amqpHeader.priority = props.priority;\n    }\n    if (props.ttl != undefined) {\n      amqpHeader.ttl = props.ttl;\n    }\n    log.msgHeader(\"To AmqpMessageHeader: %O\", amqpHeader);\n    return amqpHeader;\n  }\n\n  /**\n   * Converts AmqpMessageHeader to MessageHeader.\n   *\n   * @param {AmqpMessageHeader} props Amqp Message Header\n   * @returns {MessageHeader} MessageHeader.\n   */\n  export function fromAmqpMessageHeader(\n    props: AmqpMessageHeader\n  ): MessageHeader {\n    const msgHeader: MessageHeader = {};\n    if (props.delivery_count != undefined) {\n      msgHeader.deliveryCount = props.delivery_count;\n    }\n    if (props.durable != undefined) {\n      msgHeader.durable = props.durable;\n    }\n    if (props.first_acquirer != undefined) {\n      msgHeader.firstAcquirer = props.first_acquirer;\n    }\n    if (props.priority != undefined) {\n      msgHeader.priority = props.priority;\n    }\n    if (props.ttl != undefined) {\n      msgHeader.ttl = props.ttl;\n    }\n    log.msgHeader(\"From AmqpMessageHeader: %O\", msgHeader);\n    return msgHeader;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { MessageProperties as AmqpMessageProperties } from \"rhea-promise\";\nimport * as log from \"./log\";\n\n/**\n * Describes the defined set of standard properties of the message.\n * @interface MessageProperties\n */\nexport interface MessageProperties {\n  /**\n   * @property {string | number | Buffer} [messageId] The application message identifier that uniquely idenitifes a message.\n   * The user is responsible for making sure that this is unique in the given context. Guids usually make a good fit.\n   */\n  messageId?: string | number | Buffer;\n  /**\n   * @property {string} [replyTo] The address of the node to send replies to.\n   */\n  replyTo?: string;\n  /**\n   * @property {string} [to] The address of the node the message is destined for.\n   */\n  to?: string;\n  /**\n   * @property {string | number | Buffer} [correlationId] The id that can be used to mark or identify messages between clients.\n   */\n  correlationId?: string | number | Buffer;\n  /**\n   * @property {string} [contentType] MIME type for the message.\n   */\n  contentType?: string;\n  /**\n   * @property {string} [contentEncoding] The content-encoding property is used as a modifier to the content-type.\n   * When present, its valueindicates what additional content encodings have been applied to the application-data.\n   */\n  contentEncoding?: string;\n  /**\n   * @property {number} [absoluteExpiryTime] The time when this message is considered expired.\n   */\n  absoluteExpiryTime?: number;\n  /**\n   * @property {number} [creationTime] The time this message was created.\n   */\n  creationTime?: number;\n  /**\n   * @property {string} [groupId] The group this message belongs to.\n   */\n  groupId?: string;\n  /**\n   * @property {number} [groupSequence] The sequence number of this message with its group.\n   */\n  groupSequence?: number;\n  /**\n   * @property {string} [replyToGroupId] The group the reply message belongs to.\n   */\n  replyToGroupId?: string;\n  /**\n   * @property {string} [subject] A common field for summary information about the message\n   * content and purpose.\n   */\n  subject?: string;\n  /**\n   * @property {string} [userId] The identity of the user responsible for producing the message.\n   */\n  userId?: string;\n}\n\n/**\n * Describes the operations that can be performed on the amqp message properties.\n * @module MessageProperties\n */\nexport namespace MessageProperties {\n  /**\n   * Converts MessageProperties to AmqpMessageProperties.\n   * @param {MessageProperties} props Message properties.\n   * @returns {AmqpMessageProperties} AmqpMessageProperties.\n   */\n  export function toAmqpMessageProperties(\n    props: MessageProperties\n  ): AmqpMessageProperties {\n    const amqpProperties: AmqpMessageProperties = {};\n    if (props.absoluteExpiryTime != undefined) {\n      amqpProperties.absolute_expiry_time = props.absoluteExpiryTime;\n    }\n    if (props.contentEncoding != undefined) {\n      amqpProperties.content_encoding = props.contentEncoding;\n    }\n    if (props.contentType != undefined) {\n      amqpProperties.content_type = props.contentType;\n    }\n    if (props.correlationId != undefined) {\n      amqpProperties.correlation_id = props.correlationId;\n    }\n    if (props.creationTime != undefined) {\n      amqpProperties.creation_time = props.creationTime;\n    }\n    if (props.groupId != undefined) {\n      amqpProperties.group_id = props.groupId;\n    }\n    if (props.groupSequence != undefined) {\n      amqpProperties.group_sequence = props.groupSequence;\n    }\n    if (props.messageId != undefined) {\n      amqpProperties.message_id = props.messageId;\n    }\n    if (props.replyTo != undefined) {\n      amqpProperties.reply_to = props.replyTo;\n    }\n    if (props.replyToGroupId != undefined) {\n      amqpProperties.reply_to_group_id = props.replyToGroupId;\n    }\n    if (props.subject != undefined) {\n      amqpProperties.subject = props.subject;\n    }\n    if (props.to != undefined) {\n      amqpProperties.to = props.to;\n    }\n    if (props.userId != undefined) {\n      amqpProperties.user_id = props.userId;\n    }\n\n    log.msgProperties(\"To AmqpMessageProperties: %O\", amqpProperties);\n    return amqpProperties;\n  }\n\n  /**\n   * Converts AmqpMessageProperties to MessageProperties.\n   * @param {AmqpMessageProperties} props Amqp message properties.\n   * @returns {MessageProperties} MessageProperties.\n   */\n  export function fromAmqpMessageProperties(\n    props: AmqpMessageProperties\n  ): MessageProperties {\n    const msgProperties: MessageProperties = {};\n    if (props.absolute_expiry_time != undefined) {\n      msgProperties.absoluteExpiryTime = props.absolute_expiry_time;\n    }\n    if (props.content_encoding != undefined) {\n      msgProperties.contentEncoding = props.content_encoding;\n    }\n    if (props.content_type != undefined) {\n      msgProperties.contentType = props.content_type;\n    }\n    if (props.correlation_id != undefined) {\n      msgProperties.correlationId = props.correlation_id;\n    }\n    if (props.creation_time != undefined) {\n      msgProperties.creationTime = props.creation_time;\n    }\n    if (props.group_id != undefined) {\n      msgProperties.groupId = props.group_id;\n    }\n    if (props.group_sequence != undefined) {\n      msgProperties.groupSequence = props.group_sequence;\n    }\n    if (props.message_id != undefined) {\n      msgProperties.messageId = props.message_id;\n    }\n    if (props.reply_to != undefined) {\n      msgProperties.replyTo = props.reply_to;\n    }\n    if (props.reply_to_group_id != undefined) {\n      msgProperties.replyToGroupId = props.reply_to_group_id;\n    }\n    if (props.subject != undefined) {\n      msgProperties.subject = props.subject;\n    }\n    if (props.to != undefined) {\n      msgProperties.to = props.to;\n    }\n    if (props.user_id != undefined) {\n      msgProperties.userId = props.user_id;\n    }\n\n    log.msgProperties(\"From AmqpMessageProperties: %O\", msgProperties);\n    return msgProperties;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { Connection, ConnectionOptions, generate_uuid } from \"rhea-promise\";\nimport { CbsClient } from \"./cbs\";\nimport { DataTransformer, DefaultDataTransformer } from \"./dataTransformer\";\nimport { TokenProvider } from \"./auth/token\";\nimport { ConnectionConfig } from \"./connectionConfig/connectionConfig\";\nimport { SasTokenProvider } from \"./auth/sas\";\n\nimport * as Constants from \"./util/constants\";\nimport * as os from \"os\";\nimport { isNode } from \"./util/utils\";\n\n/**\n * @interface ConnectionContextBase\n * Provides contextual information like the underlying amqp connection, cbs session, tokenProvider,\n * Connection config, data transformer, etc.\n */\nexport interface ConnectionContextBase {\n  /**\n   * @property {ConnectionConfig} config The EventHub connection config that is created after\n   * parsing the connection string.\n   */\n  readonly config: ConnectionConfig;\n  /**\n   * @property {string} connectionLock The unqiue lock name per connection that is used to\n   * acquire the lock for establishing an aqmp connection per client if one does not exist.\n   */\n  readonly connectionLock: string;\n  /**\n   * @property {string} negotiateClaimLock The unqiue lock name per connection that is used to\n   * acquire the lock for negotiating cbs claim by an entity on that connection.\n   */\n  readonly negotiateClaimLock: string;\n  /**\n   * @property {TokenProvider} tokenProvider The TokenProvider to be used for getting tokens\n   * for authentication for the EventHub client.\n   */\n  readonly tokenProvider: TokenProvider;\n  /**\n   * @property {Connection} connection The underlying AMQP connection.\n   */\n  connection: Connection;\n  /**\n   * @property {string} connectionId The amqp connection id that uniquely identifies the\n   * connection within a process.\n   */\n  connectionId: string;\n  /**\n   * @property {boolean} wasConnectionCloseCalled Indicates whether the close() method was\n   * called on the connection object.\n   */\n  wasConnectionCloseCalled: boolean;\n  /**\n   * @property {DataTransformer} dataTransformer A DataTransformer object that has methods named\n   * - encode Responsible for encoding the AMQP message before sending it on the wire.\n   * - decode Responsible for decoding the received AMQP message before passing it to the customer.\n   */\n  dataTransformer: DataTransformer;\n  /**\n   * @property {CbsClient} cbsSession A reference to the cbs session ($cbs endpoint) on the\n   * underlying AMQP connection for the EventHub Client.\n   */\n  cbsSession: CbsClient;\n}\n\n/**\n * Defines the properties that need to be set while establishing the AMQP connection.\n * @interface ConnectionProperties\n */\nexport interface ConnectionProperties {\n  /**\n   * @property {string} product The name of the product that will be populated as the AMQP\n   * connection property. Example: \"MSJSClient\".\n   */\n  product: string;\n  /**\n   * @property {string} version The version of the package/sdk that is making the AMQP connection.\n   */\n  version: string;\n  /**\n   * @property {string} userAgent The userAgent that needs to be set as the AMQP connection\n   * property. Example: `\"/js-service-bus\"` or `\"/js-event-hubs,/js-event-processor-host=1.0.0\"`.\n   */\n  userAgent: string;\n}\n\n/**\n * Describes the parameters that can be provided to create the base connection context.\n * @interface CreateConnectionContextBaseParameters\n */\nexport interface CreateConnectionContextBaseParameters {\n  /**\n   * @property {ConnectionConfig} config The connection config that is created by parsing the\n   * connection string.\n   */\n  config: ConnectionConfig;\n  /**\n   * @property {ConnectionProperties} connectionProperties Properties to be provided while creating\n   * the AMQP connection.\n   */\n  connectionProperties: ConnectionProperties;\n  /**\n   * @property {TokenProvider} [tokenProvider] The token provider to be used for Authentication.\n   * Default value: SasTokenProvider.\n   */\n  tokenProvider?: TokenProvider;\n  /**\n   * @property {DataTransformer} [dataTransformer] The datatransformer to be used for encoding and\n   * decoding messages. Default value: DefaultDataTransformer\n   */\n  dataTransformer?: DataTransformer;\n  /**\n   * @property {boolean} [isEntityPathRequired] Determines whether entity path should be a part of\n   * the connection config. If `true` it must be present, `false` otherwise. Default value false.\n   */\n  isEntityPathRequired?: boolean;\n  /**\n   * @property {number} [operationTimeoutInSeconds] - The duration in which the promise should\n   * complete (resolve/reject). If it is not completed, then the Promise will be rejected after\n   * timeout occurs. Default: `60 seconds`.\n   */\n  operationTimeoutInSeconds?: number;\n}\n\nexport module ConnectionContextBase {\n  /**\n   * Creates the base connection context.\n   * @param {CreateConnectionContextBaseParameters} parameters Parameters to be provided to create\n   * the base connection context.\n   */\n  export function create(parameters: CreateConnectionContextBaseParameters): ConnectionContextBase {\n    ConnectionConfig.validate(parameters.config, {\n      isEntityPathRequired: parameters.isEntityPathRequired || false\n    });\n    const userAgent = parameters.connectionProperties.userAgent;\n    if (userAgent.length > Constants.maxUserAgentLength) {\n      throw new Error(\n        `The user-agent string cannot be more than ${Constants.maxUserAgentLength} characters in length.` +\n          `The given user-agent string is: ${userAgent} with length: ${userAgent.length}`\n      );\n    }\n\n    const connectionOptions: ConnectionOptions = {\n      transport: Constants.TLS,\n      host: parameters.config.host,\n      hostname: parameters.config.host,\n      username: parameters.config.sharedAccessKeyName,\n      port: 5671,\n      reconnect: false,\n      properties: {\n        product: parameters.connectionProperties.product,\n        version: parameters.connectionProperties.version,\n        \"user-agent\": userAgent,\n        platform: `(${os.arch()}-${os.type()}-${os.release()})`,\n        framework: `Node/${process.version}`\n      },\n      operationTimeoutInSeconds: parameters.operationTimeoutInSeconds,\n      idle_time_out: Constants.defaultConnectionIdleTimeoutInMs\n    };\n\n    if (\n      parameters.config.webSocket ||\n      (!isNode && typeof window !== \"undefined\" && (window as any).WebSocket)\n    ) {\n      const socket = parameters.config.webSocket || (window as any).WebSocket;\n      const host = parameters.config.host;\n      const endpoint = parameters.config.webSocketEndpointPath || \"\";\n      const socketOptions = parameters.config.webSocketConstructorOptions || {};\n\n      connectionOptions.webSocketOptions = {\n        webSocket: socket,\n        url: `wss://${host}:443/${endpoint}`,\n        protocol: [\"AMQPWSB10\"],\n        options: socketOptions\n      };\n    }\n\n    const connection = new Connection(connectionOptions);\n    const connectionLock = `${Constants.establishConnection}-${generate_uuid()}`;\n    const connectionContextBase: ConnectionContextBase = {\n      wasConnectionCloseCalled: false,\n      connectionLock: connectionLock,\n      negotiateClaimLock: `${Constants.negotiateClaim}-${generate_uuid()}`,\n      connection: connection,\n      connectionId: connection.id,\n      cbsSession: new CbsClient(connection, connectionLock),\n      config: parameters.config,\n      tokenProvider:\n        parameters.tokenProvider ||\n        new SasTokenProvider(\n          parameters.config.endpoint,\n          parameters.config.sharedAccessKeyName,\n          parameters.config.sharedAccessKey\n        ),\n      dataTransformer: parameters.dataTransformer || new DefaultDataTransformer()\n    };\n\n    return connectionContextBase;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/// <reference lib=\"es2015\" />\n\nexport { RequestResponseLink, SendRequestOptions } from \"./requestResponseLink\";\nexport { retry, RetryConfig, RetryOperationType } from \"./retry\";\nexport { DataTransformer, DefaultDataTransformer } from \"./dataTransformer\";\nexport { TokenType, TokenProvider, TokenInfo } from \"./auth/token\";\nexport { SasTokenProvider } from \"./auth/sas\";\nexport { IotSasTokenProvider } from \"./auth/iotSas\";\nexport * from \"./index.node\";\n\nexport { ConnectionConfig, ConnectionConfigOptions } from \"./connectionConfig/connectionConfig\";\nexport { EventHubConnectionConfig } from \"./connectionConfig/eventhubConnectionConfig\";\nexport { IotHubConnectionConfig } from \"./connectionConfig/iothubConnectionConfig\";\n\nexport { CbsClient, CbsResponse } from \"./cbs\";\nimport * as Constants from \"./util/constants\";\nexport { Constants };\nexport { MessageHeader } from \"./messageHeader\";\nexport { MessageProperties } from \"./messageProperties\";\nexport {\n  ConnectionContextBase,\n  ConnectionProperties,\n  CreateConnectionContextBaseParameters\n} from \"./ConnectionContextBase\";\nexport {\n  Dictionary,\n  Message as AmqpMessage,\n  isAmqpError,\n  MessageHeader as AmqpMessageHeader,\n  MessageProperties as AmqpMessageProperties\n} from \"rhea-promise\";\nexport {\n  MessagingError,\n  ErrorNameConditionMapper,\n  ConditionStatusMapper,\n  ConditionErrorNameMapper,\n  translate,\n  retryableErrors,\n  isSystemError,\n  SystemErrorConditionMapper\n} from \"./errors\";\nexport {\n  delay,\n  Timeout,\n  EventHubConnectionStringModel,\n  executePromisesSequentially,\n  parseConnectionString,\n  IotHubConnectionStringModel,\n  StorageConnectionStringModel,\n  defaultLock,\n  Func,\n  ParsedOutput,\n  getNewAsyncLock,\n  AsyncLockOptions,\n  ServiceBusConnectionStringModel,\n  isIotHubConnectionString,\n  randomNumberFromInterval,\n  AsyncLock,\n  isNode\n} from \"./util/utils\";\n"],"names":["ConditionStatusMapper","ConditionErrorNameMapper","ErrorNameConditionMapper","SystemErrorConditionMapper","isAmqpError","error","log.retry","resolve","CONNREFUSED","TIMEOUT","RetryOperationType","retry","log.error","Constants.defaultOperationTimeoutInSeconds","generate_uuid","Constants.statusCode","Constants.statusDescription","Constants.errorCondition","ReceiverEvents","log.reqres","Constants.cbsEndpoint","log.transformer","message","Buffer","TokenType","Constants.aadTokenValidityMarginSeconds","ConnectionConfig","EventHubConnectionConfig","IotHubConnectionConfig","Constants.cbsReplyTo","Constants.negotiateCbsKey","log.cbs","SenderEvents","Constants.operationPutToken","log.msgHeader","msgHeader","MessageHeader","log.msgProperties","msgProperties","MessageProperties","Constants.maxUserAgentLength","Constants.TLS","os.arch","os.type","os.release","Constants.defaultConnectionIdleTimeoutInMs","Connection","Constants.establishConnection","Constants.negotiateClaim","ConnectionContextBase"],"mappings":"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"}