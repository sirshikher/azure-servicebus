import { WebSocketImpl } from "rhea-promise";
/**
 * Describes the options that can be provided while creating a connection config.
 * @interface ConnectionConfigOptions
 */
export interface ConnectionConfigOptions {
    /**
     * @property {boolean} [isEntityPathRequired] Indicates whether the entity path is required in the
     * connection config.
     */
    isEntityPathRequired?: boolean;
}
/**
 * Describes the connection config object that is created after parsing an EventHub or ServiceBus
 * connection string.
 * @interface ConnectionConfig
 */
export interface ConnectionConfig {
    /**
     * @property {string} endpoint - The service bus endpoint
     * "sb://<yournamespace>.servicebus.windows.net/".
     */
    endpoint: string;
    /**
     * @property {string} host - The host "<yournamespace>.servicebus.windows.net".
     */
    host: string;
    /**
     * @property {string} connectionString - The connection string.
     */
    connectionString: string;
    /**
     * @property {string} entityPath - The name/path of the entity (hub/queue/topic name) to which the
     * connection needs to happen.
     */
    entityPath?: string;
    /**
     * @property {string} sharedAccessKeyName - The name of the access key.
     */
    sharedAccessKeyName: string;
    /**
     * @property {string} sharedAccessKey - The secret value of the access key.
     */
    sharedAccessKey: string;
    /**
     * @property {WebSocketImpl} [webSocket] - The WebSocket constructor used to create an AMQP connection
     * over a WebSocket. In browsers, the built-in WebSocket will be  used by default. In Node, a
     * TCP socket will be used if a WebSocket constructor is not provided.
     */
    webSocket?: WebSocketImpl;
    /**
     * @property {string} [webSocketEndpointPath] - The path for the endpoint that accepts an AMQP
     * connection over WebSockets.
     */
    webSocketEndpointPath?: string;
    /**
     * @property {any} [webSocketConstructorOptions] - Options to be passed to the WebSocket constructor
     */
    webSocketConstructorOptions?: any;
}
/**
 * Describes the ConnectionConfig module
 * @module ConnectionConfig
 */
export declare namespace ConnectionConfig {
    /**
     * Creates the connection config.
     * @param {string} connectionString - The connection string for a given service like
     * EventHub/ServiceBus.
     * @param {string} [path]           - The name/path of the entity (hub name) to which the
     * connection needs to happen. This will override the EntityPath in the connectionString
     * if present.
     * @returns {ConnectionConfig} ConnectionConfig
     */
    function create(connectionString: string, path?: string): ConnectionConfig;
    /**
     * Validates the properties of connection config.
     * @param {ConnectionConfig} config The connection config to be validated.
     * @returns {void} void
     */
    function validate(config: ConnectionConfig, options?: ConnectionConfigOptions): void;
}
//# sourceMappingURL=connectionConfig.d.ts.map