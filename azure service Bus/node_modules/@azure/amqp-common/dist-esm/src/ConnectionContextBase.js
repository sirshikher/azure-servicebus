// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
import { Connection, generate_uuid } from "rhea-promise";
import { CbsClient } from "./cbs";
import { DefaultDataTransformer } from "./dataTransformer";
import { ConnectionConfig } from "./connectionConfig/connectionConfig";
import { SasTokenProvider } from "./auth/sas";
import * as Constants from "./util/constants";
import * as os from "os";
import { isNode } from "./util/utils";
export var ConnectionContextBase;
(function (ConnectionContextBase) {
    /**
     * Creates the base connection context.
     * @param {CreateConnectionContextBaseParameters} parameters Parameters to be provided to create
     * the base connection context.
     */
    function create(parameters) {
        ConnectionConfig.validate(parameters.config, {
            isEntityPathRequired: parameters.isEntityPathRequired || false
        });
        const userAgent = parameters.connectionProperties.userAgent;
        if (userAgent.length > Constants.maxUserAgentLength) {
            throw new Error(`The user-agent string cannot be more than ${Constants.maxUserAgentLength} characters in length.` +
                `The given user-agent string is: ${userAgent} with length: ${userAgent.length}`);
        }
        const connectionOptions = {
            transport: Constants.TLS,
            host: parameters.config.host,
            hostname: parameters.config.host,
            username: parameters.config.sharedAccessKeyName,
            port: 5671,
            reconnect: false,
            properties: {
                product: parameters.connectionProperties.product,
                version: parameters.connectionProperties.version,
                "user-agent": userAgent,
                platform: `(${os.arch()}-${os.type()}-${os.release()})`,
                framework: `Node/${process.version}`
            },
            operationTimeoutInSeconds: parameters.operationTimeoutInSeconds,
            idle_time_out: Constants.defaultConnectionIdleTimeoutInMs
        };
        if (parameters.config.webSocket ||
            (!isNode && typeof window !== "undefined" && window.WebSocket)) {
            const socket = parameters.config.webSocket || window.WebSocket;
            const host = parameters.config.host;
            const endpoint = parameters.config.webSocketEndpointPath || "";
            const socketOptions = parameters.config.webSocketConstructorOptions || {};
            connectionOptions.webSocketOptions = {
                webSocket: socket,
                url: `wss://${host}:443/${endpoint}`,
                protocol: ["AMQPWSB10"],
                options: socketOptions
            };
        }
        const connection = new Connection(connectionOptions);
        const connectionLock = `${Constants.establishConnection}-${generate_uuid()}`;
        const connectionContextBase = {
            wasConnectionCloseCalled: false,
            connectionLock: connectionLock,
            negotiateClaimLock: `${Constants.negotiateClaim}-${generate_uuid()}`,
            connection: connection,
            connectionId: connection.id,
            cbsSession: new CbsClient(connection, connectionLock),
            config: parameters.config,
            tokenProvider: parameters.tokenProvider ||
                new SasTokenProvider(parameters.config.endpoint, parameters.config.sharedAccessKeyName, parameters.config.sharedAccessKey),
            dataTransformer: parameters.dataTransformer || new DefaultDataTransformer()
        };
        return connectionContextBase;
    }
    ConnectionContextBase.create = create;
})(ConnectionContextBase || (ConnectionContextBase = {}));
//# sourceMappingURL=ConnectionContextBase.js.map