// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
import { EventHubConnectionConfig } from "./eventhubConnectionConfig";
import { parseConnectionString } from "../util/utils";
/**
 * @module IotHubConnectionConfig
 * @ignore
 */
export var IotHubConnectionConfig;
(function (IotHubConnectionConfig) {
    /**
     * Creates the connection config.
     * @ignore
     * @param {string} connectionString - The event hub connection string
     * @param {string} [path]           - The name/path of the entity (hub name) to which the connection needs to happen
     */
    function create(connectionString, path) {
        connectionString = String(connectionString);
        const parsedCS = parseConnectionString(connectionString);
        if (!path) {
            path = "messages/events";
        }
        const result = {
            connectionString: connectionString,
            hostName: parsedCS.HostName,
            host: parsedCS && parsedCS.HostName ? parsedCS.HostName.split(".")[0] : "",
            entityPath: path,
            sharedAccessKeyName: parsedCS.SharedAccessKeyName,
            sharedAccessKey: parsedCS.SharedAccessKey,
            deviceId: parsedCS.DeviceId
        };
        return result;
    }
    IotHubConnectionConfig.create = create;
    /**
     * Validates the properties of connection config.
     * @ignore
     * @param {ConnectionConfig} config The connection config to be validated.
     */
    function validate(config) {
        if (!config) {
            throw new TypeError("Missing configuration");
        }
        if (!config.hostName) {
            throw new TypeError("Missing 'hostName' in configuration");
        }
        config.hostName = String(config.hostName);
        if (!config.entityPath) {
            throw new TypeError("Missing 'entityPath' in configuration");
        }
        config.entityPath = String(config.entityPath);
        if (!config.sharedAccessKeyName) {
            throw new TypeError("Missing 'sharedAccessKeyName' in configuration");
        }
        config.sharedAccessKeyName = String(config.sharedAccessKeyName);
        if (!config.sharedAccessKey) {
            throw new TypeError("Missing 'sharedAccessKey' in configuration");
        }
        config.sharedAccessKey = String(config.sharedAccessKey);
        if (config.deviceId) {
            config.deviceId = String(config.deviceId);
        }
    }
    IotHubConnectionConfig.validate = validate;
    /**
     * Convert iothub connection config to eventhub connection config.
     * @ignore
     * @param {IotHubConnectionConfig} iotHubConfig
     */
    function convertToEventHubConnectionConfig(iotHubConfig) {
        validate(iotHubConfig);
        const config = {
            sharedAccessKey: iotHubConfig.sharedAccessKey,
            sharedAccessKeyName: iotHubConfig.sharedAccessKeyName,
            entityPath: iotHubConfig.entityPath,
            host: iotHubConfig.hostName,
            endpoint: `sb://${iotHubConfig.hostName}/`,
            connectionString: iotHubConfig.connectionString
        };
        return EventHubConnectionConfig.createFromConnectionConfig(config);
    }
    IotHubConnectionConfig.convertToEventHubConnectionConfig = convertToEventHubConnectionConfig;
})(IotHubConnectionConfig || (IotHubConnectionConfig = {}));
//# sourceMappingURL=iothubConnectionConfig.js.map