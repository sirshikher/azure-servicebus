/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Properties of an Azure ML commitment plan.
 *
 */
class CommitmentPlanProperties {
  /**
   * Create a CommitmentPlanProperties.
   * @member {boolean} [chargeForOverage] Indicates whether usage beyond the
   * commitment plan's included quantities will be charged.
   * @member {boolean} [chargeForPlan] Indicates whether the commitment plan
   * will incur a charge.
   * @member {date} [creationDate] The date at which this commitment plan was
   * created, in ISO 8601 format.
   * @member {object} [includedQuantities] The included resource quantities
   * this plan gives you.
   * @member {number} [maxAssociationLimit] The maximum number of commitment
   * associations that can be children of this commitment plan.
   * @member {number} [maxCapacityLimit] The maximum scale-out capacity for
   * this commitment plan.
   * @member {number} [minCapacityLimit] The minimum scale-out capacity for
   * this commitment plan.
   * @member {string} [planMeter] The Azure meter which will be used to charge
   * for this commitment plan.
   * @member {number} [refillFrequencyInDays] The frequency at which this
   * commitment plan's included quantities are refilled.
   * @member {boolean} [suspendPlanOnOverage] Indicates whether this commitment
   * plan will be moved into a suspended state if usage goes beyond the
   * commitment plan's included quantities.
   */
  constructor() {
  }

  /**
   * Defines the metadata of CommitmentPlanProperties
   *
   * @returns {object} metadata of CommitmentPlanProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'CommitmentPlanProperties',
      type: {
        name: 'Composite',
        className: 'CommitmentPlanProperties',
        modelProperties: {
          chargeForOverage: {
            required: false,
            readOnly: true,
            serializedName: 'chargeForOverage',
            type: {
              name: 'Boolean'
            }
          },
          chargeForPlan: {
            required: false,
            readOnly: true,
            serializedName: 'chargeForPlan',
            type: {
              name: 'Boolean'
            }
          },
          creationDate: {
            required: false,
            readOnly: true,
            serializedName: 'creationDate',
            type: {
              name: 'DateTime'
            }
          },
          includedQuantities: {
            required: false,
            readOnly: true,
            serializedName: 'includedQuantities',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'PlanQuantityElementType',
                  type: {
                    name: 'Composite',
                    className: 'PlanQuantity'
                  }
              }
            }
          },
          maxAssociationLimit: {
            required: false,
            readOnly: true,
            serializedName: 'maxAssociationLimit',
            type: {
              name: 'Number'
            }
          },
          maxCapacityLimit: {
            required: false,
            readOnly: true,
            serializedName: 'maxCapacityLimit',
            type: {
              name: 'Number'
            }
          },
          minCapacityLimit: {
            required: false,
            readOnly: true,
            serializedName: 'minCapacityLimit',
            type: {
              name: 'Number'
            }
          },
          planMeter: {
            required: false,
            readOnly: true,
            serializedName: 'planMeter',
            type: {
              name: 'String'
            }
          },
          refillFrequencyInDays: {
            required: false,
            readOnly: true,
            serializedName: 'refillFrequencyInDays',
            type: {
              name: 'Number'
            }
          },
          suspendPlanOnOverage: {
            required: false,
            readOnly: true,
            serializedName: 'suspendPlanOnOverage',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = CommitmentPlanProperties;
