/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Swagger 2.0 schema for a column within the data table representing a web
 * service input or output. See Swagger specification:
 * http://swagger.io/specification/
 *
 */
class ColumnSpecification {
  /**
   * Create a ColumnSpecification.
   * @member {string} type Data type of the column. Possible values include:
   * 'Boolean', 'Integer', 'Number', 'String'
   * @member {string} [format] Additional format information for the data type.
   * Possible values include: 'Byte', 'Char', 'Complex64', 'Complex128',
   * 'Date-time', 'Date-timeOffset', 'Double', 'Duration', 'Float', 'Int8',
   * 'Int16', 'Int32', 'Int64', 'Uint8', 'Uint16', 'Uint32', 'Uint64'
   * @member {array} [enum] If the data type is categorical, this provides the
   * list of accepted categories.
   * @member {boolean} [xMsIsnullable] Flag indicating if the type supports
   * null values or not.
   * @member {boolean} [xMsIsordered] Flag indicating whether the categories
   * are treated as an ordered set or not, if this is a categorical column.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ColumnSpecification
   *
   * @returns {object} metadata of ColumnSpecification
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ColumnSpecification',
      type: {
        name: 'Composite',
        className: 'ColumnSpecification',
        modelProperties: {
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          format: {
            required: false,
            serializedName: 'format',
            type: {
              name: 'String'
            }
          },
          enum: {
            required: false,
            serializedName: 'enum',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ObjectElementType',
                  type: {
                    name: 'Object'
                  }
              }
            }
          },
          xMsIsnullable: {
            required: false,
            serializedName: 'x-ms-isnullable',
            type: {
              name: 'Boolean'
            }
          },
          xMsIsordered: {
            required: false,
            serializedName: 'x-ms-isordered',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = ColumnSpecification;
